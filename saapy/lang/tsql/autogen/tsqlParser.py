# Generated from tsql.g4 by ANTLR 4.5.2
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u01bb")
        buf.write("\u0c5e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\3\2\7\2\u0154")
        buf.write("\n\2\f\2\16\2\u0157\13\2\3\2\5\2\u015a\n\2\3\2\3\2\3\3")
        buf.write("\5\3\u015f\n\3\3\3\3\3\3\4\3\4\5\4\u0165\n\4\6\4\u0167")
        buf.write("\n\4\r\4\16\4\u0168\3\5\3\5\3\5\3\5\5\5\u016f\n\5\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u0175\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0187\n\7\3\b")
        buf.write("\3\b\5\b\u018b\n\b\3\b\5\b\u018e\n\b\3\b\3\b\5\b\u0192")
        buf.write("\n\b\3\b\3\b\5\b\u0196\n\b\3\b\3\b\5\b\u019a\n\b\3\b\3")
        buf.write("\b\3\b\5\b\u019f\n\b\3\b\3\b\3\b\5\b\u01a4\n\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u01ab\n\b\3\b\5\b\u01ae\n\b\3\b\3\b\5")
        buf.write("\b\u01b2\n\b\3\b\5\b\u01b5\n\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u01bd\n\b\3\b\5\b\u01c0\n\b\3\b\3\b\3\b\5\b\u01c5")
        buf.write("\n\b\3\b\5\b\u01c8\n\b\3\b\3\b\3\b\5\b\u01cd\n\b\3\b\3")
        buf.write("\b\3\b\5\b\u01d2\n\b\3\b\5\b\u01d5\n\b\3\b\3\b\3\b\5\b")
        buf.write("\u01da\n\b\3\b\3\b\3\b\3\b\5\b\u01e0\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\5\b\u01e7\n\b\3\b\3\b\5\b\u01eb\n\b\5\b\u01ed\n")
        buf.write("\b\3\b\3\b\3\b\5\b\u01f2\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\7\b\u01fd\n\b\f\b\16\b\u0200\13\b\3\b\3\b\5")
        buf.write("\b\u0204\n\b\5\b\u0206\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u020f\n\t\3\n\5\n\u0212\n\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u021a\n\n\5\n\u021c\n\n\3\n\5\n\u021f\n\n\3\n\3")
        buf.write("\n\5\n\u0223\n\n\3\n\5\n\u0226\n\n\3\n\3\n\5\n\u022a\n")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\5\n\u0231\n\n\3\n\3\n\5\n\u0235")
        buf.write("\n\n\5\n\u0237\n\n\5\n\u0239\n\n\3\n\5\n\u023c\n\n\3\n")
        buf.write("\5\n\u023f\n\n\3\n\5\n\u0242\n\n\3\13\3\13\3\13\3\13\5")
        buf.write("\13\u0248\n\13\3\f\5\f\u024b\n\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u0253\n\f\5\f\u0255\n\f\3\f\5\f\u0258\n\f\3\f\3")
        buf.write("\f\5\f\u025c\n\f\3\f\5\f\u025f\n\f\3\f\3\f\3\f\3\f\5\f")
        buf.write("\u0265\n\f\3\f\5\f\u0268\n\f\3\f\3\f\5\f\u026c\n\f\3\f")
        buf.write("\5\f\u026f\n\f\3\f\5\f\u0272\n\f\3\r\3\r\3\r\3\r\3\r\5")
        buf.write("\r\u0279\n\r\3\16\5\16\u027c\n\16\3\16\3\16\5\16\u0280")
        buf.write("\n\16\3\16\5\16\u0283\n\16\3\16\5\16\u0286\n\16\3\16\5")
        buf.write("\16\u0289\n\16\3\17\5\17\u028c\n\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u0294\n\17\5\17\u0296\n\17\3\17\3\17\5")
        buf.write("\17\u029a\n\17\3\17\5\17\u029d\n\17\3\17\3\17\3\17\3\17")
        buf.write("\7\17\u02a3\n\17\f\17\16\17\u02a6\13\17\3\17\5\17\u02a9")
        buf.write("\n\17\3\17\3\17\5\17\u02ad\n\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u02b4\n\17\3\17\3\17\5\17\u02b8\n\17\5\17\u02ba")
        buf.write("\n\17\5\17\u02bc\n\17\3\17\5\17\u02bf\n\17\3\17\5\17\u02c2")
        buf.write("\n\17\3\17\5\17\u02c5\n\17\3\20\3\20\3\20\3\20\7\20\u02cb")
        buf.write("\n\20\f\20\16\20\u02ce\13\20\3\20\3\20\3\20\5\20\u02d3")
        buf.write("\n\20\3\20\3\20\3\20\3\20\5\20\u02d9\n\20\5\20\u02db\n")
        buf.write("\20\3\21\3\21\5\21\u02df\n\21\3\21\5\21\u02e2\n\21\3\21")
        buf.write("\5\21\u02e5\n\21\3\22\3\22\3\22\5\22\u02ea\n\22\3\22\3")
        buf.write("\22\3\22\5\22\u02ef\n\22\3\22\5\22\u02f2\n\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u02fa\n\23\3\23\3\23\5\23\u02fe")
        buf.write("\n\23\3\23\3\23\3\23\7\23\u0303\n\23\f\23\16\23\u0306")
        buf.write("\13\23\5\23\u0308\n\23\3\23\3\23\3\23\3\23\3\23\7\23\u030f")
        buf.write("\n\23\f\23\16\23\u0312\13\23\5\23\u0314\n\23\3\23\3\23")
        buf.write("\5\23\u0318\n\23\3\23\3\23\3\23\3\23\7\23\u031e\n\23\f")
        buf.write("\23\16\23\u0321\13\23\5\23\u0323\n\23\3\24\3\24\5\24\u0327")
        buf.write("\n\24\3\24\5\24\u032a\n\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\5\24\u0333\n\24\3\24\3\24\5\24\u0337\n\24\3\24")
        buf.write("\3\24\5\24\u033b\n\24\3\24\5\24\u033e\n\24\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\5\25\u0348\n\25\5\25\u034a")
        buf.write("\n\25\3\25\3\25\3\25\3\25\5\25\u0350\n\25\3\25\3\25\3")
        buf.write("\25\5\25\u0355\n\25\3\25\3\25\3\25\5\25\u035a\n\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0363\n\25\3\26\3")
        buf.write("\26\3\26\3\26\3\26\5\26\u036a\n\26\3\26\5\26\u036d\n\26")
        buf.write("\3\26\3\26\3\26\7\26\u0372\n\26\f\26\16\26\u0375\13\26")
        buf.write("\3\26\5\26\u0378\n\26\5\26\u037a\n\26\3\26\3\26\3\26\3")
        buf.write("\26\7\26\u0380\n\26\f\26\16\26\u0383\13\26\5\26\u0385")
        buf.write("\n\26\3\26\3\26\5\26\u0389\n\26\3\26\3\26\3\26\3\27\3")
        buf.write("\27\3\27\3\27\5\27\u0392\n\27\3\27\5\27\u0395\n\27\3\27")
        buf.write("\3\27\5\27\u0399\n\27\3\27\3\27\5\27\u039d\n\27\3\27\5")
        buf.write("\27\u03a0\n\27\3\30\3\30\3\30\5\30\u03a5\n\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\5\31\u03b5\n\31\3\31\3\31\5\31\u03b9\n\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u03bf\n\31\5\31\u03c1\n\31\3\31\5\31")
        buf.write("\u03c4\n\31\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u03cc\n")
        buf.write("\32\3\32\3\32\3\32\3\32\5\32\u03d2\n\32\3\32\3\32\3\32")
        buf.write("\5\32\u03d7\n\32\3\32\5\32\u03da\n\32\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\5\33\u03e3\n\33\3\33\3\33\3\33\3\33")
        buf.write("\7\33\u03e9\n\33\f\33\16\33\u03ec\13\33\5\33\u03ee\n\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\5\33\u03f5\n\33\3\33\5\33\u03f8")
        buf.write("\n\33\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\5\35\u041d\n\35\3\35\5\35\u0420\n\35\3")
        buf.write("\36\3\36\3\36\3\36\5\36\u0426\n\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0432\n\36\5\36\u0434")
        buf.write("\n\36\3\36\5\36\u0437\n\36\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u044f\n\37\3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \5 \u045a\n \3 \3 \3 \3 \3 \3 \5 \u0462")
        buf.write("\n \3!\3!\3!\3!\3!\3!\3!\7!\u046b\n!\f!\16!\u046e\13!")
        buf.write("\7!\u0470\n!\f!\16!\u0473\13!\5!\u0475\n!\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\5\"\u047d\n\"\3#\3#\3#\3#\3$\3$\3$\3$\5$")
        buf.write("\u0487\n$\3%\3%\3%\3&\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*")
        buf.write("\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\5+\u04a1\n+\3+\3+\3+\3")
        buf.write("+\5+\u04a7\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u04b2\n+\3")
        buf.write(",\3,\3,\3-\3-\3-\3.\3.\3.\3.\3.\3.\5.\u04c0\n.\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u04c8\n/\3\60\3\60\3\60\3\60\3\60\5\60\u04cf")
        buf.write("\n\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\5\61\u04e6\n\61\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u04f3\n\63\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u04f9\n\64\3\64\3\64\3\64\5\64\u04fe\n\64\3\64\5")
        buf.write("\64\u0501\n\64\3\65\3\65\3\65\3\65\5\65\u0507\n\65\3\65")
        buf.write("\3\65\5\65\u050b\n\65\3\66\3\66\3\66\3\66\3\66\5\66\u0512")
        buf.write("\n\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\5\67\u051b\n")
        buf.write("\67\3\67\3\67\5\67\u051f\n\67\38\38\38\38\58\u0525\n8")
        buf.write("\38\38\38\78\u052a\n8\f8\168\u052d\138\38\58\u0530\n8")
        buf.write("\39\39\39\39\39\39\39\3:\3:\3:\3:\5:\u053d\n:\3:\3:\3")
        buf.write(";\3;\5;\u0543\n;\3<\3<\3<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\5=\u0554\n=\3=\3=\5=\u0558\n=\3=\3=\3=\3>\3>\3")
        buf.write(">\5>\u0560\n>\3>\3>\5>\u0564\n>\3>\3>\3>\3>\7>\u056a\n")
        buf.write(">\f>\16>\u056d\13>\3>\5>\u0570\n>\5>\u0572\n>\3?\3?\5")
        buf.write("?\u0576\n?\3?\3?\5?\u057a\n?\3?\3?\5?\u057e\n?\3?\3?\5")
        buf.write("?\u0582\n?\3?\3?\3?\3?\5?\u0588\n?\3?\3?\5?\u058c\n?\5")
        buf.write("?\u058e\n?\3@\3@\3@\5@\u0593\n@\3@\3@\3@\3@\7@\u0599\n")
        buf.write("@\f@\16@\u059c\13@\5@\u059e\n@\3@\5@\u05a1\n@\3@\3@\3")
        buf.write("@\3@\3@\7@\u05a8\n@\f@\16@\u05ab\13@\3@\3@\5@\u05af\n")
        buf.write("@\3@\3@\3@\5@\u05b4\n@\3@\5@\u05b7\n@\5@\u05b9\n@\3A\3")
        buf.write("A\5A\u05bd\nA\3A\3A\5A\u05c1\nA\3A\5A\u05c4\nA\3A\3A\5")
        buf.write("A\u05c8\nA\3B\3B\3C\3C\5C\u05ce\nC\3C\3C\3C\5C\u05d3\n")
        buf.write("C\3C\3C\3C\3C\3C\5C\u05da\nC\5C\u05dc\nC\3C\3C\5C\u05e0")
        buf.write("\nC\3C\3C\3C\3C\3C\5C\u05e7\nC\3C\3C\5C\u05eb\nC\3C\5")
        buf.write("C\u05ee\nC\3C\3C\3C\3C\3C\3C\3C\5C\u05f7\nC\3C\5C\u05fa")
        buf.write("\nC\5C\u05fc\nC\3D\3D\3D\3D\3D\3D\3D\5D\u0605\nD\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\5D\u0610\nD\3D\3D\5D\u0614\nD\5")
        buf.write("D\u0616\nD\5D\u0618\nD\3E\3E\3E\3E\5E\u061e\nE\3E\3E\3")
        buf.write("E\5E\u0623\nE\3E\3E\3E\3E\3E\5E\u062a\nE\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\5E\u0637\nE\5E\u0639\nE\5E\u063b\n")
        buf.write("E\3E\5E\u063e\nE\3E\5E\u0641\nE\3F\3F\3F\3F\3F\5F\u0648")
        buf.write("\nF\3F\5F\u064b\nF\3F\3F\3F\3F\5F\u0651\nF\3F\3F\3F\5")
        buf.write("F\u0656\nF\5F\u0658\nF\3F\5F\u065b\nF\3F\3F\3F\3F\5F\u0661")
        buf.write("\nF\3F\3F\3F\3F\3F\3F\5F\u0669\nF\5F\u066b\nF\3F\5F\u066e")
        buf.write("\nF\3F\3F\5F\u0672\nF\3F\5F\u0675\nF\3F\3F\3F\3F\5F\u067b")
        buf.write("\nF\3F\5F\u067e\nF\3F\3F\5F\u0682\nF\3F\5F\u0685\nF\3")
        buf.write("F\3F\3F\3F\5F\u068b\nF\3F\5F\u068e\nF\5F\u0690\nF\3G\3")
        buf.write("G\5G\u0694\nG\3H\3H\3H\5H\u0699\nH\3I\3I\3I\3I\3J\3J\5")
        buf.write("J\u06a1\nJ\3J\3J\3J\5J\u06a6\nJ\3K\3K\3K\3K\3K\3L\3L\5")
        buf.write("L\u06af\nL\3L\7L\u06b2\nL\fL\16L\u06b5\13L\3M\3M\5M\u06b9")
        buf.write("\nM\3N\3N\3N\3N\5N\u06bf\nN\3N\3N\5N\u06c3\nN\3N\5N\u06c6")
        buf.write("\nN\3N\3N\5N\u06ca\nN\3N\3N\3N\3N\5N\u06d0\nN\3N\3N\3")
        buf.write("N\3N\3N\3N\5N\u06d8\nN\3N\3N\3N\5N\u06dd\nN\5N\u06df\n")
        buf.write("N\3N\5N\u06e2\nN\3N\7N\u06e5\nN\fN\16N\u06e8\13N\3O\3")
        buf.write("O\5O\u06ec\nO\3O\5O\u06ef\nO\3O\3O\3O\5O\u06f4\nO\3O\5")
        buf.write("O\u06f7\nO\3O\5O\u06fa\nO\3O\3O\3O\3O\5O\u0700\nO\3O\3")
        buf.write("O\3O\3O\5O\u0706\nO\3P\3P\5P\u070a\nP\3P\3P\3P\5P\u070f")
        buf.write("\nP\3P\5P\u0712\nP\3P\3P\3P\5P\u0717\nP\3P\3P\5P\u071b")
        buf.write("\nP\3P\3P\5P\u071f\nP\3P\3P\3P\3P\5P\u0725\nP\3P\3P\3")
        buf.write("P\3P\5P\u072b\nP\3Q\3Q\3Q\3Q\3Q\7Q\u0732\nQ\fQ\16Q\u0735")
        buf.write("\13Q\3Q\3Q\3R\3R\3R\3R\3R\5R\u073e\nR\3S\3S\3S\3S\3S\3")
        buf.write("S\3S\3S\5S\u0748\nS\5S\u074a\nS\5S\u074c\nS\3S\5S\u074f")
        buf.write("\nS\3S\5S\u0752\nS\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u075d")
        buf.write("\nS\5S\u075f\nS\5S\u0761\nS\3S\5S\u0764\nS\3T\5T\u0767")
        buf.write("\nT\3T\5T\u076a\nT\3T\5T\u076d\nT\3T\5T\u0770\nT\3T\5")
        buf.write("T\u0773\nT\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\5U\u077f\nU\3")
        buf.write("U\5U\u0782\nU\3U\5U\u0785\nU\3U\3U\3U\3U\3U\7U\u078c\n")
        buf.write("U\fU\16U\u078f\13U\5U\u0791\nU\3U\5U\u0794\nU\3V\3V\3")
        buf.write("V\3V\3V\5V\u079b\nV\3V\5V\u079e\nV\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\5V\u07ac\nV\3V\5V\u07af\nV\3V\3V\3V\3")
        buf.write("V\3V\5V\u07b6\nV\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u07c1\n")
        buf.write("V\3W\3W\5W\u07c5\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\6X\u07d4\nX\rX\16X\u07d5\3X\3X\5X\u07da\nX\3X\3X")
        buf.write("\3X\3X\6X\u07e0\nX\rX\16X\u07e1\3X\3X\5X\u07e6\nX\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u07f4\nX\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\3X\3X\7X\u0803\nX\fX\16X\u0806")
        buf.write("\13X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0810\nY\3Z\3Z\3[\3[\3")
        buf.write("[\5[\u0817\n[\3[\3[\3[\7[\u081c\n[\f[\16[\u081f\13[\3")
        buf.write("\\\3\\\3\\\3\\\3\\\5\\\u0826\n\\\3\\\3\\\3\\\3\\\3\\\3")
        buf.write("]\3]\5]\u082f\n]\3]\3]\5]\u0833\n]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\5]\u083d\n]\3^\3^\3^\7^\u0842\n^\f^\16^\u0845\13")
        buf.write("^\3_\3_\3_\7_\u084a\n_\f_\16_\u084d\13_\3`\3`\3`\7`\u0852")
        buf.write("\n`\f`\16`\u0855\13`\3a\5a\u0858\na\3a\3a\3b\3b\3b\3b")
        buf.write("\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\5b\u086e\n")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\5b\u0877\nb\3b\3b\3b\3b\5b\u087d")
        buf.write("\nb\3b\3b\3b\3b\5b\u0883\nb\3b\3b\3b\3b\5b\u0889\nb\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\5b\u0894\nb\3c\3c\3c\3c\3c\5")
        buf.write("c\u089b\nc\3c\7c\u089e\nc\fc\16c\u08a1\13c\3d\3d\5d\u08a5")
        buf.write("\nd\3d\3d\5d\u08a9\nd\3d\3d\3d\3d\3d\6d\u08b0\nd\rd\16")
        buf.write("d\u08b1\5d\u08b4\nd\3e\3e\5e\u08b8\ne\3e\3e\3e\5e\u08bd")
        buf.write("\ne\3e\3e\5e\u08c1\ne\5e\u08c3\ne\3e\3e\3e\5e\u08c8\n")
        buf.write("e\3e\3e\5e\u08cc\ne\3e\3e\5e\u08d0\ne\3e\3e\3e\3e\3e\7")
        buf.write("e\u08d7\ne\fe\16e\u08da\13e\5e\u08dc\ne\3e\3e\5e\u08e0")
        buf.write("\ne\3f\3f\3f\3f\3f\7f\u08e7\nf\ff\16f\u08ea\13f\3f\3f")
        buf.write("\3f\3f\3f\3f\3f\3f\3f\5f\u08f5\nf\5f\u08f7\nf\3g\3g\3")
        buf.write("g\3g\3g\3g\5g\u08ff\ng\3g\3g\3g\3g\3g\3g\5g\u0907\ng\3")
        buf.write("g\5g\u090a\ng\5g\u090c\ng\3h\3h\3h\3h\3h\5h\u0913\nh\3")
        buf.write("i\3i\5i\u0917\ni\3j\3j\3k\3k\3k\3k\3k\7k\u0920\nk\fk\16")
        buf.write("k\u0923\13k\3k\3k\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l")
        buf.write("\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\7l\u0942")
        buf.write("\nl\fl\16l\u0945\13l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l")
        buf.write("\3l\3l\5l\u0954\nl\3m\3m\3m\3m\5m\u095a\nm\3n\3n\3n\7")
        buf.write("n\u095f\nn\fn\16n\u0962\13n\3o\3o\3o\5o\u0967\no\3o\3")
        buf.write("o\3o\5o\u096c\no\3o\3o\3o\3o\3o\3o\5o\u0974\no\3o\5o\u0977")
        buf.write("\no\5o\u0979\no\3p\3p\3p\7p\u097e\np\fp\16p\u0981\13p")
        buf.write("\3q\3q\3q\3q\3q\5q\u0988\nq\3r\3r\7r\u098c\nr\fr\16r\u098f")
        buf.write("\13r\3s\3s\5s\u0993\ns\3s\3s\5s\u0997\ns\3s\3s\3s\5s\u099c")
        buf.write("\ns\5s\u099e\ns\3s\3s\3s\3s\3s\5s\u09a5\ns\3s\3s\5s\u09a9")
        buf.write("\ns\3s\3s\3s\3s\3s\5s\u09b0\ns\5s\u09b2\ns\5s\u09b4\n")
        buf.write("s\3t\3t\3t\3t\3t\3t\3t\3t\3u\5u\u09bf\nu\3u\3u\5u\u09c3")
        buf.write("\nu\5u\u09c5\nu\3u\5u\u09c8\nu\3u\3u\3u\3u\3u\3u\3u\3")
        buf.write("u\3u\3u\3u\3u\3u\3u\5u\u09d8\nu\3v\3v\5v\u09dc\nv\3w\3")
        buf.write("w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\7w\u09ee\n")
        buf.write("w\fw\16w\u09f1\13w\3w\5w\u09f4\nw\3w\3w\5w\u09f8\nw\3")
        buf.write("x\3x\3x\3x\3y\3y\3y\3y\3y\5y\u0a03\ny\3z\3z\3z\3z\3z\5")
        buf.write("z\u0a0a\nz\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\5z\u0a20\nz\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\5z\u0a54\nz\3z\3z\5z\u0a58\nz\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0a66\nz\3{\3{\3{\3{\3")
        buf.write("{\3|\3|\3|\3|\3|\3}\5}\u0a73\n}\3}\3}\3~\3~\5~\u0a79\n")
        buf.write("~\3\177\5\177\u0a7c\n\177\3\177\3\177\3\177\3\177\7\177")
        buf.write("\u0a82\n\177\f\177\16\177\u0a85\13\177\3\177\3\177\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\7\u0080\u0a8e\n\u0080")
        buf.write("\f\u0080\16\u0080\u0a91\13\u0080\3\u0080\3\u0080\3\u0081")
        buf.write("\5\u0081\u0a96\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\7\u0081\u0a9d\n\u0081\f\u0081\16\u0081\u0aa0")
        buf.write("\13\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081")
        buf.write("\u0aae\n\u0081\f\u0081\16\u0081\u0ab1\13\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\5\u0081\u0ab6\n\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0abe\n\u0081")
        buf.write("\3\u0082\3\u0082\5\u0082\u0ac2\n\u0082\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\7\u0083\u0ac8\n\u0083\f\u0083\16\u0083")
        buf.write("\u0acb\13\u0083\3\u0083\3\u0083\3\u0084\3\u0084\5\u0084")
        buf.write("\u0ad1\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\7\u0085\u0adc\n\u0085")
        buf.write("\f\u0085\16\u0085\u0adf\13\u0085\3\u0086\3\u0086\3\u0086")
        buf.write("\7\u0086\u0ae4\n\u0086\f\u0086\16\u0086\u0ae7\13\u0086")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\5\u0087\u0af3\n\u0087\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0afa\n\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0b00\n\u0088")
        buf.write("\3\u0088\3\u0088\5\u0088\u0b04\n\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u0b15\n\u0088\3\u0089\5\u0089\u0b18\n\u0089\3\u0089\3")
        buf.write("\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a")
        buf.write("\u0b21\n\u008a\3\u008a\5\u008a\u0b24\n\u008a\3\u008a\5")
        buf.write("\u008a\u0b27\n\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3")
        buf.write("\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\5\u008c\u0b34\n\u008c\3\u008d\3\u008d\5\u008d\u0b38\n")
        buf.write("\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\5\u008e\u0b40\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u0b46\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\7\u0090\u0b4c\n\u0090\f\u0090\16\u0090\u0b4f\13\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0b55\n\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0b5b\n\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090")
        buf.write("\u0b6a\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\5\u0091\u0b73\n\u0091\3\u0091\3\u0091")
        buf.write("\3\u0092\3\u0092\5\u0092\u0b79\n\u0092\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0b7f\n\u0093\3\u0093\5\u0093")
        buf.write("\u0b82\n\u0093\3\u0093\3\u0093\5\u0093\u0b86\n\u0093\3")
        buf.write("\u0093\3\u0093\3\u0093\7\u0093\u0b8b\n\u0093\f\u0093\16")
        buf.write("\u0093\u0b8e\13\u0093\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\5\u0094\u0b95\n\u0094\3\u0094\5\u0094\u0b98\n")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b9e\n")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ba4\n")
        buf.write("\u0094\5\u0094\u0ba6\n\u0094\3\u0094\3\u0094\3\u0094\3")
        buf.write("\u0094\5\u0094\u0bac\n\u0094\3\u0094\5\u0094\u0baf\n\u0094")
        buf.write("\5\u0094\u0bb1\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u0bb7\n\u0094\5\u0094\u0bb9\n\u0094\3\u0094\3")
        buf.write("\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0bc7\n\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0bce")
        buf.write("\n\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0bd5\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\5\u0096\u0bdc\n\u0096\3\u0096\3\u0096\3\u0097\3\u0097")
        buf.write("\3\u0097\5\u0097\u0be3\n\u0097\3\u0097\3\u0097\3\u0098")
        buf.write("\3\u0098\3\u0098\5\u0098\u0bea\n\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\5\u0098\u0bf1\n\u0098\3\u0098")
        buf.write("\3\u0098\3\u0099\3\u0099\5\u0099\u0bf7\n\u0099\3\u009a")
        buf.write("\3\u009a\3\u009a\5\u009a\u0bfc\n\u009a\3\u009a\3\u009a")
        buf.write("\3\u009b\3\u009b\3\u009b\7\u009b\u0c03\n\u009b\f\u009b")
        buf.write("\16\u009b\u0c06\13\u009b\3\u009c\3\u009c\5\u009c\u0c0a")
        buf.write("\n\u009c\3\u009d\3\u009d\3\u009e\3\u009e\3\u009f\5\u009f")
        buf.write("\u0c11\n\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\5\u00a0\u0c1a\n\u00a0\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u0c1e\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u0c24\n\u00a1\3\u00a1\5\u00a1\u0c27\n\u00a1\3")
        buf.write("\u00a2\3\u00a2\5\u00a2\u0c2b\n\u00a2\3\u00a3\3\u00a3\3")
        buf.write("\u00a3\5\u00a3\u0c30\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c34")
        buf.write("\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c38\n\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u0c3c\n\u00a3\3\u00a4\3\u00a4\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\5\u00a5\u0c43\n\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\5\u00a7\u0c56\n\u00a7\3\u00a8\3\u00a8\3\u00a9")
        buf.write("\3\u00a9\5\u00a9\u0c5c\n\u00a9\3\u00a9\2\3\u00ae\u00aa")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\2=\3\2\u0196\u0197\4\2\u0196")
        buf.write("\u0196\u0199\u0199\4\2\u00f4\u00f4\u017c\u017c\4\2\u0196")
        buf.write("\u0197\u0199\u0199\4\2mm\177\177\4\2\n\n\65\65\5\2\63")
        buf.write("\63\\\\\u00b6\u00b6\3\2\u0086\u0087\4\2\u0146\u0147\u0153")
        buf.write("\u0153\4\2\u0080\u0080\u0162\u0162\5\2\u00ff\u00ff\u0165")
        buf.write("\u0165\u018c\u018c\5\2\u00a7\u00a7\u00cf\u00cf\u00f9\u00f9")
        buf.write("\4\2rrtt\5\2\u00f0\u00f0\u0115\u0115\u012f\u012f\4\2\u010e")
        buf.write("\u010e\u0123\u0123\5\2\u00fd\u00fd\u0140\u0140\u0142\u0142")
        buf.write("\3\2\u0155\u0156\5\2\u0133\u0133\u015d\u015d\u016d\u016d")
        buf.write("\5\2\u00c6\u00c6\u00fa\u00fa\u010a\u010a\4\2\u010a\u010a")
        buf.write("\u016c\u016c\5\2OO\u00d9\u00d9\u016c\u016c\5\2mm\u00df")
        buf.write("\u00df\u017d\u017d\4\2\u012f\u012f\u0168\u0168\4\2\u00b9")
        buf.write("\u00b9\u0125\u0125\3\2\u0146\u0147\4\2\u00a7\u00a7\u00bc")
        buf.write("\u00bc\3\2\u00ad\u00ae\6\2\u00da\u00da\u0148\u0148\u0169")
        buf.write("\u0169\u0199\u0199\4\2\u010b\u010b\u0166\u0166\6\2\u00fc")
        buf.write("\u00fc\u0103\u0103\u0120\u0120\u0171\u0171\5\2\u0144\u0144")
        buf.write("\u0155\u0155\u0167\u0167\4\2\u00c4\u00c4\u015a\u015a\3")
        buf.write("\2\u01b6\u01b7\3\2\u01b3\u01b5\4\2\u01b6\u01b7\u01b9\u01bb")
        buf.write("\5\2\5\5\b\b\u00a4\u00a4\4\2\5\5\67\67\4\2\u0160\u0160")
        buf.write("\u0162\u0162\4\2\u0107\u0107\u0137\u0137\4\2||\u0113\u0113")
        buf.write("\5\2ii\u00e3\u00e3\u0113\u0113\5\2ii\u0113\u0113\u0126")
        buf.write("\u0126\4\2UU\u0161\u0161\4\2oo\u0196\u0197\5\2OOdd\u0094")
        buf.write("\u0094\6\2ii\u0113\u0113\u0126\u0126\u015b\u015b\4\2\u0197")
        buf.write("\u0197\u0199\u0199\5\2\u00f7\u00f7\u0152\u0152\u0163\u0163")
        buf.write("\7\2\u00d6\u00d6\u0128\u0128\u012e\u012e\u0173\u0175\u0189")
        buf.write("\u018a\3\2\u00e7\u00e8\4\2\u0151\u0151\u0162\u0162\5\2")
        buf.write("OOrr\u0155\u0155\4\2\32\32ll\4\2\u0128\u0128\u0197\u0197")
        buf.write("\3\2\u019b\u019c\4\2\u0197\u0197\u019b\u019b-\2JJ\u00c4")
        buf.write("\u00c4\u00cd\u00cd\u00cf\u00cf\u00d6\u00d7\u00da\u00dc")
        buf.write("\u00e0\u00e1\u00e3\u00e3\u00e5\u00e8\u00f4\u00f4\u00f6")
        buf.write("\u00f7\u00f9\u00f9\u00fc\u00fc\u00ff\u00ff\u0101\u0103")
        buf.write("\u0107\u010c\u010e\u0111\u0113\u0113\u0116\u0116\u0118")
        buf.write("\u0118\u011a\u011c\u011e\u012a\u012e\u012e\u0132\u0132")
        buf.write("\u0134\u0134\u0137\u0139\u013b\u013b\u013d\u013e\u0141")
        buf.write("\u0148\u014a\u014f\u0151\u0153\u0155\u0155\u0157\u0157")
        buf.write("\u015a\u015c\u015e\u0167\u0169\u016a\u016c\u016c\u016f")
        buf.write("\u0175\u0179\u017c\u0180\u0180\u0182\u0186\u0188\u018f")
        buf.write("\u0198\u0198\3\2\u01a1\u01a8\7\2\u010d\u010d\u011d\u011d")
        buf.write("\u012c\u012c\u0178\u0178\u01b5\u01b5\u0e6d\2\u0155\3\2")
        buf.write("\2\2\4\u015e\3\2\2\2\6\u0166\3\2\2\2\b\u016e\3\2\2\2\n")
        buf.write("\u0174\3\2\2\2\f\u0186\3\2\2\2\16\u0205\3\2\2\2\20\u020e")
        buf.write("\3\2\2\2\22\u0211\3\2\2\2\24\u0247\3\2\2\2\26\u024a\3")
        buf.write("\2\2\2\30\u0278\3\2\2\2\32\u027b\3\2\2\2\34\u028b\3\2")
        buf.write("\2\2\36\u02c6\3\2\2\2 \u02de\3\2\2\2\"\u02f1\3\2\2\2$")
        buf.write("\u02f3\3\2\2\2&\u0324\3\2\2\2(\u033f\3\2\2\2*\u0364\3")
        buf.write("\2\2\2,\u038d\3\2\2\2.\u03a4\3\2\2\2\60\u03a6\3\2\2\2")
        buf.write("\62\u03c5\3\2\2\2\64\u03db\3\2\2\2\66\u03f9\3\2\2\28\u03fb")
        buf.write("\3\2\2\2:\u0421\3\2\2\2<\u044e\3\2\2\2>\u0461\3\2\2\2")
        buf.write("@\u0463\3\2\2\2B\u047c\3\2\2\2D\u047e\3\2\2\2F\u0486\3")
        buf.write("\2\2\2H\u0488\3\2\2\2J\u048b\3\2\2\2L\u048e\3\2\2\2N\u0490")
        buf.write("\3\2\2\2P\u0492\3\2\2\2R\u0494\3\2\2\2T\u04b1\3\2\2\2")
        buf.write("V\u04b3\3\2\2\2X\u04b6\3\2\2\2Z\u04bf\3\2\2\2\\\u04c7")
        buf.write("\3\2\2\2^\u04ce\3\2\2\2`\u04e5\3\2\2\2b\u04e7\3\2\2\2")
        buf.write("d\u04f2\3\2\2\2f\u04f4\3\2\2\2h\u0502\3\2\2\2j\u050c\3")
        buf.write("\2\2\2l\u0516\3\2\2\2n\u0520\3\2\2\2p\u0531\3\2\2\2r\u0538")
        buf.write("\3\2\2\2t\u0542\3\2\2\2v\u0544\3\2\2\2x\u054b\3\2\2\2")
        buf.write("z\u0571\3\2\2\2|\u058d\3\2\2\2~\u05b8\3\2\2\2\u0080\u05bc")
        buf.write("\3\2\2\2\u0082\u05c9\3\2\2\2\u0084\u05fb\3\2\2\2\u0086")
        buf.write("\u0617\3\2\2\2\u0088\u0640\3\2\2\2\u008a\u068f\3\2\2\2")
        buf.write("\u008c\u0691\3\2\2\2\u008e\u0695\3\2\2\2\u0090\u069a\3")
        buf.write("\2\2\2\u0092\u069e\3\2\2\2\u0094\u06a7\3\2\2\2\u0096\u06ac")
        buf.write("\3\2\2\2\u0098\u06b8\3\2\2\2\u009a\u06ba\3\2\2\2\u009c")
        buf.write("\u06eb\3\2\2\2\u009e\u0709\3\2\2\2\u00a0\u072c\3\2\2\2")
        buf.write("\u00a2\u0738\3\2\2\2\u00a4\u073f\3\2\2\2\u00a6\u0766\3")
        buf.write("\2\2\2\u00a8\u0777\3\2\2\2\u00aa\u07c0\3\2\2\2\u00ac\u07c4")
        buf.write("\3\2\2\2\u00ae\u07f3\3\2\2\2\u00b0\u080f\3\2\2\2\u00b2")
        buf.write("\u0811\3\2\2\2\u00b4\u0813\3\2\2\2\u00b6\u0820\3\2\2\2")
        buf.write("\u00b8\u083c\3\2\2\2\u00ba\u083e\3\2\2\2\u00bc\u0846\3")
        buf.write("\2\2\2\u00be\u084e\3\2\2\2\u00c0\u0857\3\2\2\2\u00c2\u0893")
        buf.write("\3\2\2\2\u00c4\u089a\3\2\2\2\u00c6\u08a8\3\2\2\2\u00c8")
        buf.write("\u08b5\3\2\2\2\u00ca\u08e1\3\2\2\2\u00cc\u090b\3\2\2\2")
        buf.write("\u00ce\u090d\3\2\2\2\u00d0\u0914\3\2\2\2\u00d2\u0918\3")
        buf.write("\2\2\2\u00d4\u091a\3\2\2\2\u00d6\u0953\3\2\2\2\u00d8\u0955")
        buf.write("\3\2\2\2\u00da\u095b\3\2\2\2\u00dc\u0978\3\2\2\2\u00de")
        buf.write("\u097a\3\2\2\2\u00e0\u0987\3\2\2\2\u00e2\u0989\3\2\2\2")
        buf.write("\u00e4\u09b3\3\2\2\2\u00e6\u09b5\3\2\2\2\u00e8\u09d7\3")
        buf.write("\2\2\2\u00ea\u09d9\3\2\2\2\u00ec\u09f7\3\2\2\2\u00ee\u09f9")
        buf.write("\3\2\2\2\u00f0\u0a02\3\2\2\2\u00f2\u0a65\3\2\2\2\u00f4")
        buf.write("\u0a67\3\2\2\2\u00f6\u0a6c\3\2\2\2\u00f8\u0a72\3\2\2\2")
        buf.write("\u00fa\u0a76\3\2\2\2\u00fc\u0a7b\3\2\2\2\u00fe\u0a88\3")
        buf.write("\2\2\2\u0100\u0a95\3\2\2\2\u0102\u0ac1\3\2\2\2\u0104\u0ac3")
        buf.write("\3\2\2\2\u0106\u0ad0\3\2\2\2\u0108\u0ad2\3\2\2\2\u010a")
        buf.write("\u0ae0\3\2\2\2\u010c\u0af2\3\2\2\2\u010e\u0b14\3\2\2\2")
        buf.write("\u0110\u0b17\3\2\2\2\u0112\u0b1b\3\2\2\2\u0114\u0b2a\3")
        buf.write("\2\2\2\u0116\u0b33\3\2\2\2\u0118\u0b37\3\2\2\2\u011a\u0b3f")
        buf.write("\3\2\2\2\u011c\u0b45\3\2\2\2\u011e\u0b69\3\2\2\2\u0120")
        buf.write("\u0b6b\3\2\2\2\u0122\u0b78\3\2\2\2\u0124\u0b7a\3\2\2\2")
        buf.write("\u0126\u0b8f\3\2\2\2\u0128\u0bcd\3\2\2\2\u012a\u0bdb\3")
        buf.write("\2\2\2\u012c\u0be2\3\2\2\2\u012e\u0bf0\3\2\2\2\u0130\u0bf6")
        buf.write("\3\2\2\2\u0132\u0bfb\3\2\2\2\u0134\u0bff\3\2\2\2\u0136")
        buf.write("\u0c09\3\2\2\2\u0138\u0c0b\3\2\2\2\u013a\u0c0d\3\2\2\2")
        buf.write("\u013c\u0c10\3\2\2\2\u013e\u0c19\3\2\2\2\u0140\u0c1b\3")
        buf.write("\2\2\2\u0142\u0c2a\3\2\2\2\u0144\u0c3b\3\2\2\2\u0146\u0c3d")
        buf.write("\3\2\2\2\u0148\u0c42\3\2\2\2\u014a\u0c44\3\2\2\2\u014c")
        buf.write("\u0c55\3\2\2\2\u014e\u0c57\3\2\2\2\u0150\u0c59\3\2\2\2")
        buf.write("\u0152\u0154\5\4\3\2\u0153\u0152\3\2\2\2\u0154\u0157\3")
        buf.write("\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0159")
        buf.write("\3\2\2\2\u0157\u0155\3\2\2\2\u0158\u015a\5\6\4\2\u0159")
        buf.write("\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\3\2\2\2")
        buf.write("\u015b\u015c\7\2\2\3\u015c\3\3\2\2\2\u015d\u015f\5\6\4")
        buf.write("\2\u015e\u015d\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\u0161\5\u008cG\2\u0161\5\3\2\2\2\u0162")
        buf.write("\u0164\5\b\5\2\u0163\u0165\7\u01b1\2\2\u0164\u0163\3\2")
        buf.write("\2\2\u0164\u0165\3\2\2\2\u0165\u0167\3\2\2\2\u0166\u0162")
        buf.write("\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0166\3\2\2\2\u0168")
        buf.write("\u0169\3\2\2\2\u0169\7\3\2\2\2\u016a\u016f\5\n\6\2\u016b")
        buf.write("\u016f\5\f\7\2\u016c\u016f\5\16\b\2\u016d\u016f\5\20\t")
        buf.write("\2\u016e\u016a\3\2\2\2\u016e\u016b\3\2\2\2\u016e\u016c")
        buf.write("\3\2\2\2\u016e\u016d\3\2\2\2\u016f\t\3\2\2\2\u0170\u0175")
        buf.write("\5\22\n\2\u0171\u0175\5\26\f\2\u0172\u0175\5\32\16\2\u0173")
        buf.write("\u0175\5\34\17\2\u0174\u0170\3\2\2\2\u0174\u0171\3\2\2")
        buf.write("\2\u0174\u0172\3\2\2\2\u0174\u0173\3\2\2\2\u0175\13\3")
        buf.write("\2\2\2\u0176\u0187\5$\23\2\u0177\u0187\5&\24\2\u0178\u0187")
        buf.write("\5(\25\2\u0179\u0187\5*\26\2\u017a\u0187\5\60\31\2\u017b")
        buf.write("\u0187\5\62\32\2\u017c\u0187\5p9\2\u017d\u0187\5\64\33")
        buf.write("\2\u017e\u0187\58\35\2\u017f\u0187\5:\36\2\u0180\u0187")
        buf.write("\5f\64\2\u0181\u0187\5h\65\2\u0182\u0187\5j\66\2\u0183")
        buf.write("\u0187\5l\67\2\u0184\u0187\5r:\2\u0185\u0187\5n8\2\u0186")
        buf.write("\u0176\3\2\2\2\u0186\u0177\3\2\2\2\u0186\u0178\3\2\2\2")
        buf.write("\u0186\u0179\3\2\2\2\u0186\u017a\3\2\2\2\u0186\u017b\3")
        buf.write("\2\2\2\u0186\u017c\3\2\2\2\u0186\u017d\3\2\2\2\u0186\u017e")
        buf.write("\3\2\2\2\u0186\u017f\3\2\2\2\u0186\u0180\3\2\2\2\u0186")
        buf.write("\u0181\3\2\2\2\u0186\u0182\3\2\2\2\u0186\u0183\3\2\2\2")
        buf.write("\u0186\u0184\3\2\2\2\u0186\u0185\3\2\2\2\u0187\r\3\2\2")
        buf.write("\2\u0188\u018a\7\r\2\2\u0189\u018b\7\u01b1\2\2\u018a\u0189")
        buf.write("\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018d\3\2\2\2\u018c")
        buf.write("\u018e\5\6\4\2\u018d\u018c\3\2\2\2\u018d\u018e\3\2\2\2")
        buf.write("\u018e\u018f\3\2\2\2\u018f\u0191\7=\2\2\u0190\u0192\7")
        buf.write("\u01b1\2\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2\u0192")
        buf.write("\u0206\3\2\2\2\u0193\u0195\7\17\2\2\u0194\u0196\7\u01b1")
        buf.write("\2\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0206")
        buf.write("\3\2\2\2\u0197\u0199\7$\2\2\u0198\u019a\7\u01b1\2\2\u0199")
        buf.write("\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u0206\3\2\2\2")
        buf.write("\u019b\u019c\7Q\2\2\u019c\u019e\5\u0148\u00a5\2\u019d")
        buf.write("\u019f\7\u01b1\2\2\u019e\u019d\3\2\2\2\u019e\u019f\3\2")
        buf.write("\2\2\u019f\u0206\3\2\2\2\u01a0\u01a1\5\u0148\u00a5\2\u01a1")
        buf.write("\u01a3\7\u01b2\2\2\u01a2\u01a4\7\u01b1\2\2\u01a3\u01a2")
        buf.write("\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u0206\3\2\2\2\u01a5")
        buf.write("\u01a6\7X\2\2\u01a6\u01a7\5\u00bc_\2\u01a7\u01aa\5\b\5")
        buf.write("\2\u01a8\u01a9\7<\2\2\u01a9\u01ab\5\b\5\2\u01aa\u01a8")
        buf.write("\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ad\3\2\2\2\u01ac")
        buf.write("\u01ae\7\u01b1\2\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae\3\2")
        buf.write("\2\2\u01ae\u0206\3\2\2\2\u01af\u01b1\7\u0091\2\2\u01b0")
        buf.write("\u01b2\5\u00aeX\2\u01b1\u01b0\3\2\2\2\u01b1\u01b2\3\2")
        buf.write("\2\2\u01b2\u01b4\3\2\2\2\u01b3\u01b5\7\u01b1\2\2\u01b4")
        buf.write("\u01b3\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u0206\3\2\2\2")
        buf.write("\u01b6\u01bc\7\u017a\2\2\u01b7\u01b8\t\2\2\2\u01b8\u01b9")
        buf.write("\7\u01b0\2\2\u01b9\u01ba\t\3\2\2\u01ba\u01bb\7\u01b0\2")
        buf.write("\2\u01bb\u01bd\t\2\2\2\u01bc\u01b7\3\2\2\2\u01bc\u01bd")
        buf.write("\3\2\2\2\u01bd\u01bf\3\2\2\2\u01be\u01c0\7\u01b1\2\2\u01bf")
        buf.write("\u01be\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u0206\3\2\2\2")
        buf.write("\u01c1\u01c2\7\r\2\2\u01c2\u01c4\7\u0180\2\2\u01c3\u01c5")
        buf.write("\7\u01b1\2\2\u01c4\u01c3\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5")
        buf.write("\u01c7\3\2\2\2\u01c6\u01c8\5\6\4\2\u01c7\u01c6\3\2\2\2")
        buf.write("\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\7")
        buf.write("=\2\2\u01ca\u01cc\7\u0180\2\2\u01cb\u01cd\7\u01b1\2\2")
        buf.write("\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\3")
        buf.write("\2\2\2\u01ce\u01cf\7\r\2\2\u01cf\u01d1\7\u00dc\2\2\u01d0")
        buf.write("\u01d2\7\u01b1\2\2\u01d1\u01d0\3\2\2\2\u01d1\u01d2\3\2")
        buf.write("\2\2\u01d2\u01d4\3\2\2\2\u01d3\u01d5\5\6\4\2\u01d4\u01d3")
        buf.write("\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6")
        buf.write("\u01d7\7=\2\2\u01d7\u01d9\7\u00dc\2\2\u01d8\u01da\7\u01b1")
        buf.write("\2\2\u01d9\u01d8\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u0206")
        buf.write("\3\2\2\2\u01db\u01dc\7\u00bd\2\2\u01dc\u01dd\t\4\2\2\u01dd")
        buf.write("\u01df\5\u00aeX\2\u01de\u01e0\7\u01b1\2\2\u01df\u01de")
        buf.write("\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u0206\3\2\2\2\u01e1")
        buf.write("\u01e2\7\u00c0\2\2\u01e2\u01ec\5\u00bc_\2\u01e3\u01ed")
        buf.write("\5\b\5\2\u01e4\u01e6\7\17\2\2\u01e5\u01e7\7\u01b1\2\2")
        buf.write("\u01e6\u01e5\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01ed\3")
        buf.write("\2\2\2\u01e8\u01ea\7$\2\2\u01e9\u01eb\7\u01b1\2\2\u01ea")
        buf.write("\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\3\2\2\2")
        buf.write("\u01ec\u01e3\3\2\2\2\u01ec\u01e4\3\2\2\2\u01ec\u01e8\3")
        buf.write("\2\2\2\u01ed\u0206\3\2\2\2\u01ee\u01ef\7\u0085\2\2\u01ef")
        buf.write("\u01f1\5\u00aeX\2\u01f0\u01f2\7\u01b1\2\2\u01f1\u01f0")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u0206\3\2\2\2\u01f3")
        buf.write("\u01f4\7\u0089\2\2\u01f4\u01f5\7\u01ae\2\2\u01f5\u01f6")
        buf.write("\t\5\2\2\u01f6\u01f7\7\u01b0\2\2\u01f7\u01f8\5\u00acW")
        buf.write("\2\u01f8\u01f9\7\u01b0\2\2\u01f9\u01fe\5\u00acW\2\u01fa")
        buf.write("\u01fb\7\u01b0\2\2\u01fb\u01fd\5\u00acW\2\u01fc\u01fa")
        buf.write("\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe\u01fc\3\2\2\2\u01fe")
        buf.write("\u01ff\3\2\2\2\u01ff\u0201\3\2\2\2\u0200\u01fe\3\2\2\2")
        buf.write("\u0201\u0203\7\u01af\2\2\u0202\u0204\7\u01b1\2\2\u0203")
        buf.write("\u0202\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0206\3\2\2\2")
        buf.write("\u0205\u0188\3\2\2\2\u0205\u0193\3\2\2\2\u0205\u0197\3")
        buf.write("\2\2\2\u0205\u019b\3\2\2\2\u0205\u01a0\3\2\2\2\u0205\u01a5")
        buf.write("\3\2\2\2\u0205\u01af\3\2\2\2\u0205\u01b6\3\2\2\2\u0205")
        buf.write("\u01c1\3\2\2\2\u0205\u01db\3\2\2\2\u0205\u01e1\3\2\2\2")
        buf.write("\u0205\u01ee\3\2\2\2\u0205\u01f3\3\2\2\2\u0206\17\3\2")
        buf.write("\2\2\u0207\u020f\5z>\2\u0208\u020f\5|?\2\u0209\u020f\5")
        buf.write("~@\2\u020a\u020f\5\u0084C\2\u020b\u020f\5\u0088E\2\u020c")
        buf.write("\u020f\5\u008aF\2\u020d\u020f\5\u008eH\2\u020e\u0207\3")
        buf.write("\2\2\2\u020e\u0208\3\2\2\2\u020e\u0209\3\2\2\2\u020e\u020a")
        buf.write("\3\2\2\2\u020e\u020b\3\2\2\2\u020e\u020c\3\2\2\2\u020e")
        buf.write("\u020d\3\2\2\2\u020f\21\3\2\2\2\u0210\u0212\5\u00b4[\2")
        buf.write("\u0211\u0210\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\3")
        buf.write("\2\2\2\u0213\u021b\7\63\2\2\u0214\u0215\7\u00ac\2\2\u0215")
        buf.write("\u0216\7\u01ae\2\2\u0216\u0217\5\u00aeX\2\u0217\u0219")
        buf.write("\7\u01af\2\2\u0218\u021a\7\u0080\2\2\u0219\u0218\3\2\2")
        buf.write("\2\u0219\u021a\3\2\2\2\u021a\u021c\3\2\2\2\u021b\u0214")
        buf.write("\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021e\3\2\2\2\u021d")
        buf.write("\u021f\7N\2\2\u021e\u021d\3\2\2\2\u021e\u021f\3\2\2\2")
        buf.write("\u021f\u0220\3\2\2\2\u0220\u0222\5\24\13\2\u0221\u0223")
        buf.write("\5\u00fe\u0080\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2\2")
        buf.write("\2\u0223\u0225\3\2\2\2\u0224\u0226\5\36\20\2\u0225\u0224")
        buf.write("\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0229\3\2\2\2\u0227")
        buf.write("\u0228\7N\2\2\u0228\u022a\5\u00dep\2\u0229\u0227\3\2\2")
        buf.write("\2\u0229\u022a\3\2\2\2\u022a\u0238\3\2\2\2\u022b\u0236")
        buf.write("\7\u00bf\2\2\u022c\u0237\5\u00bc_\2\u022d\u022e\7(\2\2")
        buf.write("\u022e\u0234\7q\2\2\u022f\u0231\7\u010e\2\2\u0230\u022f")
        buf.write("\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("\u0235\5\u0136\u009c\2\u0233\u0235\7\u0196\2\2\u0234\u0230")
        buf.write("\3\2\2\2\u0234\u0233\3\2\2\2\u0235\u0237\3\2\2\2\u0236")
        buf.write("\u022c\3\2\2\2\u0236\u022d\3\2\2\2\u0237\u0239\3\2\2\2")
        buf.write("\u0238\u022b\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023b\3")
        buf.write("\2\2\2\u023a\u023c\5\u00ccg\2\u023b\u023a\3\2\2\2\u023b")
        buf.write("\u023c\3\2\2\2\u023c\u023e\3\2\2\2\u023d\u023f\5\u00d4")
        buf.write("k\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0241")
        buf.write("\3\2\2\2\u0240\u0242\7\u01b1\2\2\u0241\u0240\3\2\2\2\u0241")
        buf.write("\u0242\3\2\2\2\u0242\23\3\2\2\2\u0243\u0248\5\u00fa~\2")
        buf.write("\u0244\u0248\5\u0130\u0099\2\u0245\u0248\5t;\2\u0246\u0248")
        buf.write("\7\u0196\2\2\u0247\u0243\3\2\2\2\u0247\u0244\3\2\2\2\u0247")
        buf.write("\u0245\3\2\2\2\u0247\u0246\3\2\2\2\u0248\25\3\2\2\2\u0249")
        buf.write("\u024b\5\u00b4[\2\u024a\u0249\3\2\2\2\u024a\u024b\3\2")
        buf.write("\2\2\u024b\u024c\3\2\2\2\u024c\u0254\7\\\2\2\u024d\u024e")
        buf.write("\7\u00ac\2\2\u024e\u024f\7\u01ae\2\2\u024f\u0250\5\u00ae")
        buf.write("X\2\u0250\u0252\7\u01af\2\2\u0251\u0253\7\u0080\2\2\u0252")
        buf.write("\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0255\3\2\2\2")
        buf.write("\u0254\u024d\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0257\3")
        buf.write("\2\2\2\u0256\u0258\7_\2\2\u0257\u0256\3\2\2\2\u0257\u0258")
        buf.write("\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u025c\5\u0130\u0099")
        buf.write("\2\u025a\u025c\5t;\2\u025b\u0259\3\2\2\2\u025b\u025a\3")
        buf.write("\2\2\2\u025c\u025e\3\2\2\2\u025d\u025f\5\u00fe\u0080\2")
        buf.write("\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0264\3")
        buf.write("\2\2\2\u0260\u0261\7\u01ae\2\2\u0261\u0262\5\u0134\u009b")
        buf.write("\2\u0262\u0263\7\u01af\2\2\u0263\u0265\3\2\2\2\u0264\u0260")
        buf.write("\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0267\3\2\2\2\u0266")
        buf.write("\u0268\5\36\20\2\u0267\u0266\3\2\2\2\u0267\u0268\3\2\2")
        buf.write("\2\u0268\u0269\3\2\2\2\u0269\u026b\5\30\r\2\u026a\u026c")
        buf.write("\5\u00ccg\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c")
        buf.write("\u026e\3\2\2\2\u026d\u026f\5\u00d4k\2\u026e\u026d\3\2")
        buf.write("\2\2\u026e\u026f\3\2\2\2\u026f\u0271\3\2\2\2\u0270\u0272")
        buf.write("\7\u01b1\2\2\u0271\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\27\3\2\2\2\u0273\u0279\5\u0108\u0085\2\u0274\u0279\5")
        buf.write("\u00f0y\2\u0275\u0279\5~@\2\u0276\u0277\7\62\2\2\u0277")
        buf.write("\u0279\7\u00ba\2\2\u0278\u0273\3\2\2\2\u0278\u0274\3\2")
        buf.write("\2\2\u0278\u0275\3\2\2\2\u0278\u0276\3\2\2\2\u0279\31")
        buf.write("\3\2\2\2\u027a\u027c\5\u00b4[\2\u027b\u027a\3\2\2\2\u027b")
        buf.write("\u027c\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027f\5\u00c4")
        buf.write("c\2\u027e\u0280\5\u00caf\2\u027f\u027e\3\2\2\2\u027f\u0280")
        buf.write("\3\2\2\2\u0280\u0282\3\2\2\2\u0281\u0283\5\u00ccg\2\u0282")
        buf.write("\u0281\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0285\3\2\2\2")
        buf.write("\u0284\u0286\5\u00d4k\2\u0285\u0284\3\2\2\2\u0285\u0286")
        buf.write("\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u0289\7\u01b1\2\2\u0288")
        buf.write("\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289\33\3\2\2\2\u028a")
        buf.write("\u028c\5\u00b4[\2\u028b\u028a\3\2\2\2\u028b\u028c\3\2")
        buf.write("\2\2\u028c\u028d\3\2\2\2\u028d\u0295\7\u00b6\2\2\u028e")
        buf.write("\u028f\7\u00ac\2\2\u028f\u0290\7\u01ae\2\2\u0290\u0291")
        buf.write("\5\u00aeX\2\u0291\u0293\7\u01af\2\2\u0292\u0294\7\u0080")
        buf.write("\2\2\u0293\u0292\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0296")
        buf.write("\3\2\2\2\u0295\u028e\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u0299\3\2\2\2\u0297\u029a\5\u0130\u0099\2\u0298\u029a")
        buf.write("\5t;\2\u0299\u0297\3\2\2\2\u0299\u0298\3\2\2\2\u029a\u029c")
        buf.write("\3\2\2\2\u029b\u029d\5\u00fc\177\2\u029c\u029b\3\2\2\2")
        buf.write("\u029c\u029d\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029f\7")
        buf.write("\u00a1\2\2\u029f\u02a4\5\u00b8]\2\u02a0\u02a1\7\u01b0")
        buf.write("\2\2\u02a1\u02a3\5\u00b8]\2\u02a2\u02a0\3\2\2\2\u02a3")
        buf.write("\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2")
        buf.write("\u02a5\u02a8\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a9\5")
        buf.write("\36\20\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9")
        buf.write("\u02ac\3\2\2\2\u02aa\u02ab\7N\2\2\u02ab\u02ad\5\u00de")
        buf.write("p\2\u02ac\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02bb")
        buf.write("\3\2\2\2\u02ae\u02b9\7\u00bf\2\2\u02af\u02ba\5\u00ba^")
        buf.write("\2\u02b0\u02b1\7(\2\2\u02b1\u02b7\7q\2\2\u02b2\u02b4\7")
        buf.write("\u010e\2\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4")
        buf.write("\u02b5\3\2\2\2\u02b5\u02b8\5\u0136\u009c\2\u02b6\u02b8")
        buf.write("\7\u0196\2\2\u02b7\u02b3\3\2\2\2\u02b7\u02b6\3\2\2\2\u02b8")
        buf.write("\u02ba\3\2\2\2\u02b9\u02af\3\2\2\2\u02b9\u02b0\3\2\2\2")
        buf.write("\u02ba\u02bc\3\2\2\2\u02bb\u02ae\3\2\2\2\u02bb\u02bc\3")
        buf.write("\2\2\2\u02bc\u02be\3\2\2\2\u02bd\u02bf\5\u00ccg\2\u02be")
        buf.write("\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3\2\2\2")
        buf.write("\u02c0\u02c2\5\u00d4k\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02c4\3\2\2\2\u02c3\u02c5\7\u01b1\2\2\u02c4")
        buf.write("\u02c3\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\35\3\2\2\2\u02c6")
        buf.write("\u02c7\7\u0147\2\2\u02c7\u02cc\5 \21\2\u02c8\u02c9\7\u01b0")
        buf.write("\2\2\u02c9\u02cb\5 \21\2\u02ca\u02c8\3\2\2\2\u02cb\u02ce")
        buf.write("\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02da\3\2\2\2\u02ce\u02cc\3\2\2\2\u02cf\u02d2\7_\2\2")
        buf.write("\u02d0\u02d3\7\u0196\2\2\u02d1\u02d3\5\u012a\u0096\2\u02d2")
        buf.write("\u02d0\3\2\2\2\u02d2\u02d1\3\2\2\2\u02d3\u02d8\3\2\2\2")
        buf.write("\u02d4\u02d5\7\u01ae\2\2\u02d5\u02d6\5\u0134\u009b\2\u02d6")
        buf.write("\u02d7\7\u01af\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02d4\3\2")
        buf.write("\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02db\3\2\2\2\u02da\u02cf")
        buf.write("\3\2\2\2\u02da\u02db\3\2\2\2\u02db\37\3\2\2\2\u02dc\u02df")
        buf.write("\5\"\22\2\u02dd\u02df\5\u00aeX\2\u02de\u02dc\3\2\2\2\u02de")
        buf.write("\u02dd\3\2\2\2\u02df\u02e4\3\2\2\2\u02e0\u02e2\7\t\2\2")
        buf.write("\u02e1\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3\3")
        buf.write("\2\2\2\u02e3\u02e5\5\u0106\u0084\2\u02e4\u02e1\3\2\2\2")
        buf.write("\u02e4\u02e5\3\2\2\2\u02e5!\3\2\2\2\u02e6\u02ea\7\u00f6")
        buf.write("\2\2\u02e7\u02ea\7\u011b\2\2\u02e8\u02ea\5\u012a\u0096")
        buf.write("\2\u02e9\u02e6\3\2\2\2\u02e9\u02e7\3\2\2\2\u02e9\u02e8")
        buf.write("\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ee\7\u01a9\2\2\u02ec")
        buf.write("\u02ef\7\u01b3\2\2\u02ed\u02ef\5\u0148\u00a5\2\u02ee\u02ec")
        buf.write("\3\2\2\2\u02ee\u02ed\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0")
        buf.write("\u02f2\7\u0190\2\2\u02f1\u02e9\3\2\2\2\u02f1\u02f0\3\2")
        buf.write("\2\2\u02f2#\3\2\2\2\u02f3\u02f4\7&\2\2\u02f4\u02f5\7.")
        buf.write("\2\2\u02f5\u02f9\5\u0148\u00a5\2\u02f6\u02f7\7!\2\2\u02f7")
        buf.write("\u02f8\7\u019d\2\2\u02f8\u02fa\t\6\2\2\u02f9\u02f6\3\2")
        buf.write("\2\2\u02f9\u02fa\3\2\2\2\u02fa\u0307\3\2\2\2\u02fb\u02fd")
        buf.write("\7t\2\2\u02fc\u02fe\7\u0084\2\2\u02fd\u02fc\3\2\2\2\u02fd")
        buf.write("\u02fe\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0304\5\u0122")
        buf.write("\u0092\2\u0300\u0301\7\u01b0\2\2\u0301\u0303\5\u0122\u0092")
        buf.write("\2\u0302\u0300\3\2\2\2\u0303\u0306\3\2\2\2\u0304\u0302")
        buf.write("\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0308\3\2\2\2\u0306")
        buf.write("\u0304\3\2\2\2\u0307\u02fb\3\2\2\2\u0307\u0308\3\2\2\2")
        buf.write("\u0308\u0313\3\2\2\2\u0309\u030a\7h\2\2\u030a\u030b\7")
        buf.write("t\2\2\u030b\u0310\5\u0122\u0092\2\u030c\u030d\7\u01b0")
        buf.write("\2\2\u030d\u030f\5\u0122\u0092\2\u030e\u030c\3\2\2\2\u030f")
        buf.write("\u0312\3\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2")
        buf.write("\u0311\u0314\3\2\2\2\u0312\u0310\3\2\2\2\u0313\u0309\3")
        buf.write("\2\2\2\u0313\u0314\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0316")
        buf.write("\7\34\2\2\u0316\u0318\5\u0148\u00a5\2\u0317\u0315\3\2")
        buf.write("\2\2\u0317\u0318\3\2\2\2\u0318\u0322\3\2\2\2\u0319\u031a")
        buf.write("\7\u00c1\2\2\u031a\u031f\5\u011e\u0090\2\u031b\u031c\7")
        buf.write("\u01b0\2\2\u031c\u031e\5\u011e\u0090\2\u031d\u031b\3\2")
        buf.write("\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3\2\2\2\u031f\u0320")
        buf.write("\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2\u0322")
        buf.write("\u0319\3\2\2\2\u0322\u0323\3\2\2\2\u0323%\3\2\2\2\u0324")
        buf.write("\u0326\7&\2\2\u0325\u0327\7\u00b4\2\2\u0326\u0325\3\2")
        buf.write("\2\2\u0326\u0327\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u032a")
        buf.write("\5\u013a\u009e\2\u0329\u0328\3\2\2\2\u0329\u032a\3\2\2")
        buf.write("\2\u032a\u032b\3\2\2\2\u032b\u032c\7Z\2\2\u032c\u032d")
        buf.write("\5\u0148\u00a5\2\u032d\u032e\7t\2\2\u032e\u032f\5\u00ea")
        buf.write("v\2\u032f\u0330\7\u01ae\2\2\u0330\u0332\5\u0134\u009b")
        buf.write("\2\u0331\u0333\t\7\2\2\u0332\u0331\3\2\2\2\u0332\u0333")
        buf.write("\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336\7\u01af\2\2\u0335")
        buf.write("\u0337\5\u00a0Q\2\u0336\u0335\3\2\2\2\u0336\u0337\3\2")
        buf.write("\2\2\u0337\u033a\3\2\2\2\u0338\u0339\7t\2\2\u0339\u033b")
        buf.write("\5\u0148\u00a5\2\u033a\u0338\3\2\2\2\u033a\u033b\3\2\2")
        buf.write("\2\u033b\u033d\3\2\2\2\u033c\u033e\7\u01b1\2\2\u033d\u033c")
        buf.write("\3\2\2\2\u033d\u033e\3\2\2\2\u033e\'\3\2\2\2\u033f\u0340")
        buf.write("\7&\2\2\u0340\u0341\7\u00af\2\2\u0341\u0342\5\u012c\u0097")
        buf.write("\2\u0342\u0343\7t\2\2\u0343\u0349\5\u012a\u0096\2\u0344")
        buf.write("\u0347\7\u00c1\2\2\u0345\u0348\7\u00ff\2\2\u0346\u0348")
        buf.write("\5\u0090I\2\u0347\u0345\3\2\2\2\u0347\u0346\3\2\2\2\u0348")
        buf.write("\u034a\3\2\2\2\u0349\u0344\3\2\2\2\u0349\u034a\3\2\2\2")
        buf.write("\u034a\u034f\3\2\2\2\u034b\u0350\7I\2\2\u034c\u0350\7")
        buf.write("\u00c5\2\2\u034d\u034e\7]\2\2\u034e\u0350\7q\2\2\u034f")
        buf.write("\u034b\3\2\2\2\u034f\u034c\3\2\2\2\u034f\u034d\3\2\2\2")
        buf.write("\u0350\u0351\3\2\2\2\u0351\u0354\t\b\2\2\u0352\u0353\7")
        buf.write("\u00c1\2\2\u0353\u0355\7\u00cc\2\2\u0354\u0352\3\2\2\2")
        buf.write("\u0354\u0355\3\2\2\2\u0355\u0359\3\2\2\2\u0356\u0357\7")
        buf.write("n\2\2\u0357\u0358\7I\2\2\u0358\u035a\7\u008e\2\2\u0359")
        buf.write("\u0356\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035b\3\2\2\2")
        buf.write("\u035b\u0362\7\t\2\2\u035c\u0363\5\6\4\2\u035d\u035e\7")
        buf.write("D\2\2\u035e\u035f\7\u0134\2\2\u035f\u0360\5\u0148\u00a5")
        buf.write("\2\u0360\u0361\7\u01b1\2\2\u0361\u0363\3\2\2\2\u0362\u035c")
        buf.write("\3\2\2\2\u0362\u035d\3\2\2\2\u0363)\3\2\2\2\u0364\u0365")
        buf.write("\7&\2\2\u0365\u0366\t\t\2\2\u0366\u0369\5\u012e\u0098")
        buf.write("\2\u0367\u0368\7\u01b1\2\2\u0368\u036a\7\u0197\2\2\u0369")
        buf.write("\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0379\3\2\2\2")
        buf.write("\u036b\u036d\7\u01ae\2\2\u036c\u036b\3\2\2\2\u036c\u036d")
        buf.write("\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u0373\5,\27\2\u036f")
        buf.write("\u0370\7\u01b0\2\2\u0370\u0372\5,\27\2\u0371\u036f\3\2")
        buf.write("\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374")
        buf.write("\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0376")
        buf.write("\u0378\7\u01af\2\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2")
        buf.write("\2\2\u0378\u037a\3\2\2\2\u0379\u036c\3\2\2\2\u0379\u037a")
        buf.write("\3\2\2\2\u037a\u0384\3\2\2\2\u037b\u037c\7\u00c1\2\2\u037c")
        buf.write("\u0381\5.\30\2\u037d\u037e\7\u01b0\2\2\u037e\u0380\5.")
        buf.write("\30\2\u037f\u037d\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0385\3\2\2\2\u0383")
        buf.write("\u0381\3\2\2\2\u0384\u037b\3\2\2\2\u0384\u0385\3\2\2\2")
        buf.write("\u0385\u0388\3\2\2\2\u0386\u0387\7I\2\2\u0387\u0389\7")
        buf.write("\u008e\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u038a\3\2\2\2\u038a\u038b\7\t\2\2\u038b\u038c\5\6\4\2")
        buf.write("\u038c+\3\2\2\2\u038d\u0391\7\u0196\2\2\u038e\u038f\5")
        buf.write("\u0148\u00a5\2\u038f\u0390\7\u01a9\2\2\u0390\u0392\3\2")
        buf.write("\2\2\u0391\u038e\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0394")
        buf.write("\3\2\2\2\u0393\u0395\7\t\2\2\u0394\u0393\3\2\2\2\u0394")
        buf.write("\u0395\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\5\u0140")
        buf.write("\u00a1\2\u0397\u0399\7\u00bb\2\2\u0398\u0397\3\2\2\2\u0398")
        buf.write("\u0399\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u039b\7\u019d")
        buf.write("\2\2\u039b\u039d\5\u0142\u00a2\2\u039c\u039a\3\2\2\2\u039c")
        buf.write("\u039d\3\2\2\2\u039d\u039f\3\2\2\2\u039e\u03a0\t\n\2\2")
        buf.write("\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0-\3\2\2")
        buf.write("\2\u03a1\u03a5\7\u00ff\2\2\u03a2\u03a5\7\u0157\2\2\u03a3")
        buf.write("\u03a5\5\u0090I\2\u03a4\u03a1\3\2\2\2\u03a4\u03a2\3\2")
        buf.write("\2\2\u03a4\u03a3\3\2\2\2\u03a5/\3\2\2\2\u03a6\u03a7\7")
        buf.write("&\2\2\u03a7\u03a8\7\u00a5\2\2\u03a8\u03a9\5\u0148\u00a5")
        buf.write("\2\u03a9\u03aa\7t\2\2\u03aa\u03ab\5\u00eav\2\u03ab\u03ac")
        buf.write("\7\u01ae\2\2\u03ac\u03ad\5\u0134\u009b\2\u03ad\u03c0\7")
        buf.write("\u01af\2\2\u03ae\u03b4\7\u00c1\2\2\u03af\u03b5\7\u010c")
        buf.write("\2\2\u03b0\u03b1\7\u0164\2\2\u03b1\u03b2\7\u0197\2\2\u03b2")
        buf.write("\u03b5\t\13\2\2\u03b3\u03b5\7\u0172\2\2\u03b4\u03af\3")
        buf.write("\2\2\2\u03b4\u03b0\3\2\2\2\u03b4\u03b3\3\2\2\2\u03b5\u03b8")
        buf.write("\3\2\2\2\u03b6\u03b7\7\u01b0\2\2\u03b7\u03b9\7\u013b\2")
        buf.write("\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03be")
        buf.write("\3\2\2\2\u03ba\u03bb\7\u01b0\2\2\u03bb\u03bc\7\u0119\2")
        buf.write("\2\u03bc\u03bd\7\u019d\2\2\u03bd\u03bf\5\u0138\u009d\2")
        buf.write("\u03be\u03ba\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c1\3")
        buf.write("\2\2\2\u03c0\u03ae\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c3")
        buf.write("\3\2\2\2\u03c2\u03c4\7\u01b1\2\2\u03c3\u03c2\3\2\2\2\u03c3")
        buf.write("\u03c4\3\2\2\2\u03c4\61\3\2\2\2\u03c5\u03c6\7&\2\2\u03c6")
        buf.write("\u03c7\7\u00a7\2\2\u03c7\u03c8\5\u012a\u0096\2\u03c8\u03c9")
        buf.write("\7\u01ae\2\2\u03c9\u03cb\5\u0096L\2\u03ca\u03cc\7\u01b0")
        buf.write("\2\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u03d1\7\u01af\2\2\u03ce\u03cf\7t\2\2\u03cf")
        buf.write("\u03d2\5\u0148\u00a5\2\u03d0\u03d2\7\62\2\2\u03d1\u03ce")
        buf.write("\3\2\2\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2")
        buf.write("\u03d6\3\2\2\2\u03d3\u03d4\7\u0179\2\2\u03d4\u03d7\5\u0148")
        buf.write("\u00a5\2\u03d5\u03d7\7\62\2\2\u03d6\u03d3\3\2\2\2\u03d6")
        buf.write("\u03d5\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d9\3\2\2\2")
        buf.write("\u03d8\u03da\7\u01b1\2\2\u03d9\u03d8\3\2\2\2\u03d9\u03da")
        buf.write("\3\2\2\2\u03da\63\3\2\2\2\u03db\u03dc\7&\2\2\u03dc\u03dd")
        buf.write("\7\u00bc\2\2\u03dd\u03e2\5\u012c\u0097\2\u03de\u03df\7")
        buf.write("\u01ae\2\2\u03df\u03e0\5\u0134\u009b\2\u03e0\u03e1\7\u01af")
        buf.write("\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03de\3\2\2\2\u03e2\u03e3")
        buf.write("\3\2\2\2\u03e3\u03ed\3\2\2\2\u03e4\u03e5\7\u00c1\2\2\u03e5")
        buf.write("\u03ea\5\66\34\2\u03e6\u03e7\7\u01b0\2\2\u03e7\u03e9\5")
        buf.write("\66\34\2\u03e8\u03e6\3\2\2\2\u03e9\u03ec\3\2\2\2\u03ea")
        buf.write("\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ee\3\2\2\2")
        buf.write("\u03ec\u03ea\3\2\2\2\u03ed\u03e4\3\2\2\2\u03ed\u03ee\3")
        buf.write("\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\7\t\2\2\u03f0\u03f4")
        buf.write("\5\32\16\2\u03f1\u03f2\7\u00c1\2\2\u03f2\u03f3\7\27\2")
        buf.write("\2\u03f3\u03f5\7z\2\2\u03f4\u03f1\3\2\2\2\u03f4\u03f5")
        buf.write("\3\2\2\2\u03f5\u03f7\3\2\2\2\u03f6\u03f8\7\u01b1\2\2\u03f7")
        buf.write("\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\65\3\2\2\2\u03f9")
        buf.write("\u03fa\t\f\2\2\u03fa\67\3\2\2\2\u03fb\u03fc\7\6\2\2\u03fc")
        buf.write("\u03fd\7\u00a7\2\2\u03fd\u041c\5\u012a\u0096\2\u03fe\u03ff")
        buf.write("\7\u00a1\2\2\u03ff\u0400\7\u01ae\2\2\u0400\u0401\7\u0124")
        buf.write("\2\2\u0401\u0402\7\u019d\2\2\u0402\u0403\t\r\2\2\u0403")
        buf.write("\u041d\7\u01af\2\2\u0404\u0405\7\4\2\2\u0405\u041d\5\u0098")
        buf.write("M\2\u0406\u0407\7:\2\2\u0407\u0408\7 \2\2\u0408\u041d")
        buf.write("\5\u0148\u00a5\2\u0409\u040a\7\u00c1\2\2\u040a\u040b\7")
        buf.write("\27\2\2\u040b\u040c\7\4\2\2\u040c\u040d\7 \2\2\u040d\u040e")
        buf.write("\5\u0148\u00a5\2\u040e\u040f\7K\2\2\u040f\u0410\7b\2\2")
        buf.write("\u0410\u0411\7\u01ae\2\2\u0411\u0412\5\u0134\u009b\2\u0412")
        buf.write("\u0413\7\u01af\2\2\u0413\u0414\7\u008d\2\2\u0414\u0415")
        buf.write("\5\u012a\u0096\2\u0415\u0416\7\u01ae\2\2\u0416\u0417\5")
        buf.write("\u0134\u009b\2\u0417\u0418\7\u01af\2\2\u0418\u041d\3\2")
        buf.write("\2\2\u0419\u041a\7\27\2\2\u041a\u041b\7 \2\2\u041b\u041d")
        buf.write("\5\u0148\u00a5\2\u041c\u03fe\3\2\2\2\u041c\u0404\3\2\2")
        buf.write("\2\u041c\u0406\3\2\2\2\u041c\u0409\3\2\2\2\u041c\u0419")
        buf.write("\3\2\2\2\u041d\u041f\3\2\2\2\u041e\u0420\7\u01b1\2\2\u041f")
        buf.write("\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u04209\3\2\2\2\u0421")
        buf.write("\u0422\7\6\2\2\u0422\u0425\7.\2\2\u0423\u0426\5\u0148")
        buf.write("\u00a5\2\u0424\u0426\7(\2\2\u0425\u0423\3\2\2\2\u0425")
        buf.write("\u0424\3\2\2\2\u0426\u0433\3\2\2\2\u0427\u0428\7\u0132")
        buf.write("\2\2\u0428\u0429\7\u0134\2\2\u0429\u042a\7\u019d\2\2\u042a")
        buf.write("\u0434\5\u0148\u00a5\2\u042b\u042c\7\34\2\2\u042c\u0434")
        buf.write("\5\u0148\u00a5\2\u042d\u042e\7\u00a1\2\2\u042e\u0431\5")
        buf.write("<\37\2\u042f\u0430\7\u00c1\2\2\u0430\u0432\5d\63\2\u0431")
        buf.write("\u042f\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0434\3\2\2\2")
        buf.write("\u0433\u0427\3\2\2\2\u0433\u042b\3\2\2\2\u0433\u042d\3")
        buf.write("\2\2\2\u0434\u0436\3\2\2\2\u0435\u0437\7\u01b1\2\2\u0436")
        buf.write("\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437;\3\2\2\2\u0438")
        buf.write("\u044f\5> \2\u0439\u044f\5@!\2\u043a\u044f\5D#\2\u043b")
        buf.write("\u044f\5F$\2\u043c\u044f\5H%\2\u043d\u044f\5J&\2\u043e")
        buf.write("\u044f\5L\'\2\u043f\u044f\5N(\2\u0440\u044f\5P)\2\u0441")
        buf.write("\u044f\5R*\2\u0442\u044f\5T+\2\u0443\u0444\7\u0106\2\2")
        buf.write("\u0444\u044f\5\u0120\u0091\2\u0445\u044f\7\3\2\2\u0446")
        buf.write("\u044f\5V,\2\u0447\u044f\5X-\2\u0448\u044f\5Z.\2\u0449")
        buf.write("\u044f\5\\/\2\u044a\u044f\5^\60\2\u044b\u044f\5`\61\2")
        buf.write("\u044c\u044f\5b\62\2\u044d\u044f\5d\63\2\u044e\u0438\3")
        buf.write("\2\2\2\u044e\u0439\3\2\2\2\u044e\u043a\3\2\2\2\u044e\u043b")
        buf.write("\3\2\2\2\u044e\u043c\3\2\2\2\u044e\u043d\3\2\2\2\u044e")
        buf.write("\u043e\3\2\2\2\u044e\u043f\3\2\2\2\u044e\u0440\3\2\2\2")
        buf.write("\u044e\u0441\3\2\2\2\u044e\u0442\3\2\2\2\u044e\u0443\3")
        buf.write("\2\2\2\u044e\u0445\3\2\2\2\u044e\u0446\3\2\2\2\u044e\u0447")
        buf.write("\3\2\2\2\u044e\u0448\3\2\2\2\u044e\u0449\3\2\2\2\u044e")
        buf.write("\u044a\3\2\2\2\u044e\u044b\3\2\2\2\u044e\u044c\3\2\2\2")
        buf.write("\u044e\u044d\3\2\2\2\u044f=\3\2\2\2\u0450\u0451\7\u00d1")
        buf.write("\2\2\u0451\u0462\5\u0138\u009d\2\u0452\u0453\7\u00d2\2")
        buf.write("\2\u0453\u0462\7r\2\2\u0454\u0459\7t\2\2\u0455\u0456\7")
        buf.write("\u0119\2\2\u0456\u0457\7\u019d\2\2\u0457\u045a\7t\2\2")
        buf.write("\u0458\u045a\7r\2\2\u0459\u0455\3\2\2\2\u0459\u0458\3")
        buf.write("\2\2\2\u045a\u0462\3\2\2\2\u045b\u045c\7\u00d3\2\2\u045c")
        buf.write("\u0462\5\u0138\u009d\2\u045d\u045e\7\u00d4\2\2\u045e\u0462")
        buf.write("\5\u0138\u009d\2\u045f\u0460\7\u00d5\2\2\u0460\u0462\t")
        buf.write("\16\2\2\u0461\u0450\3\2\2\2\u0461\u0452\3\2\2\2\u0461")
        buf.write("\u0454\3\2\2\2\u0461\u045b\3\2\2\2\u0461\u045d\3\2\2\2")
        buf.write("\u0461\u045f\3\2\2\2\u0462?\3\2\2\2\u0463\u0464\7\u00de")
        buf.write("\2\2\u0464\u0474\7\u019d\2\2\u0465\u0475\7r\2\2\u0466")
        buf.write("\u0471\7t\2\2\u0467\u046c\5B\"\2\u0468\u0469\7\u01b0\2")
        buf.write("\2\u0469\u046b\5B\"\2\u046a\u0468\3\2\2\2\u046b\u046e")
        buf.write("\3\2\2\2\u046c\u046a\3\2\2\2\u046c\u046d\3\2\2\2\u046d")
        buf.write("\u0470\3\2\2\2\u046e\u046c\3\2\2\2\u046f\u0467\3\2\2\2")
        buf.write("\u0470\u0473\3\2\2\2\u0471\u046f\3\2\2\2\u0471\u0472\3")
        buf.write("\2\2\2\u0472\u0475\3\2\2\2\u0473\u0471\3\2\2\2\u0474\u0465")
        buf.write("\3\2\2\2\u0474\u0466\3\2\2\2\u0475A\3\2\2\2\u0476\u0477")
        buf.write("\7\u00d0\2\2\u0477\u0478\7\u019d\2\2\u0478\u047d\5\u0138")
        buf.write("\u009d\2\u0479\u047a\7\u00dd\2\2\u047a\u047b\7\u019d\2")
        buf.write("\2\u047b\u047d\t\17\2\2\u047c\u0476\3\2\2\2\u047c\u0479")
        buf.write("\3\2\2\2\u047dC\3\2\2\2\u047e\u047f\7!\2\2\u047f\u0480")
        buf.write("\7\u019d\2\2\u0480\u0481\t\6\2\2\u0481E\3\2\2\2\u0482")
        buf.write("\u0483\7\u00e9\2\2\u0483\u0487\5\u0138\u009d\2\u0484\u0485")
        buf.write("\7\u00ea\2\2\u0485\u0487\t\20\2\2\u0486\u0482\3\2\2\2")
        buf.write("\u0486\u0484\3\2\2\2\u0487G\3\2\2\2\u0488\u0489\7\u00ef")
        buf.write("\2\2\u0489\u048a\5\u0138\u009d\2\u048aI\3\2\2\2\u048b")
        buf.write("\u048c\7\u00ff\2\2\u048c\u048d\5\u0138\u009d\2\u048dK")
        buf.write("\3\2\2\2\u048e\u048f\t\21\2\2\u048fM\3\2\2\2\u0490\u0491")
        buf.write("\t\22\2\2\u0491O\3\2\2\2\u0492\u0493\t\23\2\2\u0493Q\3")
        buf.write("\2\2\2\u0494\u0495\7\u00f5\2\2\u0495\u0496\7\u019d\2\2")
        buf.write("\u0496\u0497\t\24\2\2\u0497S\3\2\2\2\u0498\u0499\7\u00f1")
        buf.write("\2\2\u0499\u04b2\5\u0138\u009d\2\u049a\u049b\7\u017f\2")
        buf.write("\2\u049b\u04b2\5\u0138\u009d\2\u049c\u049d\7\u00f3\2\2")
        buf.write("\u049d\u04a0\7\u019d\2\2\u049e\u04a1\5\u0148\u00a5\2\u049f")
        buf.write("\u04a1\7\u0199\2\2\u04a0\u049e\3\2\2\2\u04a0\u049f\3\2")
        buf.write("\2\2\u04a1\u04b2\3\2\2\2\u04a2\u04a3\7\u00f2\2\2\u04a3")
        buf.write("\u04a6\7\u019d\2\2\u04a4\u04a7\5\u0148\u00a5\2\u04a5\u04a7")
        buf.write("\7\u0199\2\2\u04a6\u04a4\3\2\2\2\u04a6\u04a5\3\2\2\2\u04a7")
        buf.write("\u04b2\3\2\2\2\u04a8\u04a9\7\u0135\2\2\u04a9\u04aa\7\u019d")
        buf.write("\2\2\u04aa\u04b2\t\16\2\2\u04ab\u04ac\7\u017e\2\2\u04ac")
        buf.write("\u04ad\7\u019d\2\2\u04ad\u04b2\t\16\2\2\u04ae\u04af\7")
        buf.write("\u0181\2\2\u04af\u04b0\7\u019d\2\2\u04b0\u04b2\7\u0197")
        buf.write("\2\2\u04b1\u0498\3\2\2\2\u04b1\u049a\3\2\2\2\u04b1\u049c")
        buf.write("\3\2\2\2\u04b1\u04a2\3\2\2\2\u04b1\u04a8\3\2\2\2\u04b1")
        buf.write("\u04ab\3\2\2\2\u04b1\u04ae\3\2\2\2\u04b2U\3\2\2\2\u04b3")
        buf.write("\u04b4\7\u0131\2\2\u04b4\u04b5\t\16\2\2\u04b5W\3\2\2\2")
        buf.write("\u04b6\u04b7\7\u014a\2\2\u04b7\u04b8\t\25\2\2\u04b8Y\3")
        buf.write("\2\2\2\u04b9\u04ba\7\u0158\2\2\u04ba\u04c0\t\26\2\2\u04bb")
        buf.write("\u04bc\7\u017d\2\2\u04bc\u04c0\5\u0138\u009d\2\u04bd\u04be")
        buf.write("\7\u0149\2\2\u04be\u04c0\t\27\2\2\u04bf\u04b9\3\2\2\2")
        buf.write("\u04bf\u04bb\3\2\2\2\u04bf\u04bd\3\2\2\2\u04c0[\3\2\2")
        buf.write("\2\u04c1\u04c8\7\u00fe\2\2\u04c2\u04c8\7\u00fb\2\2\u04c3")
        buf.write("\u04c8\7\u0136\2\2\u04c4\u04c8\7\u0100\2\2\u04c5\u04c6")
        buf.write("\7\u0114\2\2\u04c6\u04c8\5\u0138\u009d\2\u04c7\u04c1\3")
        buf.write("\2\2\2\u04c7\u04c2\3\2\2\2\u04c7\u04c3\3\2\2\2\u04c7\u04c4")
        buf.write("\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c8]\3\2\2\2\u04c9\u04ca")
        buf.write("\7\u00c7\2\2\u04ca\u04cf\5\u0138\u009d\2\u04cb\u04cc\7")
        buf.write("\u0154\2\2\u04cc\u04cf\t\16\2\2\u04cd\u04cf\t\16\2\2\u04ce")
        buf.write("\u04c9\3\2\2\2\u04ce\u04cb\3\2\2\2\u04ce\u04cd\3\2\2\2")
        buf.write("\u04cf_\3\2\2\2\u04d0\u04d1\7\u00c9\2\2\u04d1\u04e6\5")
        buf.write("\u0138\u009d\2\u04d2\u04d3\7\u00c8\2\2\u04d3\u04e6\5\u0138")
        buf.write("\u009d\2\u04d4\u04d5\7\u00ca\2\2\u04d5\u04e6\5\u0138\u009d")
        buf.write("\2\u04d6\u04d7\7\u00cb\2\2\u04d7\u04e6\5\u0138\u009d\2")
        buf.write("\u04d8\u04d9\7\u00ce\2\2\u04d9\u04e6\5\u0138\u009d\2\u04da")
        buf.write("\u04db\7\u00e2\2\2\u04db\u04dc\7\u019d\2\2\u04dc\u04e6")
        buf.write("\7\u0197\2\2\u04dd\u04de\7\u00e4\2\2\u04de\u04e6\5\u0138")
        buf.write("\u009d\2\u04df\u04e0\7\u013f\2\2\u04e0\u04e6\5\u0138\u009d")
        buf.write("\2\u04e1\u04e2\7\u0150\2\2\u04e2\u04e6\5\u0138\u009d\2")
        buf.write("\u04e3\u04e4\7\u0159\2\2\u04e4\u04e6\5\u0138\u009d\2\u04e5")
        buf.write("\u04d0\3\2\2\2\u04e5\u04d2\3\2\2\2\u04e5\u04d4\3\2\2\2")
        buf.write("\u04e5\u04d6\3\2\2\2\u04e5\u04d8\3\2\2\2\u04e5\u04da\3")
        buf.write("\2\2\2\u04e5\u04dd\3\2\2\2\u04e5\u04df\3\2\2\2\u04e5\u04e1")
        buf.write("\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e6a\3\2\2\2\u04e7\u04e8")
        buf.write("\7\u0177\2\2\u04e8\u04e9\7\u019d\2\2\u04e9\u04ea\7\u0197")
        buf.write("\2\2\u04ea\u04eb\t\30\2\2\u04ebc\3\2\2\2\u04ec\u04ed\7")
        buf.write("\u0095\2\2\u04ed\u04ee\7\u00c5\2\2\u04ee\u04f3\7\u0197")
        buf.write("\2\2\u04ef\u04f0\7\u0095\2\2\u04f0\u04f3\7\u0117\2\2\u04f1")
        buf.write("\u04f3\7\u013c\2\2\u04f2\u04ec\3\2\2\2\u04f2\u04ef\3\2")
        buf.write("\2\2\u04f2\u04f1\3\2\2\2\u04f3e\3\2\2\2\u04f4\u04f5\7")
        buf.write(":\2\2\u04f5\u04f8\7Z\2\2\u04f6\u04f7\7X\2\2\u04f7\u04f9")
        buf.write("\7B\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9")
        buf.write("\u04fa\3\2\2\2\u04fa\u04fd\5\u0148\u00a5\2\u04fb\u04fc")
        buf.write("\7t\2\2\u04fc\u04fe\5\u012a\u0096\2\u04fd\u04fb\3\2\2")
        buf.write("\2\u04fd\u04fe\3\2\2\2\u04fe\u0500\3\2\2\2\u04ff\u0501")
        buf.write("\7\u01b1\2\2\u0500\u04ff\3\2\2\2\u0500\u0501\3\2\2\2\u0501")
        buf.write("g\3\2\2\2\u0502\u0503\7:\2\2\u0503\u0506\7\u0087\2\2\u0504")
        buf.write("\u0505\7X\2\2\u0505\u0507\7B\2\2\u0506\u0504\3\2\2\2\u0506")
        buf.write("\u0507\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050a\5\u012e")
        buf.write("\u0098\2\u0509\u050b\7\u01b1\2\2\u050a\u0509\3\2\2\2\u050a")
        buf.write("\u050b\3\2\2\2\u050bi\3\2\2\2\u050c\u050d\7:\2\2\u050d")
        buf.write("\u0511\7\u00a5\2\2\u050e\u050f\5\u012a\u0096\2\u050f\u0510")
        buf.write("\7\u01a9\2\2\u0510\u0512\3\2\2\2\u0511\u050e\3\2\2\2\u0511")
        buf.write("\u0512\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\5\u0148")
        buf.write("\u00a5\2\u0514\u0515\7\u01b1\2\2\u0515k\3\2\2\2\u0516")
        buf.write("\u0517\7:\2\2\u0517\u051a\7\u00a7\2\2\u0518\u0519\7X\2")
        buf.write("\2\u0519\u051b\7B\2\2\u051a\u0518\3\2\2\2\u051a\u051b")
        buf.write("\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051e\5\u012a\u0096")
        buf.write("\2\u051d\u051f\7\u01b1\2\2\u051e\u051d\3\2\2\2\u051e\u051f")
        buf.write("\3\2\2\2\u051fm\3\2\2\2\u0520\u0521\7:\2\2\u0521\u0524")
        buf.write("\7\u00bc\2\2\u0522\u0523\7X\2\2\u0523\u0525\7B\2\2\u0524")
        buf.write("\u0522\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526\3\2\2\2")
        buf.write("\u0526\u052b\5\u012c\u0097\2\u0527\u0528\7\u01b0\2\2\u0528")
        buf.write("\u052a\5\u012c\u0097\2\u0529\u0527\3\2\2\2\u052a\u052d")
        buf.write("\3\2\2\2\u052b\u0529\3\2\2\2\u052b\u052c\3\2\2\2\u052c")
        buf.write("\u052f\3\2\2\2\u052d\u052b\3\2\2\2\u052e\u0530\7\u01b1")
        buf.write("\2\2\u052f\u052e\3\2\2\2\u052f\u0530\3\2\2\2\u0530o\3")
        buf.write("\2\2\2\u0531\u0532\7&\2\2\u0532\u0533\7\u0182\2\2\u0533")
        buf.write("\u0534\5\u012c\u0097\2\u0534\u0535\7N\2\2\u0535\u0536")
        buf.write("\5\u0140\u00a1\2\u0536\u0537\5\u0142\u00a2\2\u0537q\3")
        buf.write("\2\2\2\u0538\u0539\7:\2\2\u0539\u053c\7\u0182\2\2\u053a")
        buf.write("\u053b\7X\2\2\u053b\u053d\7B\2\2\u053c\u053a\3\2\2\2\u053c")
        buf.write("\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u053f\5\u012c")
        buf.write("\u0097\2\u053fs\3\2\2\2\u0540\u0543\5v<\2\u0541\u0543")
        buf.write("\5x=\2\u0542\u0540\3\2\2\2\u0542\u0541\3\2\2\2\u0543u")
        buf.write("\3\2\2\2\u0544\u0545\7w\2\2\u0545\u0546\7\u01ae\2\2\u0546")
        buf.write("\u0547\5\u0148\u00a5\2\u0547\u0548\7\u01b0\2\2\u0548\u0549")
        buf.write("\7\u0199\2\2\u0549\u054a\7\u01af\2\2\u054aw\3\2\2\2\u054b")
        buf.write("\u054c\7v\2\2\u054c\u054d\7\u01ae\2\2\u054d\u054e\7\u0199")
        buf.write("\2\2\u054e\u054f\7\u01b0\2\2\u054f\u0550\7\u0199\2\2\u0550")
        buf.write("\u0551\7\u01af\2\2\u0551\u0553\7\u01a9\2\2\u0552\u0554")
        buf.write("\5\u0148\u00a5\2\u0553\u0552\3\2\2\2\u0553\u0554\3\2\2")
        buf.write("\2\u0554\u0555\3\2\2\2\u0555\u0557\7\u01a9\2\2\u0556\u0558")
        buf.write("\5\u0148\u00a5\2\u0557\u0556\3\2\2\2\u0557\u0558\3\2\2")
        buf.write("\2\u0558\u0559\3\2\2\2\u0559\u055a\7\u01a9\2\2\u055a\u055b")
        buf.write("\5\u0148\u00a5\2\u055by\3\2\2\2\u055c\u055d\7\61\2\2\u055d")
        buf.write("\u055f\7\u0196\2\2\u055e\u0560\7\t\2\2\u055f\u055e\3\2")
        buf.write("\2\2\u055f\u0560\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0563")
        buf.write("\5\u0094K\2\u0562\u0564\7\u01b1\2\2\u0563\u0562\3\2\2")
        buf.write("\2\u0563\u0564\3\2\2\2\u0564\u0572\3\2\2\2\u0565\u0566")
        buf.write("\7\61\2\2\u0566\u056b\5\u0092J\2\u0567\u0568\7\u01b0\2")
        buf.write("\2\u0568\u056a\5\u0092J\2\u0569\u0567\3\2\2\2\u056a\u056d")
        buf.write("\3\2\2\2\u056b\u0569\3\2\2\2\u056b\u056c\3\2\2\2\u056c")
        buf.write("\u056f\3\2\2\2\u056d\u056b\3\2\2\2\u056e\u0570\7\u01b1")
        buf.write("\2\2\u056f\u056e\3\2\2\2\u056f\u0570\3\2\2\2\u0570\u0572")
        buf.write("\3\2\2\2\u0571\u055c\3\2\2\2\u0571\u0565\3\2\2\2\u0572")
        buf.write("{\3\2\2\2\u0573\u0575\7\31\2\2\u0574\u0576\7\u010e\2\2")
        buf.write("\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0577\3")
        buf.write("\2\2\2\u0577\u0579\5\u0136\u009c\2\u0578\u057a\7\u01b1")
        buf.write("\2\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u058e")
        buf.write("\3\2\2\2\u057b\u057d\7\60\2\2\u057c\u057e\7\u010e\2\2")
        buf.write("\u057d\u057c\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f\3")
        buf.write("\2\2\2\u057f\u0581\5\u0136\u009c\2\u0580\u0582\7\u01b1")
        buf.write("\2\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u058e")
        buf.write("\3\2\2\2\u0583\u058e\5\u00a4S\2\u0584\u058e\5\u00a8U\2")
        buf.write("\u0585\u0587\7u\2\2\u0586\u0588\7\u010e\2\2\u0587\u0586")
        buf.write("\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u0589\3\2\2\2\u0589")
        buf.write("\u058b\5\u0136\u009c\2\u058a\u058c\7\u01b1\2\2\u058b\u058a")
        buf.write("\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058e\3\2\2\2\u058d")
        buf.write("\u0573\3\2\2\2\u058d\u057b\3\2\2\2\u058d\u0583\3\2\2\2")
        buf.write("\u058d\u0584\3\2\2\2\u058d\u0585\3\2\2\2\u058e}\3\2\2")
        buf.write("\2\u058f\u0592\7A\2\2\u0590\u0591\7\u0196\2\2\u0591\u0593")
        buf.write("\7\u019d\2\2\u0592\u0590\3\2\2\2\u0592\u0593\3\2\2\2\u0593")
        buf.write("\u0594\3\2\2\2\u0594\u059d\5\u012e\u0098\2\u0595\u059a")
        buf.write("\5\u0080A\2\u0596\u0597\7\u01b0\2\2\u0597\u0599\5\u0080")
        buf.write("A\2\u0598\u0596\3\2\2\2\u0599\u059c\3\2\2\2\u059a\u0598")
        buf.write("\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059e\3\2\2\2\u059c")
        buf.write("\u059a\3\2\2\2\u059d\u0595\3\2\2\2\u059d\u059e\3\2\2\2")
        buf.write("\u059e\u05a0\3\2\2\2\u059f\u05a1\7\u01b1\2\2\u05a0\u059f")
        buf.write("\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05b9\3\2\2\2\u05a2")
        buf.write("\u05a3\7A\2\2\u05a3\u05a4\7\u01ae\2\2\u05a4\u05a9\5\u0082")
        buf.write("B\2\u05a5\u05a6\7\u01b6\2\2\u05a6\u05a8\5\u0082B\2\u05a7")
        buf.write("\u05a5\3\2\2\2\u05a8\u05ab\3\2\2\2\u05a9\u05a7\3\2\2\2")
        buf.write("\u05a9\u05aa\3\2\2\2\u05aa\u05ac\3\2\2\2\u05ab\u05a9\3")
        buf.write("\2\2\2\u05ac\u05b3\7\u01af\2\2\u05ad\u05af\7\t\2\2\u05ae")
        buf.write("\u05ad\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b0\3\2\2\2")
        buf.write("\u05b0\u05b1\t\31\2\2\u05b1\u05b2\7\u019d\2\2\u05b2\u05b4")
        buf.write("\7\u0199\2\2\u05b3\u05ae\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4")
        buf.write("\u05b6\3\2\2\2\u05b5\u05b7\7\u01b1\2\2\u05b6\u05b5\3\2")
        buf.write("\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b9\3\2\2\2\u05b8\u058f")
        buf.write("\3\2\2\2\u05b8\u05a2\3\2\2\2\u05b9\177\3\2\2\2\u05ba\u05bb")
        buf.write("\7\u0196\2\2\u05bb\u05bd\7\u019d\2\2\u05bc\u05ba\3\2\2")
        buf.write("\2\u05bc\u05bd\3\2\2\2\u05bd\u05c7\3\2\2\2\u05be\u05c1")
        buf.write("\5\u00acW\2\u05bf\u05c1\5\u0148\u00a5\2\u05c0\u05be\3")
        buf.write("\2\2\2\u05c0\u05bf\3\2\2\2\u05c1\u05c3\3\2\2\2\u05c2\u05c4")
        buf.write("\t\32\2\2\u05c3\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4")
        buf.write("\u05c8\3\2\2\2\u05c5\u05c8\7\62\2\2\u05c6\u05c8\7o\2\2")
        buf.write("\u05c7\u05c0\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c6\3")
        buf.write("\2\2\2\u05c8\u0081\3\2\2\2\u05c9\u05ca\t\3\2\2\u05ca\u0083")
        buf.write("\3\2\2\2\u05cb\u05cd\5\u0090I\2\u05cc\u05ce\7\u01b1\2")
        buf.write("\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05fc")
        buf.write("\3\2\2\2\u05cf\u05db\7R\2\2\u05d0\u05d2\7\5\2\2\u05d1")
        buf.write("\u05d3\7\u014f\2\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2")
        buf.write("\2\2\u05d3\u05dc\3\2\2\2\u05d4\u05d9\5\u0086D\2\u05d5")
        buf.write("\u05d6\7\u01ae\2\2\u05d6\u05d7\5\u0134\u009b\2\u05d7\u05d8")
        buf.write("\7\u01af\2\2\u05d8\u05da\3\2\2\2\u05d9\u05d5\3\2\2\2\u05d9")
        buf.write("\u05da\3\2\2\2\u05da\u05dc\3\2\2\2\u05db\u05d0\3\2\2\2")
        buf.write("\u05db\u05d4\3\2\2\2\u05dc\u05df\3\2\2\2\u05dd\u05de\7")
        buf.write("t\2\2\u05de\u05e0\5\u012a\u0096\2\u05df\u05dd\3\2\2\2")
        buf.write("\u05df\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2\7")
        buf.write("\u00ab\2\2\u05e2\u05e6\5\u0148\u00a5\2\u05e3\u05e4\7\u00c1")
        buf.write("\2\2\u05e4\u05e5\7R\2\2\u05e5\u05e7\7z\2\2\u05e6\u05e3")
        buf.write("\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05ea\3\2\2\2\u05e8")
        buf.write("\u05e9\7\t\2\2\u05e9\u05eb\5\u0148\u00a5\2\u05ea\u05e8")
        buf.write("\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ed\3\2\2\2\u05ec")
        buf.write("\u05ee\7\u01b1\2\2\u05ed\u05ec\3\2\2\2\u05ed\u05ee\3\2")
        buf.write("\2\2\u05ee\u05fc\3\2\2\2\u05ef\u05f6\7\u0092\2\2\u05f0")
        buf.write("\u05f1\7\u01ae\2\2\u05f1\u05f2\7\u00c1\2\2\u05f2\u05f3")
        buf.write("\7\u00e6\2\2\u05f3\u05f4\7\u019d\2\2\u05f4\u05f5\7\u0196")
        buf.write("\2\2\u05f5\u05f7\7\u01af\2\2\u05f6\u05f0\3\2\2\2\u05f6")
        buf.write("\u05f7\3\2\2\2\u05f7\u05f9\3\2\2\2\u05f8\u05fa\7\u01b1")
        buf.write("\2\2\u05f9\u05f8\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc")
        buf.write("\3\2\2\2\u05fb\u05cb\3\2\2\2\u05fb\u05cf\3\2\2\2\u05fb")
        buf.write("\u05ef\3\2\2\2\u05fc\u0085\3\2\2\2\u05fd\u0618\7A\2\2")
        buf.write("\u05fe\u05ff\7\u00bc\2\2\u05ff\u0618\5\u0148\u00a5\2\u0600")
        buf.write("\u0601\7\u0176\2\2\u0601\u0618\5\u0148\u00a5\2\u0602\u0604")
        buf.write("\7\u00e5\2\2\u0603\u0605\5\u0148\u00a5\2\u0604\u0603\3")
        buf.write("\2\2\2\u0604\u0605\3\2\2\2\u0605\u0618\3\2\2\2\u0606\u0607")
        buf.write("\7&\2\2\u0607\u0618\t\33\2\2\u0608\u0618\7\u016b\2\2\u0609")
        buf.write("\u0618\7\u0118\2\2\u060a\u0618\7\u009c\2\2\u060b\u0618")
        buf.write("\7\u008d\2\2\u060c\u0618\7\\\2\2\u060d\u0615\7\6\2\2\u060e")
        buf.write("\u0610\7\b\2\2\u060f\u060e\3\2\2\2\u060f\u0610\3\2\2\2")
        buf.write("\u0610\u0613\3\2\2\2\u0611\u0614\5\u0148\u00a5\2\u0612")
        buf.write("\u0614\7.\2\2\u0613\u0611\3\2\2\2\u0613\u0612\3\2\2\2")
        buf.write("\u0614\u0616\3\2\2\2\u0615\u060f\3\2\2\2\u0615\u0616\3")
        buf.write("\2\2\2\u0616\u0618\3\2\2\2\u0617\u05fd\3\2\2\2\u0617\u05fe")
        buf.write("\3\2\2\2\u0617\u0600\3\2\2\2\u0617\u0602\3\2\2\2\u0617")
        buf.write("\u0606\3\2\2\2\u0617\u0608\3\2\2\2\u0617\u0609\3\2\2\2")
        buf.write("\u0617\u060a\3\2\2\2\u0617\u060b\3\2\2\2\u0617\u060c\3")
        buf.write("\2\2\2\u0617\u060d\3\2\2\2\u0618\u0087\3\2\2\2\u0619\u061a")
        buf.write("\7\u00a1\2\2\u061a\u061d\7\u0196\2\2\u061b\u061c\7\u01a9")
        buf.write("\2\2\u061c\u061e\5\u0148\u00a5\2\u061d\u061b\3\2\2\2\u061d")
        buf.write("\u061e\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0620\7\u019d")
        buf.write("\2\2\u0620\u0622\5\u00aeX\2\u0621\u0623\7\u01b1\2\2\u0622")
        buf.write("\u0621\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0641\3\2\2\2")
        buf.write("\u0624\u0625\7\u00a1\2\2\u0625\u0626\7\u0196\2\2\u0626")
        buf.write("\u0627\5\u014e\u00a8\2\u0627\u0629\5\u00aeX\2\u0628\u062a")
        buf.write("\7\u01b1\2\2\u0629\u0628\3\2\2\2\u0629\u062a\3\2\2\2\u062a")
        buf.write("\u0641\3\2\2\2\u062b\u062c\7\u00a1\2\2\u062c\u062d\7\u0196")
        buf.write("\2\2\u062d\u062e\7\u019d\2\2\u062e\u062f\7-\2\2\u062f")
        buf.write("\u063a\5\u00a6T\2\u0630\u0638\7I\2\2\u0631\u0632\7\u008a")
        buf.write("\2\2\u0632\u0639\7\u0143\2\2\u0633\u0636\7\u00b6\2\2\u0634")
        buf.write("\u0635\7q\2\2\u0635\u0637\5\u0134\u009b\2\u0636\u0634")
        buf.write("\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u0639\3\2\2\2\u0638")
        buf.write("\u0631\3\2\2\2\u0638\u0633\3\2\2\2\u0639\u063b\3\2\2\2")
        buf.write("\u063a\u0630\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063d\3")
        buf.write("\2\2\2\u063c\u063e\7\u01b1\2\2\u063d\u063c\3\2\2\2\u063d")
        buf.write("\u063e\3\2\2\2\u063e\u0641\3\2\2\2\u063f\u0641\5\u00aa")
        buf.write("V\2\u0640\u0619\3\2\2\2\u0640\u0624\3\2\2\2\u0640\u062b")
        buf.write("\3\2\2\2\u0640\u063f\3\2\2\2\u0641\u0089\3\2\2\2\u0642")
        buf.write("\u0643\7\r\2\2\u0643\u0644\78\2\2\u0644\u0647\t\34\2\2")
        buf.write("\u0645\u0648\5\u0148\u00a5\2\u0646\u0648\7\u0196\2\2\u0647")
        buf.write("\u0645\3\2\2\2\u0647\u0646\3\2\2\2\u0647\u0648\3\2\2\2")
        buf.write("\u0648\u064a\3\2\2\2\u0649\u064b\7\u01b1\2\2\u064a\u0649")
        buf.write("\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u0690\3\2\2\2\u064c")
        buf.write("\u064d\7\r\2\2\u064d\u0657\t\34\2\2\u064e\u0651\5\u0148")
        buf.write("\u00a5\2\u064f\u0651\7\u0196\2\2\u0650\u064e\3\2\2\2\u0650")
        buf.write("\u064f\3\2\2\2\u0651\u0655\3\2\2\2\u0652\u0653\7\u00c1")
        buf.write("\2\2\u0653\u0654\7\u0127\2\2\u0654\u0656\7\u0199\2\2\u0655")
        buf.write("\u0652\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0658\3\2\2\2")
        buf.write("\u0657\u0650\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065a\3")
        buf.write("\2\2\2\u0659\u065b\7\u01b1\2\2\u065a\u0659\3\2\2\2\u065a")
        buf.write("\u065b\3\2\2\2\u065b\u0690\3\2\2\2\u065c\u065d\7\36\2")
        buf.write("\2\u065d\u066a\t\34\2\2\u065e\u0661\5\u0148\u00a5\2\u065f")
        buf.write("\u0661\7\u0196\2\2\u0660\u065e\3\2\2\2\u0660\u065f\3\2")
        buf.write("\2\2\u0661\u0668\3\2\2\2\u0662\u0663\7\u00c1\2\2\u0663")
        buf.write("\u0664\7\u01ae\2\2\u0664\u0665\7\u00f5\2\2\u0665\u0666")
        buf.write("\7\u019d\2\2\u0666\u0667\t\16\2\2\u0667\u0669\7\u01af")
        buf.write("\2\2\u0668\u0662\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066b")
        buf.write("\3\2\2\2\u066a\u0660\3\2\2\2\u066a\u066b\3\2\2\2\u066b")
        buf.write("\u066d\3\2\2\2\u066c\u066e\7\u01b1\2\2\u066d\u066c\3\2")
        buf.write("\2\2\u066d\u066e\3\2\2\2\u066e\u0690\3\2\2\2\u066f\u0671")
        buf.write("\7\36\2\2\u0670\u0672\7\u018d\2\2\u0671\u0670\3\2\2\2")
        buf.write("\u0671\u0672\3\2\2\2\u0672\u0674\3\2\2\2\u0673\u0675\7")
        buf.write("\u01b1\2\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675")
        buf.write("\u0690\3\2\2\2\u0676\u0677\7\u0095\2\2\u0677\u067a\t\34")
        buf.write("\2\2\u0678\u067b\5\u0148\u00a5\2\u0679\u067b\7\u0196\2")
        buf.write("\2\u067a\u0678\3\2\2\2\u067a\u0679\3\2\2\2\u067a\u067b")
        buf.write("\3\2\2\2\u067b\u067d\3\2\2\2\u067c\u067e\7\u01b1\2\2\u067d")
        buf.write("\u067c\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u0690\3\2\2\2")
        buf.write("\u067f\u0681\7\u0095\2\2\u0680\u0682\7\u018d\2\2\u0681")
        buf.write("\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0684\3\2\2\2")
        buf.write("\u0683\u0685\7\u01b1\2\2\u0684\u0683\3\2\2\2\u0684\u0685")
        buf.write("\3\2\2\2\u0685\u0690\3\2\2\2\u0686\u0687\7\u0099\2\2\u0687")
        buf.write("\u068a\t\34\2\2\u0688\u068b\5\u0148\u00a5\2\u0689\u068b")
        buf.write("\7\u0196\2\2\u068a\u0688\3\2\2\2\u068a\u0689\3\2\2\2\u068a")
        buf.write("\u068b\3\2\2\2\u068b\u068d\3\2\2\2\u068c\u068e\7\u01b1")
        buf.write("\2\2\u068d\u068c\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u0690")
        buf.write("\3\2\2\2\u068f\u0642\3\2\2\2\u068f\u064c\3\2\2\2\u068f")
        buf.write("\u065c\3\2\2\2\u068f\u066f\3\2\2\2\u068f\u0676\3\2\2\2")
        buf.write("\u068f\u067f\3\2\2\2\u068f\u0686\3\2\2\2\u0690\u008b\3")
        buf.write("\2\2\2\u0691\u0693\7\u010f\2\2\u0692\u0694\7\u0197\2\2")
        buf.write("\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u008d\3")
        buf.write("\2\2\2\u0695\u0696\7\u00b8\2\2\u0696\u0698\5\u0148\u00a5")
        buf.write("\2\u0697\u0699\7\u01b1\2\2\u0698\u0697\3\2\2\2\u0698\u0699")
        buf.write("\3\2\2\2\u0699\u008f\3\2\2\2\u069a\u069b\7A\2\2\u069b")
        buf.write("\u069c\7\t\2\2\u069c\u069d\t\35\2\2\u069d\u0091\3\2\2")
        buf.write("\2\u069e\u06a0\7\u0196\2\2\u069f\u06a1\7\t\2\2\u06a0\u069f")
        buf.write("\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2")
        buf.write("\u06a5\5\u0140\u00a1\2\u06a3\u06a4\7\u019d\2\2\u06a4\u06a6")
        buf.write("\5\u00aeX\2\u06a5\u06a3\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6")
        buf.write("\u0093\3\2\2\2\u06a7\u06a8\7\u00a7\2\2\u06a8\u06a9\7\u01ae")
        buf.write("\2\2\u06a9\u06aa\5\u0096L\2\u06aa\u06ab\7\u01af\2\2\u06ab")
        buf.write("\u0095\3\2\2\2\u06ac\u06b3\5\u0098M\2\u06ad\u06af\7\u01b0")
        buf.write("\2\2\u06ae\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0")
        buf.write("\3\2\2\2\u06b0\u06b2\5\u0098M\2\u06b1\u06ae\3\2\2\2\u06b2")
        buf.write("\u06b5\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b3\u06b4\3\2\2\2")
        buf.write("\u06b4\u0097\3\2\2\2\u06b5\u06b3\3\2\2\2\u06b6\u06b9\5")
        buf.write("\u009aN\2\u06b7\u06b9\5\u009eP\2\u06b8\u06b6\3\2\2\2\u06b8")
        buf.write("\u06b7\3\2\2\2\u06b9\u0099\3\2\2\2\u06ba\u06be\5\u0148")
        buf.write("\u00a5\2\u06bb\u06bf\5\u0140\u00a1\2\u06bc\u06bd\7\t\2")
        buf.write("\2\u06bd\u06bf\5\u00aeX\2\u06be\u06bb\3\2\2\2\u06be\u06bc")
        buf.write("\3\2\2\2\u06bf\u06c2\3\2\2\2\u06c0\u06c1\7\34\2\2\u06c1")
        buf.write("\u06c3\5\u0148\u00a5\2\u06c2\u06c0\3\2\2\2\u06c2\u06c3")
        buf.write("\3\2\2\2\u06c3\u06c5\3\2\2\2\u06c4\u06c6\5\u013c\u009f")
        buf.write("\2\u06c5\u06c4\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06de")
        buf.write("\3\2\2\2\u06c7\u06c8\7 \2\2\u06c8\u06ca\5\u0148\u00a5")
        buf.write("\2\u06c9\u06c7\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cb")
        buf.write("\3\2\2\2\u06cb\u06cc\7\62\2\2\u06cc\u06cf\5\u00b0Y\2\u06cd")
        buf.write("\u06ce\7\u00c1\2\2\u06ce\u06d0\7\u00ba\2\2\u06cf\u06cd")
        buf.write("\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06df\3\2\2\2\u06d1")
        buf.write("\u06d7\7U\2\2\u06d2\u06d3\7\u01ae\2\2\u06d3\u06d4\7\u0197")
        buf.write("\2\2\u06d4\u06d5\7\u01b0\2\2\u06d5\u06d6\7\u0197\2\2\u06d6")
        buf.write("\u06d8\7\u01af\2\2\u06d7\u06d2\3\2\2\2\u06d7\u06d8\3\2")
        buf.write("\2\2\u06d8\u06dc\3\2\2\2\u06d9\u06da\7n\2\2\u06da\u06db")
        buf.write("\7I\2\2\u06db\u06dd\7\u008e\2\2\u06dc\u06d9\3\2\2\2\u06dc")
        buf.write("\u06dd\3\2\2\2\u06dd\u06df\3\2\2\2\u06de\u06c9\3\2\2\2")
        buf.write("\u06de\u06d1\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e1\3")
        buf.write("\2\2\2\u06e0\u06e2\7\u0097\2\2\u06e1\u06e0\3\2\2\2\u06e1")
        buf.write("\u06e2\3\2\2\2\u06e2\u06e6\3\2\2\2\u06e3\u06e5\5\u009c")
        buf.write("O\2\u06e4\u06e3\3\2\2\2\u06e5\u06e8\3\2\2\2\u06e6\u06e4")
        buf.write("\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u009b\3\2\2\2\u06e8")
        buf.write("\u06e6\3\2\2\2\u06e9\u06ea\7 \2\2\u06ea\u06ec\5\u0148")
        buf.write("\u00a5\2\u06eb\u06e9\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec")
        buf.write("\u06ee\3\2\2\2\u06ed\u06ef\5\u013c\u009f\2\u06ee\u06ed")
        buf.write("\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u0705\3\2\2\2\u06f0")
        buf.write("\u06f1\7\u0084\2\2\u06f1\u06f4\7b\2\2\u06f2\u06f4\7\u00b4")
        buf.write("\2\2\u06f3\u06f0\3\2\2\2\u06f3\u06f2\3\2\2\2\u06f4\u06f6")
        buf.write("\3\2\2\2\u06f5\u06f7\5\u013a\u009e\2\u06f6\u06f5\3\2\2")
        buf.write("\2\u06f6\u06f7\3\2\2\2\u06f7\u06f9\3\2\2\2\u06f8\u06fa")
        buf.write("\5\u00a0Q\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa")
        buf.write("\u0706\3\2\2\2\u06fb\u06ff\7\27\2\2\u06fc\u06fd\7n\2\2")
        buf.write("\u06fd\u06fe\7I\2\2\u06fe\u0700\7\u008e\2\2\u06ff\u06fc")
        buf.write("\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2\u0701")
        buf.write("\u0702\7\u01ae\2\2\u0702\u0703\5\u00bc_\2\u0703\u0704")
        buf.write("\7\u01af\2\2\u0704\u0706\3\2\2\2\u0705\u06f3\3\2\2\2\u0705")
        buf.write("\u06fb\3\2\2\2\u0706\u009d\3\2\2\2\u0707\u0708\7 \2\2")
        buf.write("\u0708\u070a\5\u0148\u00a5\2\u0709\u0707\3\2\2\2\u0709")
        buf.write("\u070a\3\2\2\2\u070a\u072a\3\2\2\2\u070b\u070c\7\u0084")
        buf.write("\2\2\u070c\u070f\7b\2\2\u070d\u070f\7\u00b4\2\2\u070e")
        buf.write("\u070b\3\2\2\2\u070e\u070d\3\2\2\2\u070f\u0711\3\2\2\2")
        buf.write("\u0710\u0712\5\u013a\u009e\2\u0711\u0710\3\2\2\2\u0711")
        buf.write("\u0712\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0714\7\u01ae")
        buf.write("\2\2\u0714\u0716\5\u0134\u009b\2\u0715\u0717\t\7\2\2\u0716")
        buf.write("\u0715\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0718\3\2\2\2")
        buf.write("\u0718\u071a\7\u01af\2\2\u0719\u071b\5\u00a0Q\2\u071a")
        buf.write("\u0719\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u071e\3\2\2\2")
        buf.write("\u071c\u071d\7t\2\2\u071d\u071f\5\u0148\u00a5\2\u071e")
        buf.write("\u071c\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u072b\3\2\2\2")
        buf.write("\u0720\u0724\7\27\2\2\u0721\u0722\7n\2\2\u0722\u0723\7")
        buf.write("I\2\2\u0723\u0725\7\u008e\2\2\u0724\u0721\3\2\2\2\u0724")
        buf.write("\u0725\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0727\7\u01ae")
        buf.write("\2\2\u0727\u0728\5\u00bc_\2\u0728\u0729\7\u01af\2\2\u0729")
        buf.write("\u072b\3\2\2\2\u072a\u070e\3\2\2\2\u072a\u0720\3\2\2\2")
        buf.write("\u072b\u009f\3\2\2\2\u072c\u072d\7\u00c1\2\2\u072d\u072e")
        buf.write("\7\u01ae\2\2\u072e\u0733\5\u00a2R\2\u072f\u0730\7\u01b0")
        buf.write("\2\2\u0730\u0732\5\u00a2R\2\u0731\u072f\3\2\2\2\u0732")
        buf.write("\u0735\3\2\2\2\u0733\u0731\3\2\2\2\u0733\u0734\3\2\2\2")
        buf.write("\u0734\u0736\3\2\2\2\u0735\u0733\3\2\2\2\u0736\u0737\7")
        buf.write("\u01af\2\2\u0737\u00a1\3\2\2\2\u0738\u0739\5\u014a\u00a6")
        buf.write("\2\u0739\u073d\7\u019d\2\2\u073a\u073e\5\u014a\u00a6\2")
        buf.write("\u073b\u073e\5\u0138\u009d\2\u073c\u073e\7\u0197\2\2\u073d")
        buf.write("\u073a\3\2\2\2\u073d\u073b\3\2\2\2\u073d\u073c\3\2\2\2")
        buf.write("\u073e\u00a3\3\2\2\2\u073f\u0740\7\61\2\2\u0740\u0760")
        buf.write("\5\u0136\u009c\2\u0741\u074b\7-\2\2\u0742\u0749\5\u00a6")
        buf.write("T\2\u0743\u0744\7I\2\2\u0744\u0747\7\u00b6\2\2\u0745\u0746")
        buf.write("\7q\2\2\u0746\u0748\5\u0134\u009b\2\u0747\u0745\3\2\2")
        buf.write("\2\u0747\u0748\3\2\2\2\u0748\u074a\3\2\2\2\u0749\u0743")
        buf.write("\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074c\3\2\2\2\u074b")
        buf.write("\u0742\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u0761\3\2\2\2")
        buf.write("\u074d\u074f\7\u011a\2\2\u074e\u074d\3\2\2\2\u074e\u074f")
        buf.write("\3\2\2\2\u074f\u0751\3\2\2\2\u0750\u0752\7\u0166\2\2\u0751")
        buf.write("\u0750\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u0753\3\2\2\2")
        buf.write("\u0753\u0754\7-\2\2\u0754\u0755\7I\2\2\u0755\u075e\5\32")
        buf.write("\16\2\u0756\u075c\7I\2\2\u0757\u0758\7\u008a\2\2\u0758")
        buf.write("\u075d\7\u0143\2\2\u0759\u075d\7\u00b6\2\2\u075a\u075b")
        buf.write("\7q\2\2\u075b\u075d\5\u0134\u009b\2\u075c\u0757\3\2\2")
        buf.write("\2\u075c\u0759\3\2\2\2\u075c\u075a\3\2\2\2\u075d\u075f")
        buf.write("\3\2\2\2\u075e\u0756\3\2\2\2\u075e\u075f\3\2\2\2\u075f")
        buf.write("\u0761\3\2\2\2\u0760\u0741\3\2\2\2\u0760\u074e\3\2\2\2")
        buf.write("\u0761\u0763\3\2\2\2\u0762\u0764\7\u01b1\2\2\u0763\u0762")
        buf.write("\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u00a5\3\2\2\2\u0765")
        buf.write("\u0767\t\20\2\2\u0766\u0765\3\2\2\2\u0766\u0767\3\2\2")
        buf.write("\2\u0767\u0769\3\2\2\2\u0768\u076a\t\36\2\2\u0769\u0768")
        buf.write("\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076c\3\2\2\2\u076b")
        buf.write("\u076d\t\37\2\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2\2")
        buf.write("\2\u076d\u076f\3\2\2\2\u076e\u0770\t \2\2\u076f\u076e")
        buf.write("\3\2\2\2\u076f\u0770\3\2\2\2\u0770\u0772\3\2\2\2\u0771")
        buf.write("\u0773\7\u0183\2\2\u0772\u0771\3\2\2\2\u0772\u0773\3\2")
        buf.write("\2\2\u0773\u0774\3\2\2\2\u0774\u0775\7I\2\2\u0775\u0776")
        buf.write("\5\32\16\2\u0776\u00a7\3\2\2\2\u0777\u0781\7E\2\2\u0778")
        buf.write("\u077f\7\u0137\2\2\u0779\u077f\7\u014e\2\2\u077a\u077f")
        buf.write("\7\u0107\2\2\u077b\u077f\7\u0121\2\2\u077c\u077d\t!\2")
        buf.write("\2\u077d\u077f\5\u00aeX\2\u077e\u0778\3\2\2\2\u077e\u0779")
        buf.write("\3\2\2\2\u077e\u077a\3\2\2\2\u077e\u077b\3\2\2\2\u077e")
        buf.write("\u077c\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0780\3\2\2\2")
        buf.write("\u0780\u0782\7N\2\2\u0781\u077e\3\2\2\2\u0781\u0782\3")
        buf.write("\2\2\2\u0782\u0784\3\2\2\2\u0783\u0785\7\u010e\2\2\u0784")
        buf.write("\u0783\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u0786\3\2\2\2")
        buf.write("\u0786\u0790\5\u0136\u009c\2\u0787\u0788\7_\2\2\u0788")
        buf.write("\u078d\7\u0196\2\2\u0789\u078a\7\u01b0\2\2\u078a\u078c")
        buf.write("\7\u0196\2\2\u078b\u0789\3\2\2\2\u078c\u078f\3\2\2\2\u078d")
        buf.write("\u078b\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0791\3\2\2\2")
        buf.write("\u078f\u078d\3\2\2\2\u0790\u0787\3\2\2\2\u0790\u0791\3")
        buf.write("\2\2\2\u0791\u0793\3\2\2\2\u0792\u0794\7\u01b1\2\2\u0793")
        buf.write("\u0792\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u00a9\3\2\2\2")
        buf.write("\u0795\u0796\7\u00a1\2\2\u0796\u079a\5\u0148\u00a5\2\u0797")
        buf.write("\u079b\5\u0148\u00a5\2\u0798\u079b\5\u00acW\2\u0799\u079b")
        buf.write("\5\u0138\u009d\2\u079a\u0797\3\2\2\2\u079a\u0798\3\2\2")
        buf.write("\2\u079a\u0799\3\2\2\2\u079b\u079d\3\2\2\2\u079c\u079e")
        buf.write("\7\u01b1\2\2\u079d\u079c\3\2\2\2\u079d\u079e\3\2\2\2\u079e")
        buf.write("\u07c1\3\2\2\2\u079f\u07a0\7\u00a1\2\2\u07a0\u07a1\7\u00ae")
        buf.write("\2\2\u07a1\u07a2\7\u011c\2\2\u07a2\u07ab\7\u0122\2\2\u07a3")
        buf.write("\u07a4\7\u008a\2\2\u07a4\u07ac\7\u0185\2\2\u07a5\u07a6")
        buf.write("\7\u008a\2\2\u07a6\u07ac\7\u00e1\2\2\u07a7\u07a8\7\u015c")
        buf.write("\2\2\u07a8\u07ac\7\u008a\2\2\u07a9\u07ac\7\u016f\2\2\u07aa")
        buf.write("\u07ac\7\u016a\2\2\u07ab\u07a3\3\2\2\2\u07ab\u07a5\3\2")
        buf.write("\2\2\u07ab\u07a7\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ab\u07aa")
        buf.write("\3\2\2\2\u07ac\u07ae\3\2\2\2\u07ad\u07af\7\u01b1\2\2\u07ae")
        buf.write("\u07ad\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07c1\3\2\2\2")
        buf.write("\u07b0\u07b1\7\u00a1\2\2\u07b1\u07b2\7W\2\2\u07b2\u07b3")
        buf.write("\5\u012a\u0096\2\u07b3\u07b5\5\u0138\u009d\2\u07b4\u07b6")
        buf.write("\7\u01b1\2\2\u07b5\u07b4\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6")
        buf.write("\u07c1\3\2\2\2\u07b7\u07b8\7\u00a1\2\2\u07b8\u07b9\7\u00c8")
        buf.write("\2\2\u07b9\u07c1\5\u0138\u009d\2\u07ba\u07bb\7\u00a1\2")
        buf.write("\2\u07bb\u07bc\7\u0150\2\2\u07bc\u07c1\5\u0138\u009d\2")
        buf.write("\u07bd\u07be\7\u00a1\2\2\u07be\u07bf\7\u00ca\2\2\u07bf")
        buf.write("\u07c1\5\u0138\u009d\2\u07c0\u0795\3\2\2\2\u07c0\u079f")
        buf.write("\3\2\2\2\u07c0\u07b0\3\2\2\2\u07c0\u07b7\3\2\2\2\u07c0")
        buf.write("\u07ba\3\2\2\2\u07c0\u07bd\3\2\2\2\u07c1\u00ab\3\2\2\2")
        buf.write("\u07c2\u07c5\5\u0144\u00a3\2\u07c3\u07c5\7\u0196\2\2\u07c4")
        buf.write("\u07c2\3\2\2\2\u07c4\u07c3\3\2\2\2\u07c5\u00ad\3\2\2\2")
        buf.write("\u07c6\u07c7\bX\1\2\u07c7\u07c8\7\u01b8\2\2\u07c8\u07f4")
        buf.write("\5\u00aeX\b\u07c9\u07ca\t\"\2\2\u07ca\u07f4\5\u00aeX\6")
        buf.write("\u07cb\u07f4\7\62\2\2\u07cc\u07f4\7o\2\2\u07cd\u07f4\7")
        buf.write("\u0196\2\2\u07ce\u07f4\5\u0144\u00a3\2\u07cf\u07f4\5\u00f2")
        buf.write("z\2\u07d0\u07d1\7\24\2\2\u07d1\u07d3\5\u00aeX\2\u07d2")
        buf.write("\u07d4\5\u00f4{\2\u07d3\u07d2\3\2\2\2\u07d4\u07d5\3\2")
        buf.write("\2\2\u07d5\u07d3\3\2\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07d9")
        buf.write("\3\2\2\2\u07d7\u07d8\7<\2\2\u07d8\u07da\5\u00aeX\2\u07d9")
        buf.write("\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2\2")
        buf.write("\u07db\u07dc\7=\2\2\u07dc\u07f4\3\2\2\2\u07dd\u07df\7")
        buf.write("\24\2\2\u07de\u07e0\5\u00f6|\2\u07df\u07de\3\2\2\2\u07e0")
        buf.write("\u07e1\3\2\2\2\u07e1\u07df\3\2\2\2\u07e1\u07e2\3\2\2\2")
        buf.write("\u07e2\u07e5\3\2\2\2\u07e3\u07e4\7<\2\2\u07e4\u07e6\5")
        buf.write("\u00aeX\2\u07e5\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6")
        buf.write("\u07e7\3\2\2\2\u07e7\u07e8\7=\2\2\u07e8\u07f4\3\2\2\2")
        buf.write("\u07e9\u07f4\5\u0132\u009a\2\u07ea\u07eb\7\u01ae\2\2\u07eb")
        buf.write("\u07ec\5\u00aeX\2\u07ec\u07ed\7\u01af\2\2\u07ed\u07f4")
        buf.write("\3\2\2\2\u07ee\u07ef\7\u01ae\2\2\u07ef\u07f0\5\u00b2Z")
        buf.write("\2\u07f0\u07f1\7\u01af\2\2\u07f1\u07f4\3\2\2\2\u07f2\u07f4")
        buf.write("\5\u0112\u008a\2\u07f3\u07c6\3\2\2\2\u07f3\u07c9\3\2\2")
        buf.write("\2\u07f3\u07cb\3\2\2\2\u07f3\u07cc\3\2\2\2\u07f3\u07cd")
        buf.write("\3\2\2\2\u07f3\u07ce\3\2\2\2\u07f3\u07cf\3\2\2\2\u07f3")
        buf.write("\u07d0\3\2\2\2\u07f3\u07dd\3\2\2\2\u07f3\u07e9\3\2\2\2")
        buf.write("\u07f3\u07ea\3\2\2\2\u07f3\u07ee\3\2\2\2\u07f3\u07f2\3")
        buf.write("\2\2\2\u07f4\u0804\3\2\2\2\u07f5\u07f6\f\7\2\2\u07f6\u07f7")
        buf.write("\t#\2\2\u07f7\u0803\5\u00aeX\b\u07f8\u07f9\f\5\2\2\u07f9")
        buf.write("\u07fa\t$\2\2\u07fa\u0803\5\u00aeX\6\u07fb\u07fc\f\4\2")
        buf.write("\2\u07fc\u07fd\5\u014c\u00a7\2\u07fd\u07fe\5\u00aeX\5")
        buf.write("\u07fe\u0803\3\2\2\2\u07ff\u0800\f\16\2\2\u0800\u0801")
        buf.write("\7\34\2\2\u0801\u0803\5\u0148\u00a5\2\u0802\u07f5\3\2")
        buf.write("\2\2\u0802\u07f8\3\2\2\2\u0802\u07fb\3\2\2\2\u0802\u07ff")
        buf.write("\3\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2\u0804")
        buf.write("\u0805\3\2\2\2\u0805\u00af\3\2\2\2\u0806\u0804\3\2\2\2")
        buf.write("\u0807\u0810\7o\2\2\u0808\u0810\5\u0144\u00a3\2\u0809")
        buf.write("\u0810\5\u00f2z\2\u080a\u0810\7\u0196\2\2\u080b\u080c")
        buf.write("\7\u01ae\2\2\u080c\u080d\5\u00b0Y\2\u080d\u080e\7\u01af")
        buf.write("\2\2\u080e\u0810\3\2\2\2\u080f\u0807\3\2\2\2\u080f\u0808")
        buf.write("\3\2\2\2\u080f\u0809\3\2\2\2\u080f\u080a\3\2\2\2\u080f")
        buf.write("\u080b\3\2\2\2\u0810\u00b1\3\2\2\2\u0811\u0812\5\32\16")
        buf.write("\2\u0812\u00b3\3\2\2\2\u0813\u0816\7\u00c1\2\2\u0814\u0815")
        buf.write("\7\u018f\2\2\u0815\u0817\7\u01b0\2\2\u0816\u0814\3\2\2")
        buf.write("\2\u0816\u0817\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u081d")
        buf.write("\5\u00b6\\\2\u0819\u081a\7\u01b0\2\2\u081a\u081c\5\u00b6")
        buf.write("\\\2\u081b\u0819\3\2\2\2\u081c\u081f\3\2\2\2\u081d\u081b")
        buf.write("\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u00b5\3\2\2\2\u081f")
        buf.write("\u081d\3\2\2\2\u0820\u0825\5\u0148\u00a5\2\u0821\u0822")
        buf.write("\7\u01ae\2\2\u0822\u0823\5\u0134\u009b\2\u0823\u0824\7")
        buf.write("\u01af\2\2\u0824\u0826\3\2\2\2\u0825\u0821\3\2\2\2\u0825")
        buf.write("\u0826\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0828\7\t\2\2")
        buf.write("\u0828\u0829\7\u01ae\2\2\u0829\u082a\5\32\16\2\u082a\u082b")
        buf.write("\7\u01af\2\2\u082b\u00b7\3\2\2\2\u082c\u082f\5\u0132\u009a")
        buf.write("\2\u082d\u082f\7\u0196\2\2\u082e\u082c\3\2\2\2\u082e\u082d")
        buf.write("\3\2\2\2\u082f\u0832\3\2\2\2\u0830\u0833\7\u019d\2\2\u0831")
        buf.write("\u0833\5\u014e\u00a8\2\u0832\u0830\3\2\2\2\u0832\u0831")
        buf.write("\3\2\2\2\u0833\u0834\3\2\2\2\u0834\u083d\5\u00aeX\2\u0835")
        buf.write("\u0836\5\u0148\u00a5\2\u0836\u0837\7\u01a9\2\2\u0837\u0838")
        buf.write("\5\u0148\u00a5\2\u0838\u0839\7\u01ae\2\2\u0839\u083a\5")
        buf.write("\u010a\u0086\2\u083a\u083b\7\u01af\2\2\u083b\u083d\3\2")
        buf.write("\2\2\u083c\u082e\3\2\2\2\u083c\u0835\3\2\2\2\u083d\u00b9")
        buf.write("\3\2\2\2\u083e\u0843\5\u00bc_\2\u083f\u0840\7\u01b0\2")
        buf.write("\2\u0840\u0842\5\u00bc_\2\u0841\u083f\3\2\2\2\u0842\u0845")
        buf.write("\3\2\2\2\u0843\u0841\3\2\2\2\u0843\u0844\3\2\2\2\u0844")
        buf.write("\u00bb\3\2\2\2\u0845\u0843\3\2\2\2\u0846\u084b\5\u00be")
        buf.write("`\2\u0847\u0848\7{\2\2\u0848\u084a\5\u00be`\2\u0849\u0847")
        buf.write("\3\2\2\2\u084a\u084d\3\2\2\2\u084b\u0849\3\2\2\2\u084b")
        buf.write("\u084c\3\2\2\2\u084c\u00bd\3\2\2\2\u084d\u084b\3\2\2\2")
        buf.write("\u084e\u0853\5\u00c0a\2\u084f\u0850\7\7\2\2\u0850\u0852")
        buf.write("\5\u00c0a\2\u0851\u084f\3\2\2\2\u0852\u0855\3\2\2\2\u0853")
        buf.write("\u0851\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u00bf\3\2\2\2")
        buf.write("\u0855\u0853\3\2\2\2\u0856\u0858\7n\2\2\u0857\u0856\3")
        buf.write("\2\2\2\u0857\u0858\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085a")
        buf.write("\5\u00c2b\2\u085a\u00c1\3\2\2\2\u085b\u085c\7B\2\2\u085c")
        buf.write("\u085d\7\u01ae\2\2\u085d\u085e\5\u00b2Z\2\u085e\u085f")
        buf.write("\7\u01af\2\2\u085f\u0894\3\2\2\2\u0860\u0861\5\u00aeX")
        buf.write("\2\u0861\u0862\5\u014c\u00a7\2\u0862\u0863\5\u00aeX\2")
        buf.write("\u0863\u0894\3\2\2\2\u0864\u0865\5\u00aeX\2\u0865\u0866")
        buf.write("\5\u014c\u00a7\2\u0866\u0867\t%\2\2\u0867\u0868\7\u01ae")
        buf.write("\2\2\u0868\u0869\5\u00b2Z\2\u0869\u086a\7\u01af\2\2\u086a")
        buf.write("\u0894\3\2\2\2\u086b\u086d\5\u00aeX\2\u086c\u086e\7n\2")
        buf.write("\2\u086d\u086c\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u086f")
        buf.write("\3\2\2\2\u086f\u0870\7\16\2\2\u0870\u0871\5\u00aeX\2\u0871")
        buf.write("\u0872\7\7\2\2\u0872\u0873\5\u00aeX\2\u0873\u0894\3\2")
        buf.write("\2\2\u0874\u0876\5\u00aeX\2\u0875\u0877\7n\2\2\u0876\u0875")
        buf.write("\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878\3\2\2\2\u0878")
        buf.write("\u0879\7Y\2\2\u0879\u087c\7\u01ae\2\2\u087a\u087d\5\u00b2")
        buf.write("Z\2\u087b\u087d\5\u010a\u0086\2\u087c\u087a\3\2\2\2\u087c")
        buf.write("\u087b\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u087f\7\u01af")
        buf.write("\2\2\u087f\u0894\3\2\2\2\u0880\u0882\5\u00aeX\2\u0881")
        buf.write("\u0883\7n\2\2\u0882\u0881\3\2\2\2\u0882\u0883\3\2\2\2")
        buf.write("\u0883\u0884\3\2\2\2\u0884\u0885\7e\2\2\u0885\u0888\5")
        buf.write("\u00aeX\2\u0886\u0887\7?\2\2\u0887\u0889\5\u00aeX\2\u0888")
        buf.write("\u0886\3\2\2\2\u0888\u0889\3\2\2\2\u0889\u0894\3\2\2\2")
        buf.write("\u088a\u088b\5\u00aeX\2\u088b\u088c\7`\2\2\u088c\u088d")
        buf.write("\5\u013c\u009f\2\u088d\u0894\3\2\2\2\u088e\u088f\7\u01ae")
        buf.write("\2\2\u088f\u0890\5\u00bc_\2\u0890\u0891\7\u01af\2\2\u0891")
        buf.write("\u0894\3\2\2\2\u0892\u0894\7\u0197\2\2\u0893\u085b\3\2")
        buf.write("\2\2\u0893\u0860\3\2\2\2\u0893\u0864\3\2\2\2\u0893\u086b")
        buf.write("\3\2\2\2\u0893\u0874\3\2\2\2\u0893\u0880\3\2\2\2\u0893")
        buf.write("\u088a\3\2\2\2\u0893\u088e\3\2\2\2\u0893\u0892\3\2\2\2")
        buf.write("\u0894\u00c3\3\2\2\2\u0895\u089b\5\u00c8e\2\u0896\u0897")
        buf.write("\7\u01ae\2\2\u0897\u0898\5\u00c4c\2\u0898\u0899\7\u01af")
        buf.write("\2\2\u0899\u089b\3\2\2\2\u089a\u0895\3\2\2\2\u089a\u0896")
        buf.write("\3\2\2\2\u089b\u089f\3\2\2\2\u089c\u089e\5\u00c6d\2\u089d")
        buf.write("\u089c\3\2\2\2\u089e\u08a1\3\2\2\2\u089f\u089d\3\2\2\2")
        buf.write("\u089f\u08a0\3\2\2\2\u08a0\u00c5\3\2\2\2\u08a1\u089f\3")
        buf.write("\2\2\2\u08a2\u08a4\7\u00b3\2\2\u08a3\u08a5\7\5\2\2\u08a4")
        buf.write("\u08a3\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a9\3\2\2\2")
        buf.write("\u08a6\u08a9\7@\2\2\u08a7\u08a9\7^\2\2\u08a8\u08a2\3\2")
        buf.write("\2\2\u08a8\u08a6\3\2\2\2\u08a8\u08a7\3\2\2\2\u08a9\u08b3")
        buf.write("\3\2\2\2\u08aa\u08b4\5\u00c8e\2\u08ab\u08ac\7\u01ae\2")
        buf.write("\2\u08ac\u08ad\5\u00c4c\2\u08ad\u08ae\7\u01af\2\2\u08ae")
        buf.write("\u08b0\3\2\2\2\u08af\u08ab\3\2\2\2\u08b0\u08b1\3\2\2\2")
        buf.write("\u08b1\u08af\3\2\2\2\u08b1\u08b2\3\2\2\2\u08b2\u08b4\3")
        buf.write("\2\2\2\u08b3\u08aa\3\2\2\2\u08b3\u08af\3\2\2\2\u08b4\u00c7")
        buf.write("\3\2\2\2\u08b5\u08b7\7\u009c\2\2\u08b6\u08b8\t&\2\2\u08b7")
        buf.write("\u08b6\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08c2\3\2\2\2")
        buf.write("\u08b9\u08ba\7\u00ac\2\2\u08ba\u08bc\5\u00aeX\2\u08bb")
        buf.write("\u08bd\7\u0080\2\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd\3\2")
        buf.write("\2\2\u08bd\u08c0\3\2\2\2\u08be\u08bf\7\u00c1\2\2\u08bf")
        buf.write("\u08c1\7\u017b\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2")
        buf.write("\2\2\u08c1\u08c3\3\2\2\2\u08c2\u08b9\3\2\2\2\u08c2\u08c3")
        buf.write("\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c7\5\u00dan\2\u08c5")
        buf.write("\u08c6\7_\2\2\u08c6\u08c8\5\u012a\u0096\2\u08c7\u08c5")
        buf.write("\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8\u08cb\3\2\2\2\u08c9")
        buf.write("\u08ca\7N\2\2\u08ca\u08cc\5\u00dep\2\u08cb\u08c9\3\2\2")
        buf.write("\2\u08cb\u08cc\3\2\2\2\u08cc\u08cf\3\2\2\2\u08cd\u08ce")
        buf.write("\7\u00bf\2\2\u08ce\u08d0\5\u00bc_\2\u08cf\u08cd\3\2\2")
        buf.write("\2\u08cf\u08d0\3\2\2\2\u08d0\u08db\3\2\2\2\u08d1\u08d2")
        buf.write("\7S\2\2\u08d2\u08d3\7\22\2\2\u08d3\u08d8\5\u00d2j\2\u08d4")
        buf.write("\u08d5\7\u01b0\2\2\u08d5\u08d7\5\u00d2j\2\u08d6\u08d4")
        buf.write("\3\2\2\2\u08d7\u08da\3\2\2\2\u08d8\u08d6\3\2\2\2\u08d8")
        buf.write("\u08d9\3\2\2\2\u08d9\u08dc\3\2\2\2\u08da\u08d8\3\2\2\2")
        buf.write("\u08db\u08d1\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08df\3")
        buf.write("\2\2\2\u08dd\u08de\7T\2\2\u08de\u08e0\5\u00bc_\2\u08df")
        buf.write("\u08dd\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u00c9\3\2\2\2")
        buf.write("\u08e1\u08e2\7|\2\2\u08e2\u08e3\7\22\2\2\u08e3\u08e8\5")
        buf.write("\u00d0i\2\u08e4\u08e5\7\u01b0\2\2\u08e5\u08e7\5\u00d0")
        buf.write("i\2\u08e6\u08e4\3\2\2\2\u08e7\u08ea\3\2\2\2\u08e8\u08e6")
        buf.write("\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08f6\3\2\2\2\u08ea")
        buf.write("\u08e8\3\2\2\2\u08eb\u08ec\7\u0141\2\2\u08ec\u08ed\5\u00ae")
        buf.write("X\2\u08ed\u08f4\t\'\2\2\u08ee\u08ef\7E\2\2\u08ef\u08f0")
        buf.write("\t(\2\2\u08f0\u08f1\5\u00aeX\2\u08f1\u08f2\t\'\2\2\u08f2")
        buf.write("\u08f3\7\u0143\2\2\u08f3\u08f5\3\2\2\2\u08f4\u08ee\3\2")
        buf.write("\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\3\2\2\2\u08f6\u08eb")
        buf.write("\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u00cb\3\2\2\2\u08f8")
        buf.write("\u08f9\7I\2\2\u08f9\u090c\7\20\2\2\u08fa\u08fb\7I\2\2")
        buf.write("\u08fb\u08fc\7\u018e\2\2\u08fc\u08fe\7\u00cf\2\2\u08fd")
        buf.write("\u08ff\5\u00ceh\2\u08fe\u08fd\3\2\2\2\u08fe\u08ff\3\2")
        buf.write("\2\2\u08ff\u090c\3\2\2\2\u0900\u0901\7I\2\2\u0901\u0902")
        buf.write("\7\u018e\2\2\u0902\u0906\7\u014c\2\2\u0903\u0904\7\u01ae")
        buf.write("\2\2\u0904\u0905\7\u0199\2\2\u0905\u0907\7\u01af\2\2\u0906")
        buf.write("\u0903\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0909\3\2\2\2")
        buf.write("\u0908\u090a\5\u00ceh\2\u0909\u0908\3\2\2\2\u0909\u090a")
        buf.write("\3\2\2\2\u090a\u090c\3\2\2\2\u090b\u08f8\3\2\2\2\u090b")
        buf.write("\u08fa\3\2\2\2\u090b\u0900\3\2\2\2\u090c\u00cd\3\2\2\2")
        buf.write("\u090d\u0912\7\u01b0\2\2\u090e\u090f\7\u019a\2\2\u090f")
        buf.write("\u0913\7\u00d7\2\2\u0910\u0913\7\u0182\2\2\u0911\u0913")
        buf.write("\7\u015f\2\2\u0912\u090e\3\2\2\2\u0912\u0910\3\2\2\2\u0912")
        buf.write("\u0911\3\2\2\2\u0913\u00cf\3\2\2\2\u0914\u0916\5\u00ae")
        buf.write("X\2\u0915\u0917\t\7\2\2\u0916\u0915\3\2\2\2\u0916\u0917")
        buf.write("\3\2\2\2\u0917\u00d1\3\2\2\2\u0918\u0919\5\u00aeX\2\u0919")
        buf.write("\u00d3\3\2\2\2\u091a\u091b\7z\2\2\u091b\u091c\7\u01ae")
        buf.write("\2\2\u091c\u0921\5\u00d6l\2\u091d\u091e\7\u01b0\2\2\u091e")
        buf.write("\u0920\5\u00d6l\2\u091f\u091d\3\2\2\2\u0920\u0923\3\2")
        buf.write("\2\2\u0921\u091f\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0924")
        buf.write("\3\2\2\2\u0923\u0921\3\2\2\2\u0924\u0925\7\u01af\2\2\u0925")
        buf.write("\u00d5\3\2\2\2\u0926\u0927\7\u0102\2\2\u0927\u0954\7\u0197")
        buf.write("\2\2\u0928\u0929\t)\2\2\u0929\u0954\7S\2\2\u092a\u092b")
        buf.write("\t*\2\2\u092b\u0954\7\u00b3\2\2\u092c\u092d\t+\2\2\u092d")
        buf.write("\u0954\7a\2\2\u092e\u092f\7\u0101\2\2\u092f\u0954\7\u018b")
        buf.write("\2\2\u0930\u0931\7\u0109\2\2\u0931\u0954\7|\2\2\u0932")
        buf.write("\u0954\7\u0116\2\2\u0933\u0934\7\u011e\2\2\u0934\u0954")
        buf.write("\7\u0082\2\2\u0935\u0936\7\u011f\2\2\u0936\u0954\7\u0082")
        buf.write("\2\2\u0937\u0938\7\u0129\2\2\u0938\u0954\7\u0197\2\2\u0939")
        buf.write("\u093a\7\u012a\2\2\u093a\u0954\7\u0197\2\2\u093b\u093c")
        buf.write("\7\u0145\2\2\u093c\u093d\7I\2\2\u093d\u093e\7\u01ae\2")
        buf.write("\2\u093e\u0943\5\u00d8m\2\u093f\u0940\7\u01b0\2\2\u0940")
        buf.write("\u0942\5\u00d8m\2\u0941\u093f\3\2\2\2\u0942\u0945\3\2")
        buf.write("\2\2\u0943\u0941\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u0946")
        buf.write("\3\2\2\2\u0945\u0943\3\2\2\2\u0946\u0947\7\u01af\2\2\u0947")
        buf.write("\u0954\3\2\2\2\u0948\u0949\7\u0145\2\2\u0949\u094a\7I")
        buf.write("\2\2\u094a\u0954\7\u0186\2\2\u094b\u094c\7\u014a\2\2\u094c")
        buf.write("\u0954\t\25\2\2\u094d\u0954\7\u0157\2\2\u094e\u094f\7")
        buf.write("\u015e\2\2\u094f\u0954\7\u0082\2\2\u0950\u0951\7\u00b8")
        buf.write("\2\2\u0951\u0952\7\u0082\2\2\u0952\u0954\7\u0199\2\2\u0953")
        buf.write("\u0926\3\2\2\2\u0953\u0928\3\2\2\2\u0953\u092a\3\2\2\2")
        buf.write("\u0953\u092c\3\2\2\2\u0953\u092e\3\2\2\2\u0953\u0930\3")
        buf.write("\2\2\2\u0953\u0932\3\2\2\2\u0953\u0933\3\2\2\2\u0953\u0935")
        buf.write("\3\2\2\2\u0953\u0937\3\2\2\2\u0953\u0939\3\2\2\2\u0953")
        buf.write("\u093b\3\2\2\2\u0953\u0948\3\2\2\2\u0953\u094b\3\2\2\2")
        buf.write("\u0953\u094d\3\2\2\2\u0953\u094e\3\2\2\2\u0953\u0950\3")
        buf.write("\2\2\2\u0954\u00d7\3\2\2\2\u0955\u0959\7\u0196\2\2\u0956")
        buf.write("\u095a\7\u0186\2\2\u0957\u0958\7\u019d\2\2\u0958\u095a")
        buf.write("\5\u0144\u00a3\2\u0959\u0956\3\2\2\2\u0959\u0957\3\2\2")
        buf.write("\2\u095a\u00d9\3\2\2\2\u095b\u0960\5\u00dco\2\u095c\u095d")
        buf.write("\7\u01b0\2\2\u095d\u095f\5\u00dco\2\u095e\u095c\3\2\2")
        buf.write("\2\u095f\u0962\3\2\2\2\u0960\u095e\3\2\2\2\u0960\u0961")
        buf.write("\3\2\2\2\u0961\u00db\3\2\2\2\u0962\u0960\3\2\2\2\u0963")
        buf.write("\u0964\5\u012a\u0096\2\u0964\u0965\7\u01a9\2\2\u0965\u0967")
        buf.write("\3\2\2\2\u0966\u0963\3\2\2\2\u0966\u0967\3\2\2\2\u0967")
        buf.write("\u096b\3\2\2\2\u0968\u096c\7\u01b3\2\2\u0969\u096a\7\u01ad")
        buf.write("\2\2\u096a\u096c\t,\2\2\u096b\u0968\3\2\2\2\u096b\u0969")
        buf.write("\3\2\2\2\u096c\u0979\3\2\2\2\u096d\u096e\5\u0106\u0084")
        buf.write("\2\u096e\u096f\7\u019d\2\2\u096f\u0970\5\u00aeX\2\u0970")
        buf.write("\u0979\3\2\2\2\u0971\u0976\5\u00aeX\2\u0972\u0974\7\t")
        buf.write("\2\2\u0973\u0972\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0975")
        buf.write("\3\2\2\2\u0975\u0977\5\u0106\u0084\2\u0976\u0973\3\2\2")
        buf.write("\2\u0976\u0977\3\2\2\2\u0977\u0979\3\2\2\2\u0978\u0966")
        buf.write("\3\2\2\2\u0978\u096d\3\2\2\2\u0978\u0971\3\2\2\2\u0979")
        buf.write("\u00dd\3\2\2\2\u097a\u097f\5\u00e0q\2\u097b\u097c\7\u01b0")
        buf.write("\2\2\u097c\u097e\5\u00e0q\2\u097d\u097b\3\2\2\2\u097e")
        buf.write("\u0981\3\2\2\2\u097f\u097d\3\2\2\2\u097f\u0980\3\2\2\2")
        buf.write("\u0980\u00df\3\2\2\2\u0981\u097f\3\2\2\2\u0982\u0988\5")
        buf.write("\u00e2r\2\u0983\u0984\7\u01ae\2\2\u0984\u0985\5\u00e2")
        buf.write("r\2\u0985\u0986\7\u01af\2\2\u0986\u0988\3\2\2\2\u0987")
        buf.write("\u0982\3\2\2\2\u0987\u0983\3\2\2\2\u0988\u00e1\3\2\2\2")
        buf.write("\u0989\u098d\5\u00e4s\2\u098a\u098c\5\u00e8u\2\u098b\u098a")
        buf.write("\3\2\2\2\u098c\u098f\3\2\2\2\u098d\u098b\3\2\2\2\u098d")
        buf.write("\u098e\3\2\2\2\u098e\u00e3\3\2\2\2\u098f\u098d\3\2\2\2")
        buf.write("\u0990\u0992\5\u00eav\2\u0991\u0993\5\u00f8}\2\u0992\u0991")
        buf.write("\3\2\2\2\u0992\u0993\3\2\2\2\u0993\u09b4\3\2\2\2\u0994")
        buf.write("\u0996\5\u00ecw\2\u0995\u0997\5\u00f8}\2\u0996\u0995\3")
        buf.write("\2\2\2\u0996\u0997\3\2\2\2\u0997\u09b4\3\2\2\2\u0998\u099d")
        buf.write("\5\u00f0y\2\u0999\u099b\5\u00f8}\2\u099a\u099c\5\u0104")
        buf.write("\u0083\2\u099b\u099a\3\2\2\2\u099b\u099c\3\2\2\2\u099c")
        buf.write("\u099e\3\2\2\2\u099d\u0999\3\2\2\2\u099d\u099e\3\2\2\2")
        buf.write("\u099e\u09b4\3\2\2\2\u099f\u09a0\5\u00e6t\2\u09a0\u09a1")
        buf.write("\5\u00f8}\2\u09a1\u09b4\3\2\2\2\u09a2\u09a4\5\u00f2z\2")
        buf.write("\u09a3\u09a5\5\u00f8}\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5")
        buf.write("\3\2\2\2\u09a5\u09b4\3\2\2\2\u09a6\u09a8\7\u0196\2\2\u09a7")
        buf.write("\u09a9\5\u00f8}\2\u09a8\u09a7\3\2\2\2\u09a8\u09a9\3\2")
        buf.write("\2\2\u09a9\u09b4\3\2\2\2\u09aa\u09ab\7\u0196\2\2\u09ab")
        buf.write("\u09ac\7\u01a9\2\2\u09ac\u09b1\5\u00f2z\2\u09ad\u09af")
        buf.write("\5\u00f8}\2\u09ae\u09b0\5\u0104\u0083\2\u09af\u09ae\3")
        buf.write("\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b2\3\2\2\2\u09b1\u09ad")
        buf.write("\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b4\3\2\2\2\u09b3")
        buf.write("\u0990\3\2\2\2\u09b3\u0994\3\2\2\2\u09b3\u0998\3\2\2\2")
        buf.write("\u09b3\u099f\3\2\2\2\u09b3\u09a2\3\2\2\2\u09b3\u09a6\3")
        buf.write("\2\2\2\u09b3\u09aa\3\2\2\2\u09b4\u00e5\3\2\2\2\u09b5\u09b6")
        buf.write("\7\25\2\2\u09b6\u09b7\7\u01ae\2\2\u09b7\u09b8\7\26\2\2")
        buf.write("\u09b8\u09b9\5\u012a\u0096\2\u09b9\u09ba\7\u01b0\2\2\u09ba")
        buf.write("\u09bb\t-\2\2\u09bb\u09bc\7\u01af\2\2\u09bc\u00e7\3\2")
        buf.write("\2\2\u09bd\u09bf\7[\2\2\u09be\u09bd\3\2\2\2\u09be\u09bf")
        buf.write("\3\2\2\2\u09bf\u09c5\3\2\2\2\u09c0\u09c2\t.\2\2\u09c1")
        buf.write("\u09c3\7}\2\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3\3\2\2\2")
        buf.write("\u09c3\u09c5\3\2\2\2\u09c4\u09be\3\2\2\2\u09c4\u09c0\3")
        buf.write("\2\2\2\u09c5\u09c7\3\2\2\2\u09c6\u09c8\t/\2\2\u09c7\u09c6")
        buf.write("\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9")
        buf.write("\u09ca\7a\2\2\u09ca\u09cb\5\u00e0q\2\u09cb\u09cc\7t\2")
        buf.write("\2\u09cc\u09cd\5\u00bc_\2\u09cd\u09d8\3\2\2\2\u09ce\u09cf")
        buf.write("\7\'\2\2\u09cf\u09d0\7a\2\2\u09d0\u09d8\5\u00e0q\2\u09d1")
        buf.write("\u09d2\7\'\2\2\u09d2\u09d3\7\u00cd\2\2\u09d3\u09d8\5\u00e0")
        buf.write("q\2\u09d4\u09d5\7}\2\2\u09d5\u09d6\7\u00cd\2\2\u09d6\u09d8")
        buf.write("\5\u00e0q\2\u09d7\u09c4\3\2\2\2\u09d7\u09ce\3\2\2\2\u09d7")
        buf.write("\u09d1\3\2\2\2\u09d7\u09d4\3\2\2\2\u09d8\u00e9\3\2\2\2")
        buf.write("\u09d9\u09db\5\u012a\u0096\2\u09da\u09dc\5\u00fc\177\2")
        buf.write("\u09db\u09da\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u00eb\3")
        buf.write("\2\2\2\u09dd\u09de\7x\2\2\u09de\u09df\7\u01ae\2\2\u09df")
        buf.write("\u09e0\7\u0199\2\2\u09e0\u09e1\7\u01b0\2\2\u09e1\u09e2")
        buf.write("\7\u0199\2\2\u09e2\u09e3\7\u01b0\2\2\u09e3\u09e4\7\u0199")
        buf.write("\2\2\u09e4\u09f8\7\u01af\2\2\u09e5\u09e6\7x\2\2\u09e6")
        buf.write("\u09e7\7\u01ae\2\2\u09e7\u09e8\7\21\2\2\u09e8\u09e9\7")
        buf.write("\u0199\2\2\u09e9\u09f3\7\u01b0\2\2\u09ea\u09ef\5\u00ee")
        buf.write("x\2\u09eb\u09ec\7\u01b0\2\2\u09ec\u09ee\5\u00eex\2\u09ed")
        buf.write("\u09eb\3\2\2\2\u09ee\u09f1\3\2\2\2\u09ef\u09ed\3\2\2\2")
        buf.write("\u09ef\u09f0\3\2\2\2\u09f0\u09f4\3\2\2\2\u09f1\u09ef\3")
        buf.write("\2\2\2\u09f2\u09f4\5\u0148\u00a5\2\u09f3\u09ea\3\2\2\2")
        buf.write("\u09f3\u09f2\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f6\7")
        buf.write("\u01af\2\2\u09f6\u09f8\3\2\2\2\u09f7\u09dd\3\2\2\2\u09f7")
        buf.write("\u09e5\3\2\2\2\u09f8\u00ed\3\2\2\2\u09f9\u09fa\5\u0148")
        buf.write("\u00a5\2\u09fa\u09fb\7\u019d\2\2\u09fb\u09fc\t\60\2\2")
        buf.write("\u09fc\u00ef\3\2\2\2\u09fd\u0a03\5\u00b2Z\2\u09fe\u09ff")
        buf.write("\7\u01ae\2\2\u09ff\u0a00\5\u00b2Z\2\u0a00\u0a01\7\u01af")
        buf.write("\2\2\u0a01\u0a03\3\2\2\2\u0a02\u09fd\3\2\2\2\u0a02\u09fe")
        buf.write("\3\2\2\2\u0a03\u00f1\3\2\2\2\u0a04\u0a66\5\u010c\u0087")
        buf.write("\2\u0a05\u0a66\5\u010e\u0088\2\u0a06\u0a07\5\u013e\u00a0")
        buf.write("\2\u0a07\u0a09\7\u01ae\2\2\u0a08\u0a0a\5\u010a\u0086\2")
        buf.write("\u0a09\u0a08\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0b\3")
        buf.write("\2\2\2\u0a0b\u0a0c\7\u01af\2\2\u0a0c\u0a66\3\2\2\2\u0a0d")
        buf.write("\u0a0e\7\u00d8\2\2\u0a0e\u0a0f\7\u01ae\2\2\u0a0f\u0a10")
        buf.write("\7\u01b3\2\2\u0a10\u0a66\7\u01af\2\2\u0a11\u0a12\7\u00db")
        buf.write("\2\2\u0a12\u0a13\7\u01ae\2\2\u0a13\u0a14\5\u00aeX\2\u0a14")
        buf.write("\u0a15\7\t\2\2\u0a15\u0a16\5\u0140\u00a1\2\u0a16\u0a17")
        buf.write("\7\u01af\2\2\u0a17\u0a66\3\2\2\2\u0a18\u0a19\7%\2\2\u0a19")
        buf.write("\u0a1a\7\u01ae\2\2\u0a1a\u0a1b\5\u0140\u00a1\2\u0a1b\u0a1c")
        buf.write("\7\u01b0\2\2\u0a1c\u0a1f\5\u00aeX\2\u0a1d\u0a1e\7\u01b0")
        buf.write("\2\2\u0a1e\u0a20\5\u00aeX\2\u0a1f\u0a1d\3\2\2\2\u0a1f")
        buf.write("\u0a20\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21\u0a22\7\u01af")
        buf.write("\2\2\u0a22\u0a66\3\2\2\2\u0a23\u0a24\7\u00df\2\2\u0a24")
        buf.write("\u0a25\7\u01ae\2\2\u0a25\u0a26\7\u01b3\2\2\u0a26\u0a66")
        buf.write("\7\u01af\2\2\u0a27\u0a28\7\33\2\2\u0a28\u0a29\7\u01ae")
        buf.write("\2\2\u0a29\u0a2a\5\u010a\u0086\2\u0a2a\u0a2b\7\u01af\2")
        buf.write("\2\u0a2b\u0a66\3\2\2\2\u0a2c\u0a66\7+\2\2\u0a2d\u0a66")
        buf.write("\7,\2\2\u0a2e\u0a2f\7\u00eb\2\2\u0a2f\u0a30\7\u01ae\2")
        buf.write("\2\u0a30\u0a31\7\u0198\2\2\u0a31\u0a32\7\u01b0\2\2\u0a32")
        buf.write("\u0a33\5\u00aeX\2\u0a33\u0a34\7\u01b0\2\2\u0a34\u0a35")
        buf.write("\5\u00aeX\2\u0a35\u0a36\7\u01af\2\2\u0a36\u0a66\3\2\2")
        buf.write("\2\u0a37\u0a38\7\u00ec\2\2\u0a38\u0a39\7\u01ae\2\2\u0a39")
        buf.write("\u0a3a\7\u0198\2\2\u0a3a\u0a3b\7\u01b0\2\2\u0a3b\u0a3c")
        buf.write("\5\u00aeX\2\u0a3c\u0a3d\7\u01b0\2\2\u0a3d\u0a3e\5\u00ae")
        buf.write("X\2\u0a3e\u0a3f\7\u01af\2\2\u0a3f\u0a66\3\2\2\2\u0a40")
        buf.write("\u0a41\7\u00ed\2\2\u0a41\u0a42\7\u01ae\2\2\u0a42\u0a43")
        buf.write("\7\u0198\2\2\u0a43\u0a44\7\u01b0\2\2\u0a44\u0a45\5\u00ae")
        buf.write("X\2\u0a45\u0a46\7\u01af\2\2\u0a46\u0a66\3\2\2\2\u0a47")
        buf.write("\u0a48\7\u00ee\2\2\u0a48\u0a49\7\u01ae\2\2\u0a49\u0a4a")
        buf.write("\7\u0198\2\2\u0a4a\u0a4b\7\u01b0\2\2\u0a4b\u0a4c\5\u00ae")
        buf.write("X\2\u0a4c\u0a4d\7\u01af\2\2\u0a4d\u0a66\3\2\2\2\u0a4e")
        buf.write("\u0a4f\7U\2\2\u0a4f\u0a50\7\u01ae\2\2\u0a50\u0a53\5\u0140")
        buf.write("\u00a1\2\u0a51\u0a52\7\u01b0\2\2\u0a52\u0a54\7\u0197\2")
        buf.write("\2\u0a53\u0a51\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a57")
        buf.write("\3\2\2\2\u0a55\u0a56\7\u01b0\2\2\u0a56\u0a58\7\u0197\2")
        buf.write("\2\u0a57\u0a55\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0a59")
        buf.write("\3\2\2\2\u0a59\u0a5a\7\u01af\2\2\u0a5a\u0a66\3\2\2\2\u0a5b")
        buf.write("\u0a66\7\u0130\2\2\u0a5c\u0a5d\7p\2\2\u0a5d\u0a5e\7\u01ae")
        buf.write("\2\2\u0a5e\u0a5f\5\u00aeX\2\u0a5f\u0a60\7\u01b0\2\2\u0a60")
        buf.write("\u0a61\5\u00aeX\2\u0a61\u0a62\7\u01af\2\2\u0a62\u0a66")
        buf.write("\3\2\2\2\u0a63\u0a66\7\u00a0\2\2\u0a64\u0a66\7\u00a6\2")
        buf.write("\2\u0a65\u0a04\3\2\2\2\u0a65\u0a05\3\2\2\2\u0a65\u0a06")
        buf.write("\3\2\2\2\u0a65\u0a0d\3\2\2\2\u0a65\u0a11\3\2\2\2\u0a65")
        buf.write("\u0a18\3\2\2\2\u0a65\u0a23\3\2\2\2\u0a65\u0a27\3\2\2\2")
        buf.write("\u0a65\u0a2c\3\2\2\2\u0a65\u0a2d\3\2\2\2\u0a65\u0a2e\3")
        buf.write("\2\2\2\u0a65\u0a37\3\2\2\2\u0a65\u0a40\3\2\2\2\u0a65\u0a47")
        buf.write("\3\2\2\2\u0a65\u0a4e\3\2\2\2\u0a65\u0a5b\3\2\2\2\u0a65")
        buf.write("\u0a5c\3\2\2\2\u0a65\u0a63\3\2\2\2\u0a65\u0a64\3\2\2\2")
        buf.write("\u0a66\u00f3\3\2\2\2\u0a67\u0a68\7\u00be\2\2\u0a68\u0a69")
        buf.write("\5\u00aeX\2\u0a69\u0a6a\7\u00aa\2\2\u0a6a\u0a6b\5\u00ae")
        buf.write("X\2\u0a6b\u00f5\3\2\2\2\u0a6c\u0a6d\7\u00be\2\2\u0a6d")
        buf.write("\u0a6e\5\u00bc_\2\u0a6e\u0a6f\7\u00aa\2\2\u0a6f\u0a70")
        buf.write("\5\u00aeX\2\u0a70\u00f7\3\2\2\2\u0a71\u0a73\7\t\2\2\u0a72")
        buf.write("\u0a71\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a74\3\2\2\2")
        buf.write("\u0a74\u0a75\5\u00fa~\2\u0a75\u00f9\3\2\2\2\u0a76\u0a78")
        buf.write("\5\u0148\u00a5\2\u0a77\u0a79\5\u00fc\177\2\u0a78\u0a77")
        buf.write("\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u00fb\3\2\2\2\u0a7a")
        buf.write("\u0a7c\7\u00c1\2\2\u0a7b\u0a7a\3\2\2\2\u0a7b\u0a7c\3\2")
        buf.write("\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a7e\7\u01ae\2\2\u0a7e")
        buf.write("\u0a83\5\u0100\u0081\2\u0a7f\u0a80\7\u01b0\2\2\u0a80\u0a82")
        buf.write("\5\u0100\u0081\2\u0a81\u0a7f\3\2\2\2\u0a82\u0a85\3\2\2")
        buf.write("\2\u0a83\u0a81\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u0a86")
        buf.write("\3\2\2\2\u0a85\u0a83\3\2\2\2\u0a86\u0a87\7\u01af\2\2\u0a87")
        buf.write("\u00fd\3\2\2\2\u0a88\u0a89\7\u00c1\2\2\u0a89\u0a8a\7\u01ae")
        buf.write("\2\2\u0a8a\u0a8f\5\u0100\u0081\2\u0a8b\u0a8c\7\u01b0\2")
        buf.write("\2\u0a8c\u0a8e\5\u0100\u0081\2\u0a8d\u0a8b\3\2\2\2\u0a8e")
        buf.write("\u0a91\3\2\2\2\u0a8f\u0a8d\3\2\2\2\u0a8f\u0a90\3\2\2\2")
        buf.write("\u0a90\u0a92\3\2\2\2\u0a91\u0a8f\3\2\2\2\u0a92\u0a93\7")
        buf.write("\u01af\2\2\u0a93\u00ff\3\2\2\2\u0a94\u0a96\7\u0139\2\2")
        buf.write("\u0a95\u0a94\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96\u0abd\3")
        buf.write("\2\2\2\u0a97\u0a98\7Z\2\2\u0a98\u0a99\7\u01ae\2\2\u0a99")
        buf.write("\u0a9e\5\u0102\u0082\2\u0a9a\u0a9b\7\u01b0\2\2\u0a9b\u0a9d")
        buf.write("\5\u0102\u0082\2\u0a9c\u0a9a\3\2\2\2\u0a9d\u0aa0\3\2\2")
        buf.write("\2\u0a9e\u0a9c\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa1")
        buf.write("\3\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa1\u0aa2\7\u01af\2\2\u0aa2")
        buf.write("\u0abe\3\2\2\2\u0aa3\u0aa4\7Z\2\2\u0aa4\u0aa5\7\u019d")
        buf.write("\2\2\u0aa5\u0abe\5\u0102\u0082\2\u0aa6\u0ab5\7J\2\2\u0aa7")
        buf.write("\u0aa8\7\u01ae\2\2\u0aa8\u0aa9\5\u0102\u0082\2\u0aa9\u0aaa")
        buf.write("\7\u01ae\2\2\u0aaa\u0aaf\7\u0198\2\2\u0aab\u0aac\7\u01b0")
        buf.write("\2\2\u0aac\u0aae\7\u0198\2\2\u0aad\u0aab\3\2\2\2\u0aae")
        buf.write("\u0ab1\3\2\2\2\u0aaf\u0aad\3\2\2\2\u0aaf\u0ab0\3\2\2\2")
        buf.write("\u0ab0\u0ab2\3\2\2\2\u0ab1\u0aaf\3\2\2\2\u0ab2\u0ab3\7")
        buf.write("\u01af\2\2\u0ab3\u0ab4\7\u01af\2\2\u0ab4\u0ab6\3\2\2\2")
        buf.write("\u0ab5\u0aa7\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0abe\3")
        buf.write("\2\2\2\u0ab7\u0abe\7\u016a\2\2\u0ab8\u0abe\7\u016f\2\2")
        buf.write("\u0ab9\u0aba\7\u0170\2\2\u0aba\u0abb\7\u019d\2\2\u0abb")
        buf.write("\u0abe\7\u0197\2\2\u0abc\u0abe\7\u0198\2\2\u0abd\u0a97")
        buf.write("\3\2\2\2\u0abd\u0aa3\3\2\2\2\u0abd\u0aa6\3\2\2\2\u0abd")
        buf.write("\u0ab7\3\2\2\2\u0abd\u0ab8\3\2\2\2\u0abd\u0ab9\3\2\2\2")
        buf.write("\u0abd\u0abc\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0101\3")
        buf.write("\2\2\2\u0abf\u0ac2\5\u0148\u00a5\2\u0ac0\u0ac2\7\u0197")
        buf.write("\2\2\u0ac1\u0abf\3\2\2\2\u0ac1\u0ac0\3\2\2\2\u0ac2\u0103")
        buf.write("\3\2\2\2\u0ac3\u0ac4\7\u01ae\2\2\u0ac4\u0ac9\5\u0106\u0084")
        buf.write("\2\u0ac5\u0ac6\7\u01b0\2\2\u0ac6\u0ac8\5\u0106\u0084\2")
        buf.write("\u0ac7\u0ac5\3\2\2\2\u0ac8\u0acb\3\2\2\2\u0ac9\u0ac7\3")
        buf.write("\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca\u0acc\3\2\2\2\u0acb\u0ac9")
        buf.write("\3\2\2\2\u0acc\u0acd\7\u01af\2\2\u0acd\u0105\3\2\2\2\u0ace")
        buf.write("\u0ad1\5\u0148\u00a5\2\u0acf\u0ad1\7\u0199\2\2\u0ad0\u0ace")
        buf.write("\3\2\2\2\u0ad0\u0acf\3\2\2\2\u0ad1\u0107\3\2\2\2\u0ad2")
        buf.write("\u0ad3\7\u00ba\2\2\u0ad3\u0ad4\7\u01ae\2\2\u0ad4\u0ad5")
        buf.write("\5\u010a\u0086\2\u0ad5\u0add\7\u01af\2\2\u0ad6\u0ad7\7")
        buf.write("\u01b0\2\2\u0ad7\u0ad8\7\u01ae\2\2\u0ad8\u0ad9\5\u010a")
        buf.write("\u0086\2\u0ad9\u0ada\7\u01af\2\2\u0ada\u0adc\3\2\2\2\u0adb")
        buf.write("\u0ad6\3\2\2\2\u0adc\u0adf\3\2\2\2\u0add\u0adb\3\2\2\2")
        buf.write("\u0add\u0ade\3\2\2\2\u0ade\u0109\3\2\2\2\u0adf\u0add\3")
        buf.write("\2\2\2\u0ae0\u0ae5\5\u00aeX\2\u0ae1\u0ae2\7\u01b0\2\2")
        buf.write("\u0ae2\u0ae4\5\u00aeX\2\u0ae3\u0ae1\3\2\2\2\u0ae4\u0ae7")
        buf.write("\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6")
        buf.write("\u010b\3\2\2\2\u0ae7\u0ae5\3\2\2\2\u0ae8\u0ae9\t\61\2")
        buf.write("\2\u0ae9\u0aea\7\u01ae\2\2\u0aea\u0aeb\7\u01af\2\2\u0aeb")
        buf.write("\u0af3\5\u0112\u008a\2\u0aec\u0aed\7\u013d\2\2\u0aed\u0aee")
        buf.write("\7\u01ae\2\2\u0aee\u0aef\5\u00aeX\2\u0aef\u0af0\7\u01af")
        buf.write("\2\2\u0af0\u0af1\5\u0112\u008a\2\u0af1\u0af3\3\2\2\2\u0af2")
        buf.write("\u0ae8\3\2\2\2\u0af2\u0aec\3\2\2\2\u0af3\u010d\3\2\2\2")
        buf.write("\u0af4\u0af5\t\62\2\2\u0af5\u0af6\7\u01ae\2\2\u0af6\u0af7")
        buf.write("\5\u0110\u0089\2\u0af7\u0af9\7\u01af\2\2\u0af8\u0afa\5")
        buf.write("\u0112\u008a\2\u0af9\u0af8\3\2\2\2\u0af9\u0afa\3\2\2\2")
        buf.write("\u0afa\u0b15\3\2\2\2\u0afb\u0afc\t\63\2\2\u0afc\u0aff")
        buf.write("\7\u01ae\2\2\u0afd\u0b00\7\u01b3\2\2\u0afe\u0b00\5\u0110")
        buf.write("\u0089\2\u0aff\u0afd\3\2\2\2\u0aff\u0afe\3\2\2\2\u0b00")
        buf.write("\u0b01\3\2\2\2\u0b01\u0b03\7\u01af\2\2\u0b02\u0b04\5\u0112")
        buf.write("\u008a\2\u0b03\u0b02\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04")
        buf.write("\u0b15\3\2\2\2\u0b05\u0b06\7\u00e0\2\2\u0b06\u0b07\7\u01ae")
        buf.write("\2\2\u0b07\u0b08\5\u0110\u0089\2\u0b08\u0b09\7\u01af\2")
        buf.write("\2\u0b09\u0b15\3\2\2\2\u0b0a\u0b0b\7\u0110\2\2\u0b0b\u0b0c")
        buf.write("\7\u01ae\2\2\u0b0c\u0b0d\5\u00aeX\2\u0b0d\u0b0e\7\u01af")
        buf.write("\2\2\u0b0e\u0b15\3\2\2\2\u0b0f\u0b10\7\u0111\2\2\u0b10")
        buf.write("\u0b11\7\u01ae\2\2\u0b11\u0b12\5\u010a\u0086\2\u0b12\u0b13")
        buf.write("\7\u01af\2\2\u0b13\u0b15\3\2\2\2\u0b14\u0af4\3\2\2\2\u0b14")
        buf.write("\u0afb\3\2\2\2\u0b14\u0b05\3\2\2\2\u0b14\u0b0a\3\2\2\2")
        buf.write("\u0b14\u0b0f\3\2\2\2\u0b15\u010f\3\2\2\2\u0b16\u0b18\t")
        buf.write("&\2\2\u0b17\u0b16\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b19")
        buf.write("\3\2\2\2\u0b19\u0b1a\5\u00aeX\2\u0b1a\u0111\3\2\2\2\u0b1b")
        buf.write("\u0b1c\7~\2\2\u0b1c\u0b20\7\u01ae\2\2\u0b1d\u0b1e\7\u014b")
        buf.write("\2\2\u0b1e\u0b1f\7\22\2\2\u0b1f\u0b21\5\u010a\u0086\2")
        buf.write("\u0b20\u0b1d\3\2\2\2\u0b20\u0b21\3\2\2\2\u0b21\u0b23\3")
        buf.write("\2\2\2\u0b22\u0b24\5\u00caf\2\u0b23\u0b22\3\2\2\2\u0b23")
        buf.write("\u0b24\3\2\2\2\u0b24\u0b26\3\2\2\2\u0b25\u0b27\5\u0114")
        buf.write("\u008b\2\u0b26\u0b25\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27")
        buf.write("\u0b28\3\2\2\2\u0b28\u0b29\7\u01af\2\2\u0b29\u0113\3\2")
        buf.write("\2\2\u0b2a\u0b2b\t\64\2\2\u0b2b\u0b2c\5\u0116\u008c\2")
        buf.write("\u0b2c\u0115\3\2\2\2\u0b2d\u0b34\5\u011a\u008e\2\u0b2e")
        buf.write("\u0b2f\7\16\2\2\u0b2f\u0b30\5\u0118\u008d\2\u0b30\u0b31")
        buf.write("\7\7\2\2\u0b31\u0b32\5\u0118\u008d\2\u0b32\u0b34\3\2\2")
        buf.write("\2\u0b33\u0b2d\3\2\2\2\u0b33\u0b2e\3\2\2\2\u0b34\u0117")
        buf.write("\3\2\2\2\u0b35\u0b38\5\u011a\u008e\2\u0b36\u0b38\5\u011c")
        buf.write("\u008f\2\u0b37\u0b35\3\2\2\2\u0b37\u0b36\3\2\2\2\u0b38")
        buf.write("\u0119\3\2\2\2\u0b39\u0b3a\7\u0184\2\2\u0b3a\u0b40\7\u014d")
        buf.write("\2\2\u0b3b\u0b3c\7\u0197\2\2\u0b3c\u0b40\7\u014d\2\2\u0b3d")
        buf.write("\u0b3e\7(\2\2\u0b3e\u0b40\7\u0160\2\2\u0b3f\u0b39\3\2")
        buf.write("\2\2\u0b3f\u0b3b\3\2\2\2\u0b3f\u0b3d\3\2\2\2\u0b40\u011b")
        buf.write("\3\2\2\2\u0b41\u0b42\7\u0184\2\2\u0b42\u0b46\7\u0108\2")
        buf.write("\2\u0b43\u0b44\7\u0197\2\2\u0b44\u0b46\7\u0108\2\2\u0b45")
        buf.write("\u0b41\3\2\2\2\u0b45\u0b43\3\2\2\2\u0b46\u011d\3\2\2\2")
        buf.write("\u0b47\u0b48\7\u0106\2\2\u0b48\u0b4d\5\u0120\u0091\2\u0b49")
        buf.write("\u0b4a\7\u01b0\2\2\u0b4a\u0b4c\5\u0120\u0091\2\u0b4b\u0b49")
        buf.write("\3\2\2\2\u0b4c\u0b4f\3\2\2\2\u0b4d\u0b4b\3\2\2\2\u0b4d")
        buf.write("\u0b4e\3\2\2\2\u0b4e\u0b6a\3\2\2\2\u0b4f\u0b4d\3\2\2\2")
        buf.write("\u0b50\u0b51\7\u00f3\2\2\u0b51\u0b54\7\u019d\2\2\u0b52")
        buf.write("\u0b55\5\u0148\u00a5\2\u0b53\u0b55\7\u0199\2\2\u0b54\u0b52")
        buf.write("\3\2\2\2\u0b54\u0b53\3\2\2\2\u0b55\u0b6a\3\2\2\2\u0b56")
        buf.write("\u0b57\7\u00f2\2\2\u0b57\u0b5a\7\u019d\2\2\u0b58\u0b5b")
        buf.write("\5\u0148\u00a5\2\u0b59\u0b5b\7\u0199\2\2\u0b5a\u0b58\3")
        buf.write("\2\2\2\u0b5a\u0b59\3\2\2\2\u0b5b\u0b6a\3\2\2\2\u0b5c\u0b5d")
        buf.write("\7\u0135\2\2\u0b5d\u0b5e\7\u019d\2\2\u0b5e\u0b6a\t\16")
        buf.write("\2\2\u0b5f\u0b60\7\u017e\2\2\u0b60\u0b61\7\u019d\2\2\u0b61")
        buf.write("\u0b6a\t\16\2\2\u0b62\u0b63\7\u0181\2\2\u0b63\u0b64\7")
        buf.write("\u019d\2\2\u0b64\u0b6a\7\u0197\2\2\u0b65\u0b66\7\u00f1")
        buf.write("\2\2\u0b66\u0b6a\t\16\2\2\u0b67\u0b68\7\u017f\2\2\u0b68")
        buf.write("\u0b6a\t\16\2\2\u0b69\u0b47\3\2\2\2\u0b69\u0b50\3\2\2")
        buf.write("\2\u0b69\u0b56\3\2\2\2\u0b69\u0b5c\3\2\2\2\u0b69\u0b5f")
        buf.write("\3\2\2\2\u0b69\u0b62\3\2\2\2\u0b69\u0b65\3\2\2\2\u0b69")
        buf.write("\u0b67\3\2\2\2\u0b6a\u011f\3\2\2\2\u0b6b\u0b72\7\u01ae")
        buf.write("\2\2\u0b6c\u0b6d\7\u013a\2\2\u0b6d\u0b6e\7\u019d\2\2\u0b6e")
        buf.write("\u0b73\t\65\2\2\u0b6f\u0b70\7\u00f8\2\2\u0b70\u0b71\7")
        buf.write("\u019d\2\2\u0b71\u0b73\7\u0199\2\2\u0b72\u0b6c\3\2\2\2")
        buf.write("\u0b72\u0b6f\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b75\7")
        buf.write("\u01af\2\2\u0b75\u0121\3\2\2\2\u0b76\u0b79\5\u0124\u0093")
        buf.write("\2\u0b77\u0b79\5\u0126\u0094\2\u0b78\u0b76\3\2\2\2\u0b78")
        buf.write("\u0b77\3\2\2\2\u0b79\u0123\3\2\2\2\u0b7a\u0b7b\7\u0104")
        buf.write("\2\2\u0b7b\u0b7e\5\u0148\u00a5\2\u0b7c\u0b7d\7\"\2\2\u0b7d")
        buf.write("\u0b7f\7\u0106\2\2\u0b7e\u0b7c\3\2\2\2\u0b7e\u0b7f\3\2")
        buf.write("\2\2\u0b7f\u0b81\3\2\2\2\u0b80\u0b82\7\62\2\2\u0b81\u0b80")
        buf.write("\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b85\3\2\2\2\u0b83")
        buf.write("\u0b84\7\"\2\2\u0b84\u0b86\7\u012d\2\2\u0b85\u0b83\3\2")
        buf.write("\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b8c")
        buf.write("\5\u0126\u0094\2\u0b88\u0b89\7\u01b0\2\2\u0b89\u0b8b\5")
        buf.write("\u0126\u0094\2\u0b8a\u0b88\3\2\2\2\u0b8b\u0b8e\3\2\2\2")
        buf.write("\u0b8c\u0b8a\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0125\3")
        buf.write("\2\2\2\u0b8e\u0b8c\3\2\2\2\u0b8f\u0b90\7\u01ae\2\2\u0b90")
        buf.write("\u0b91\7\u0134\2\2\u0b91\u0b94\7\u019d\2\2\u0b92\u0b95")
        buf.write("\5\u0148\u00a5\2\u0b93\u0b95\7\u0199\2\2\u0b94\u0b92\3")
        buf.write("\2\2\2\u0b94\u0b93\3\2\2\2\u0b95\u0b97\3\2\2\2\u0b96\u0b98")
        buf.write("\7\u01b0\2\2\u0b97\u0b96\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98")
        buf.write("\u0b99\3\2\2\2\u0b99\u0b9a\7G\2\2\u0b9a\u0b9b\7\u019d")
        buf.write("\2\2\u0b9b\u0b9d\7\u0199\2\2\u0b9c\u0b9e\7\u01b0\2\2\u0b9d")
        buf.write("\u0b9c\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0ba5\3\2\2\2")
        buf.write("\u0b9f\u0ba0\7\u016e\2\2\u0ba0\u0ba1\7\u019d\2\2\u0ba1")
        buf.write("\u0ba3\5\u0150\u00a9\2\u0ba2\u0ba4\7\u01b0\2\2\u0ba3\u0ba2")
        buf.write("\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba6\3\2\2\2\u0ba5")
        buf.write("\u0b9f\3\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u0bb0\3\2\2\2")
        buf.write("\u0ba7\u0ba8\7\u012b\2\2\u0ba8\u0bab\7\u019d\2\2\u0ba9")
        buf.write("\u0bac\5\u0150\u00a9\2\u0baa\u0bac\7\u0187\2\2\u0bab\u0ba9")
        buf.write("\3\2\2\2\u0bab\u0baa\3\2\2\2\u0bac\u0bae\3\2\2\2\u0bad")
        buf.write("\u0baf\7\u01b0\2\2\u0bae\u0bad\3\2\2\2\u0bae\u0baf\3\2")
        buf.write("\2\2\u0baf\u0bb1\3\2\2\2\u0bb0\u0ba7\3\2\2\2\u0bb0\u0bb1")
        buf.write("\3\2\2\2\u0bb1\u0bb8\3\2\2\2\u0bb2\u0bb3\7\u0105\2\2\u0bb3")
        buf.write("\u0bb4\7\u019d\2\2\u0bb4\u0bb6\5\u0150\u00a9\2\u0bb5\u0bb7")
        buf.write("\7\u01b0\2\2\u0bb6\u0bb5\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7")
        buf.write("\u0bb9\3\2\2\2\u0bb8\u0bb2\3\2\2\2\u0bb8\u0bb9\3\2\2\2")
        buf.write("\u0bb9\u0bba\3\2\2\2\u0bba\u0bbb\7\u01af\2\2\u0bbb\u0127")
        buf.write("\3\2\2\2\u0bbc\u0bbd\5\u0148\u00a5\2\u0bbd\u0bbe\7\u01a9")
        buf.write("\2\2\u0bbe\u0bbf\5\u0148\u00a5\2\u0bbf\u0bc0\7\u01a9\2")
        buf.write("\2\u0bc0\u0bc1\5\u0148\u00a5\2\u0bc1\u0bc2\7\u01a9\2\2")
        buf.write("\u0bc2\u0bce\3\2\2\2\u0bc3\u0bc4\5\u0148\u00a5\2\u0bc4")
        buf.write("\u0bc6\7\u01a9\2\2\u0bc5\u0bc7\5\u0148\u00a5\2\u0bc6\u0bc5")
        buf.write("\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8")
        buf.write("\u0bc9\7\u01a9\2\2\u0bc9\u0bce\3\2\2\2\u0bca\u0bcb\5\u0148")
        buf.write("\u00a5\2\u0bcb\u0bcc\7\u01a9\2\2\u0bcc\u0bce\3\2\2\2\u0bcd")
        buf.write("\u0bbc\3\2\2\2\u0bcd\u0bc3\3\2\2\2\u0bcd\u0bca\3\2\2\2")
        buf.write("\u0bcd\u0bce\3\2\2\2\u0bce\u0bcf\3\2\2\2\u0bcf\u0bd0\5")
        buf.write("\u0148\u00a5\2\u0bd0\u0129\3\2\2\2\u0bd1\u0bd2\5\u0148")
        buf.write("\u00a5\2\u0bd2\u0bd4\7\u01a9\2\2\u0bd3\u0bd5\5\u0148\u00a5")
        buf.write("\2\u0bd4\u0bd3\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd6")
        buf.write("\3\2\2\2\u0bd6\u0bd7\7\u01a9\2\2\u0bd7\u0bdc\3\2\2\2\u0bd8")
        buf.write("\u0bd9\5\u0148\u00a5\2\u0bd9\u0bda\7\u01a9\2\2\u0bda\u0bdc")
        buf.write("\3\2\2\2\u0bdb\u0bd1\3\2\2\2\u0bdb\u0bd8\3\2\2\2\u0bdb")
        buf.write("\u0bdc\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0bde\5\u0148")
        buf.write("\u00a5\2\u0bde\u012b\3\2\2\2\u0bdf\u0be0\5\u0148\u00a5")
        buf.write("\2\u0be0\u0be1\7\u01a9\2\2\u0be1\u0be3\3\2\2\2\u0be2\u0bdf")
        buf.write("\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4")
        buf.write("\u0be5\5\u0148\u00a5\2\u0be5\u012d\3\2\2\2\u0be6\u0be7")
        buf.write("\5\u0148\u00a5\2\u0be7\u0be9\7\u01a9\2\2\u0be8\u0bea\5")
        buf.write("\u0148\u00a5\2\u0be9\u0be8\3\2\2\2\u0be9\u0bea\3\2\2\2")
        buf.write("\u0bea\u0beb\3\2\2\2\u0beb\u0bec\7\u01a9\2\2\u0bec\u0bf1")
        buf.write("\3\2\2\2\u0bed\u0bee\5\u0148\u00a5\2\u0bee\u0bef\7\u01a9")
        buf.write("\2\2\u0bef\u0bf1\3\2\2\2\u0bf0\u0be6\3\2\2\2\u0bf0\u0bed")
        buf.write("\3\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2")
        buf.write("\u0bf3\5\u0148\u00a5\2\u0bf3\u012f\3\2\2\2\u0bf4\u0bf7")
        buf.write("\5\u0128\u0095\2\u0bf5\u0bf7\7\u0196\2\2\u0bf6\u0bf4\3")
        buf.write("\2\2\2\u0bf6\u0bf5\3\2\2\2\u0bf7\u0131\3\2\2\2\u0bf8\u0bf9")
        buf.write("\5\u012a\u0096\2\u0bf9\u0bfa\7\u01a9\2\2\u0bfa\u0bfc\3")
        buf.write("\2\2\2\u0bfb\u0bf8\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfd")
        buf.write("\3\2\2\2\u0bfd\u0bfe\5\u0148\u00a5\2\u0bfe\u0133\3\2\2")
        buf.write("\2\u0bff\u0c04\5\u0148\u00a5\2\u0c00\u0c01\7\u01b0\2\2")
        buf.write("\u0c01\u0c03\5\u0148\u00a5\2\u0c02\u0c00\3\2\2\2\u0c03")
        buf.write("\u0c06\3\2\2\2\u0c04\u0c02\3\2\2\2\u0c04\u0c05\3\2\2\2")
        buf.write("\u0c05\u0135\3\2\2\2\u0c06\u0c04\3\2\2\2\u0c07\u0c0a\5")
        buf.write("\u0148\u00a5\2\u0c08\u0c0a\7\u0196\2\2\u0c09\u0c07\3\2")
        buf.write("\2\2\u0c09\u0c08\3\2\2\2\u0c0a\u0137\3\2\2\2\u0c0b\u0c0c")
        buf.write("\t\16\2\2\u0c0c\u0139\3\2\2\2\u0c0d\u0c0e\t\66\2\2\u0c0e")
        buf.write("\u013b\3\2\2\2\u0c0f\u0c11\7n\2\2\u0c10\u0c0f\3\2\2\2")
        buf.write("\u0c10\u0c11\3\2\2\2\u0c11\u0c12\3\2\2\2\u0c12\u0c13\7")
        buf.write("o\2\2\u0c13\u013d\3\2\2\2\u0c14\u0c1a\5\u012e\u0098\2")
        buf.write("\u0c15\u0c1a\7\u0094\2\2\u0c16\u0c1a\7d\2\2\u0c17\u0c1a")
        buf.write("\7\u00d8\2\2\u0c18\u0c1a\7\u00df\2\2\u0c19\u0c14\3\2\2")
        buf.write("\2\u0c19\u0c15\3\2\2\2\u0c19\u0c16\3\2\2\2\u0c19\u0c17")
        buf.write("\3\2\2\2\u0c19\u0c18\3\2\2\2\u0c1a\u013f\3\2\2\2\u0c1b")
        buf.write("\u0c1d\5\u0148\u00a5\2\u0c1c\u0c1e\7U\2\2\u0c1d\u0c1c")
        buf.write("\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c26\3\2\2\2\u0c1f")
        buf.write("\u0c20\7\u01ae\2\2\u0c20\u0c23\t\67\2\2\u0c21\u0c22\7")
        buf.write("\u01b0\2\2\u0c22\u0c24\7\u0197\2\2\u0c23\u0c21\3\2\2\2")
        buf.write("\u0c23\u0c24\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c27\7")
        buf.write("\u01af\2\2\u0c26\u0c1f\3\2\2\2\u0c26\u0c27\3\2\2\2\u0c27")
        buf.write("\u0141\3\2\2\2\u0c28\u0c2b\7o\2\2\u0c29\u0c2b\5\u0144")
        buf.write("\u00a3\2\u0c2a\u0c28\3\2\2\2\u0c2a\u0c29\3\2\2\2\u0c2b")
        buf.write("\u0143\3\2\2\2\u0c2c\u0c3c\7\u0199\2\2\u0c2d\u0c3c\7\u019a")
        buf.write("\2\2\u0c2e\u0c30\5\u0146\u00a4\2\u0c2f\u0c2e\3\2\2\2\u0c2f")
        buf.write("\u0c30\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c3c\7\u0197")
        buf.write("\2\2\u0c32\u0c34\5\u0146\u00a4\2\u0c33\u0c32\3\2\2\2\u0c33")
        buf.write("\u0c34\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c3c\t8\2\2")
        buf.write("\u0c36\u0c38\5\u0146\u00a4\2\u0c37\u0c36\3\2\2\2\u0c37")
        buf.write("\u0c38\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0c3a\7\u01ad")
        buf.write("\2\2\u0c3a\u0c3c\t9\2\2\u0c3b\u0c2c\3\2\2\2\u0c3b\u0c2d")
        buf.write("\3\2\2\2\u0c3b\u0c2f\3\2\2\2\u0c3b\u0c33\3\2\2\2\u0c3b")
        buf.write("\u0c37\3\2\2\2\u0c3c\u0145\3\2\2\2\u0c3d\u0c3e\t\"\2\2")
        buf.write("\u0c3e\u0147\3\2\2\2\u0c3f\u0c43\5\u014a\u00a6\2\u0c40")
        buf.write("\u0c43\7\u0194\2\2\u0c41\u0c43\7\u0195\2\2\u0c42\u0c3f")
        buf.write("\3\2\2\2\u0c42\u0c40\3\2\2\2\u0c42\u0c41\3\2\2\2\u0c43")
        buf.write("\u0149\3\2\2\2\u0c44\u0c45\t:\2\2\u0c45\u014b\3\2\2\2")
        buf.write("\u0c46\u0c56\7\u019d\2\2\u0c47\u0c56\7\u019e\2\2\u0c48")
        buf.write("\u0c56\7\u019f\2\2\u0c49\u0c4a\7\u019f\2\2\u0c4a\u0c56")
        buf.write("\7\u019d\2\2\u0c4b\u0c4c\7\u019e\2\2\u0c4c\u0c56\7\u019d")
        buf.write("\2\2\u0c4d\u0c4e\7\u019f\2\2\u0c4e\u0c56\7\u019e\2\2\u0c4f")
        buf.write("\u0c50\7\u01a0\2\2\u0c50\u0c56\7\u019d\2\2\u0c51\u0c52")
        buf.write("\7\u01a0\2\2\u0c52\u0c56\7\u019e\2\2\u0c53\u0c54\7\u01a0")
        buf.write("\2\2\u0c54\u0c56\7\u019f\2\2\u0c55\u0c46\3\2\2\2\u0c55")
        buf.write("\u0c47\3\2\2\2\u0c55\u0c48\3\2\2\2\u0c55\u0c49\3\2\2\2")
        buf.write("\u0c55\u0c4b\3\2\2\2\u0c55\u0c4d\3\2\2\2\u0c55\u0c4f\3")
        buf.write("\2\2\2\u0c55\u0c51\3\2\2\2\u0c55\u0c53\3\2\2\2\u0c56\u014d")
        buf.write("\3\2\2\2\u0c57\u0c58\t;\2\2\u0c58\u014f\3\2\2\2\u0c59")
        buf.write("\u0c5b\7\u0197\2\2\u0c5a\u0c5c\t<\2\2\u0c5b\u0c5a\3\2")
        buf.write("\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u0151\3\2\2\2\u01d4\u0155")
        buf.write("\u0159\u015e\u0164\u0168\u016e\u0174\u0186\u018a\u018d")
        buf.write("\u0191\u0195\u0199\u019e\u01a3\u01aa\u01ad\u01b1\u01b4")
        buf.write("\u01bc\u01bf\u01c4\u01c7\u01cc\u01d1\u01d4\u01d9\u01df")
        buf.write("\u01e6\u01ea\u01ec\u01f1\u01fe\u0203\u0205\u020e\u0211")
        buf.write("\u0219\u021b\u021e\u0222\u0225\u0229\u0230\u0234\u0236")
        buf.write("\u0238\u023b\u023e\u0241\u0247\u024a\u0252\u0254\u0257")
        buf.write("\u025b\u025e\u0264\u0267\u026b\u026e\u0271\u0278\u027b")
        buf.write("\u027f\u0282\u0285\u0288\u028b\u0293\u0295\u0299\u029c")
        buf.write("\u02a4\u02a8\u02ac\u02b3\u02b7\u02b9\u02bb\u02be\u02c1")
        buf.write("\u02c4\u02cc\u02d2\u02d8\u02da\u02de\u02e1\u02e4\u02e9")
        buf.write("\u02ee\u02f1\u02f9\u02fd\u0304\u0307\u0310\u0313\u0317")
        buf.write("\u031f\u0322\u0326\u0329\u0332\u0336\u033a\u033d\u0347")
        buf.write("\u0349\u034f\u0354\u0359\u0362\u0369\u036c\u0373\u0377")
        buf.write("\u0379\u0381\u0384\u0388\u0391\u0394\u0398\u039c\u039f")
        buf.write("\u03a4\u03b4\u03b8\u03be\u03c0\u03c3\u03cb\u03d1\u03d6")
        buf.write("\u03d9\u03e2\u03ea\u03ed\u03f4\u03f7\u041c\u041f\u0425")
        buf.write("\u0431\u0433\u0436\u044e\u0459\u0461\u046c\u0471\u0474")
        buf.write("\u047c\u0486\u04a0\u04a6\u04b1\u04bf\u04c7\u04ce\u04e5")
        buf.write("\u04f2\u04f8\u04fd\u0500\u0506\u050a\u0511\u051a\u051e")
        buf.write("\u0524\u052b\u052f\u053c\u0542\u0553\u0557\u055f\u0563")
        buf.write("\u056b\u056f\u0571\u0575\u0579\u057d\u0581\u0587\u058b")
        buf.write("\u058d\u0592\u059a\u059d\u05a0\u05a9\u05ae\u05b3\u05b6")
        buf.write("\u05b8\u05bc\u05c0\u05c3\u05c7\u05cd\u05d2\u05d9\u05db")
        buf.write("\u05df\u05e6\u05ea\u05ed\u05f6\u05f9\u05fb\u0604\u060f")
        buf.write("\u0613\u0615\u0617\u061d\u0622\u0629\u0636\u0638\u063a")
        buf.write("\u063d\u0640\u0647\u064a\u0650\u0655\u0657\u065a\u0660")
        buf.write("\u0668\u066a\u066d\u0671\u0674\u067a\u067d\u0681\u0684")
        buf.write("\u068a\u068d\u068f\u0693\u0698\u06a0\u06a5\u06ae\u06b3")
        buf.write("\u06b8\u06be\u06c2\u06c5\u06c9\u06cf\u06d7\u06dc\u06de")
        buf.write("\u06e1\u06e6\u06eb\u06ee\u06f3\u06f6\u06f9\u06ff\u0705")
        buf.write("\u0709\u070e\u0711\u0716\u071a\u071e\u0724\u072a\u0733")
        buf.write("\u073d\u0747\u0749\u074b\u074e\u0751\u075c\u075e\u0760")
        buf.write("\u0763\u0766\u0769\u076c\u076f\u0772\u077e\u0781\u0784")
        buf.write("\u078d\u0790\u0793\u079a\u079d\u07ab\u07ae\u07b5\u07c0")
        buf.write("\u07c4\u07d5\u07d9\u07e1\u07e5\u07f3\u0802\u0804\u080f")
        buf.write("\u0816\u081d\u0825\u082e\u0832\u083c\u0843\u084b\u0853")
        buf.write("\u0857\u086d\u0876\u087c\u0882\u0888\u0893\u089a\u089f")
        buf.write("\u08a4\u08a8\u08b1\u08b3\u08b7\u08bc\u08c0\u08c2\u08c7")
        buf.write("\u08cb\u08cf\u08d8\u08db\u08df\u08e8\u08f4\u08f6\u08fe")
        buf.write("\u0906\u0909\u090b\u0912\u0916\u0921\u0943\u0953\u0959")
        buf.write("\u0960\u0966\u096b\u0973\u0976\u0978\u097f\u0987\u098d")
        buf.write("\u0992\u0996\u099b\u099d\u09a4\u09a8\u09af\u09b1\u09b3")
        buf.write("\u09be\u09c2\u09c4\u09c7\u09d7\u09db\u09ef\u09f3\u09f7")
        buf.write("\u0a02\u0a09\u0a1f\u0a53\u0a57\u0a65\u0a72\u0a78\u0a7b")
        buf.write("\u0a83\u0a8f\u0a95\u0a9e\u0aaf\u0ab5\u0abd\u0ac1\u0ac9")
        buf.write("\u0ad0\u0add\u0ae5\u0af2\u0af9\u0aff\u0b03\u0b14\u0b17")
        buf.write("\u0b20\u0b23\u0b26\u0b33\u0b37\u0b3f\u0b45\u0b4d\u0b54")
        buf.write("\u0b5a\u0b69\u0b72\u0b78\u0b7e\u0b81\u0b85\u0b8c\u0b94")
        buf.write("\u0b97\u0b9d\u0ba3\u0ba5\u0bab\u0bae\u0bb0\u0bb6\u0bb8")
        buf.write("\u0bc6\u0bcd\u0bd4\u0bdb\u0be2\u0be9\u0bf0\u0bf6\u0bfb")
        buf.write("\u0c04\u0c09\u0c10\u0c19\u0c1d\u0c23\u0c26\u0c2a\u0c2f")
        buf.write("\u0c33\u0c37\u0c3b\u0c42\u0c55\u0c5b")
        return buf.getvalue()


class tsqlParser ( Parser ):

    grammarFileName = "tsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", 
                     "'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", 
                     "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "HADR_options", "ADD", "ALL", "ALTER", 
                      "AND", "ANY", "AS", "ASC", "AUTHORIZATION", "BACKUP", 
                      "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", 
                      "CASCADE", "CASE", "CHANGETABLE", "CHANGES", "CHECK", 
                      "CHECKPOINT", "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", 
                      "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT", 
                      "CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", 
                      "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", 
                      "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
                      "DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", 
                      "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", 
                      "FETCH", "FILE", "FILENAME", "FILLFACTOR", "FOR", 
                      "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
                      "IF", "IN", "INDEX", "INNER", "INSERT", "INSTEAD", 
                      "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KILL", 
                      "LEFT", "LIKE", "LINENO", "LOAD", "LOG", "MERGE", 
                      "NATIONAL", "NOCHECK", "NONCLUSTERED", "NONE", "NOT", 
                      "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "ON", "OPEN", 
                      "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
                      "OPTION", "OR", "ORDER", "OUTER", "OVER", "PARTIAL", 
                      "PERCENT", "PIVOT", "PLAN", "PRECISION", "PRIMARY", 
                      "PRINT", "PROC", "PROCEDURE", "PUBLIC", "RAISERROR", 
                      "READ", "READTEXT", "RECONFIGURE", "REFERENCES", "REPLICATION", 
                      "RESTORE", "RESTRICT", "RETURN", "REVERT", "REVOKE", 
                      "RIGHT", "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", 
                      "SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
                      "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
                      "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", 
                      "STATISTICS", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
                      "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
                      "TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", 
                      "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", 
                      "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", "WHEN", 
                      "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", 
                      "AFTER", "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", 
                      "ANSI_NULL_DEFAULT", "ANSI_PADDING", "ANSI_WARNINGS", 
                      "APPEND", "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP", 
                      "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
                      "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVG", "BASE64", "BINARY_CHECKSUM", "BULK_LOGGED", 
                      "CALLER", "CAST", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING", 
                      "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", "COMPATIBILITY_LEVEL", 
                      "CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTROL", "COOKIE", 
                      "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
                      "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION", 
                      "DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", 
                      "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", 
                      "DELETED", "DENSE_RANK", "DIRECTORY_NAME", "DISABLE", 
                      "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", 
                      "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
                      "EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
                      "FILESTREAM", "FIRST", "FOLLOWING", "FORCE", "FORCED", 
                      "FORWARD_ONLY", "FULLSCAN", "GB", "GLOBAL", "GO", 
                      "GROUPING", "GROUPING_ID", "HADR", "HASH", "HONOR_BROKER_PRIORITY", 
                      "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INSENSITIVE", 
                      "INSERTED", "ISOLATION", "KB", "KEEP", "KEEPFIXED", 
                      "KEYSET", "LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION", 
                      "LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", 
                      "MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", 
                      "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
                      "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_BROKER", "NEXT", "NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", 
                      "NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
                      "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
                      "PARAMETERIZATION", "PARTITION", "PATH", "PRECEDING", 
                      "PRIOR", "PRIVILEGES", "QUOTED_IDENTIFIER", "RANGE", 
                      "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
                      "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
                      "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", 
                      "ROBUST", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", 
                      "SAMPLE", "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", 
                      "SECONDS", "SELF", "SERIALIZABLE", "SHOWPLAN", "SIMPLE", 
                      "SINGLE_USER", "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STATIC", "STATS_STREAM", "STDEV", "STDEVP", "SUM", 
                      "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
                      "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", 
                      "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", 
                      "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", "VIEW_METADATA", 
                      "WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", 
                      "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", 
                      "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", 
                      "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
                      "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", 
                      "BIT_XOR" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_cfl_statement = 6
    RULE_another_statement = 7
    RULE_delete_statement = 8
    RULE_delete_statement_from = 9
    RULE_insert_statement = 10
    RULE_insert_statement_value = 11
    RULE_select_statement = 12
    RULE_update_statement = 13
    RULE_output_clause = 14
    RULE_output_dml_list_elem = 15
    RULE_output_column_name = 16
    RULE_create_database = 17
    RULE_create_index = 18
    RULE_create_trigger = 19
    RULE_create_procedure = 20
    RULE_procedure_param = 21
    RULE_procedure_option = 22
    RULE_create_statistics = 23
    RULE_create_table = 24
    RULE_create_view = 25
    RULE_view_attribute = 26
    RULE_alter_table = 27
    RULE_alter_database = 28
    RULE_database_optionspec = 29
    RULE_auto_option = 30
    RULE_change_tracking_option = 31
    RULE_change_tracking_option_list = 32
    RULE_containment_option = 33
    RULE_cursor_option = 34
    RULE_date_correlation_optimization_option = 35
    RULE_db_encryption_option = 36
    RULE_db_state_option = 37
    RULE_db_update_option = 38
    RULE_db_user_access_option = 39
    RULE_delayed_durability_option = 40
    RULE_external_access_option = 41
    RULE_mixed_page_allocation_option = 42
    RULE_parameterization_option = 43
    RULE_recovery_option = 44
    RULE_service_broker_option = 45
    RULE_snapshot_option = 46
    RULE_sql_option = 47
    RULE_target_recovery_time_option = 48
    RULE_termination = 49
    RULE_drop_index = 50
    RULE_drop_procedure = 51
    RULE_drop_statistics = 52
    RULE_drop_table = 53
    RULE_drop_view = 54
    RULE_create_type = 55
    RULE_drop_type = 56
    RULE_rowset_function_limited = 57
    RULE_openquery = 58
    RULE_opendatasource = 59
    RULE_declare_statement = 60
    RULE_cursor_statement = 61
    RULE_execute_statement = 62
    RULE_execute_statement_arg = 63
    RULE_execute_var_string = 64
    RULE_security_statement = 65
    RULE_grant_permission = 66
    RULE_set_statement = 67
    RULE_transaction_statement = 68
    RULE_go_statement = 69
    RULE_use_statement = 70
    RULE_execute_clause = 71
    RULE_declare_local = 72
    RULE_table_type_definition = 73
    RULE_column_def_table_constraints = 74
    RULE_column_def_table_constraint = 75
    RULE_column_definition = 76
    RULE_column_constraint = 77
    RULE_table_constraint = 78
    RULE_index_options = 79
    RULE_index_option = 80
    RULE_declare_cursor = 81
    RULE_declare_set_cursor_common = 82
    RULE_fetch_cursor = 83
    RULE_set_special = 84
    RULE_constant_LOCAL_ID = 85
    RULE_expression = 86
    RULE_constant_expression = 87
    RULE_subquery = 88
    RULE_with_expression = 89
    RULE_common_table_expression = 90
    RULE_update_elem = 91
    RULE_search_condition_list = 92
    RULE_search_condition = 93
    RULE_search_condition_and = 94
    RULE_search_condition_not = 95
    RULE_predicate = 96
    RULE_query_expression = 97
    RULE_union = 98
    RULE_query_specification = 99
    RULE_order_by_clause = 100
    RULE_for_clause = 101
    RULE_xml_common_directives = 102
    RULE_order_by_expression = 103
    RULE_group_by_item = 104
    RULE_option_clause = 105
    RULE_option = 106
    RULE_optimize_for_arg = 107
    RULE_select_list = 108
    RULE_select_list_elem = 109
    RULE_table_sources = 110
    RULE_table_source = 111
    RULE_table_source_item_joined = 112
    RULE_table_source_item = 113
    RULE_change_table = 114
    RULE_join_part = 115
    RULE_table_name_with_hint = 116
    RULE_rowset_function = 117
    RULE_bulk_option = 118
    RULE_derived_table = 119
    RULE_function_call = 120
    RULE_switch_section = 121
    RULE_switch_search_condition_section = 122
    RULE_as_table_alias = 123
    RULE_table_alias = 124
    RULE_with_table_hints = 125
    RULE_insert_with_table_hints = 126
    RULE_table_hint = 127
    RULE_index_value = 128
    RULE_column_alias_list = 129
    RULE_column_alias = 130
    RULE_table_value_constructor = 131
    RULE_expression_list = 132
    RULE_ranking_windowed_function = 133
    RULE_aggregate_windowed_function = 134
    RULE_all_distinct_expression = 135
    RULE_over_clause = 136
    RULE_row_or_range_clause = 137
    RULE_window_frame_extent = 138
    RULE_window_frame_bound = 139
    RULE_window_frame_preceding = 140
    RULE_window_frame_following = 141
    RULE_create_database_option = 142
    RULE_database_filestream_option = 143
    RULE_database_file_spec = 144
    RULE_file_group = 145
    RULE_file_spec = 146
    RULE_full_table_name = 147
    RULE_table_name = 148
    RULE_simple_name = 149
    RULE_func_proc_name = 150
    RULE_ddl_object = 151
    RULE_full_column_name = 152
    RULE_column_name_list = 153
    RULE_cursor_name = 154
    RULE_on_off = 155
    RULE_clustered = 156
    RULE_null_notnull = 157
    RULE_scalar_function_name = 158
    RULE_data_type = 159
    RULE_default_value = 160
    RULE_constant = 161
    RULE_sign = 162
    RULE_id_var = 163
    RULE_simple_id = 164
    RULE_comparison_operator = 165
    RULE_assignment_operator = 166
    RULE_file_size = 167

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "cfl_statement", "another_statement", "delete_statement", 
                   "delete_statement_from", "insert_statement", "insert_statement_value", 
                   "select_statement", "update_statement", "output_clause", 
                   "output_dml_list_elem", "output_column_name", "create_database", 
                   "create_index", "create_trigger", "create_procedure", 
                   "procedure_param", "procedure_option", "create_statistics", 
                   "create_table", "create_view", "view_attribute", "alter_table", 
                   "alter_database", "database_optionspec", "auto_option", 
                   "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_procedure", "drop_statistics", 
                   "drop_table", "drop_view", "create_type", "drop_type", 
                   "rowset_function_limited", "openquery", "opendatasource", 
                   "declare_statement", "cursor_statement", "execute_statement", 
                   "execute_statement_arg", "execute_var_string", "security_statement", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "execute_clause", "declare_local", 
                   "table_type_definition", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "column_constraint", 
                   "table_constraint", "index_options", "index_option", 
                   "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
                   "set_special", "constant_LOCAL_ID", "expression", "constant_expression", 
                   "subquery", "with_expression", "common_table_expression", 
                   "update_elem", "search_condition_list", "search_condition", 
                   "search_condition_and", "search_condition_not", "predicate", 
                   "query_expression", "union", "query_specification", "order_by_clause", 
                   "for_clause", "xml_common_directives", "order_by_expression", 
                   "group_by_item", "option_clause", "option", "optimize_for_arg", 
                   "select_list", "select_list_elem", "table_sources", "table_source", 
                   "table_source_item_joined", "table_source_item", "change_table", 
                   "join_part", "table_name_with_hint", "rowset_function", 
                   "bulk_option", "derived_table", "function_call", "switch_section", 
                   "switch_search_condition_section", "as_table_alias", 
                   "table_alias", "with_table_hints", "insert_with_table_hints", 
                   "table_hint", "index_value", "column_alias_list", "column_alias", 
                   "table_value_constructor", "expression_list", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct_expression", 
                   "over_clause", "row_or_range_clause", "window_frame_extent", 
                   "window_frame_bound", "window_frame_preceding", "window_frame_following", 
                   "create_database_option", "database_filestream_option", 
                   "database_file_spec", "file_group", "file_spec", "full_table_name", 
                   "table_name", "simple_name", "func_proc_name", "ddl_object", 
                   "full_column_name", "column_name_list", "cursor_name", 
                   "on_off", "clustered", "null_notnull", "scalar_function_name", 
                   "data_type", "default_value", "constant", "sign", "id_var", 
                   "simple_id", "comparison_operator", "assignment_operator", 
                   "file_size" ]

    EOF = Token.EOF
    HADR_options=1
    ADD=2
    ALL=3
    ALTER=4
    AND=5
    ANY=6
    AS=7
    ASC=8
    AUTHORIZATION=9
    BACKUP=10
    BEGIN=11
    BETWEEN=12
    BREAK=13
    BROWSE=14
    BULK=15
    BY=16
    CASCADE=17
    CASE=18
    CHANGETABLE=19
    CHANGES=20
    CHECK=21
    CHECKPOINT=22
    CLOSE=23
    CLUSTERED=24
    COALESCE=25
    COLLATE=26
    COLUMN=27
    COMMIT=28
    COMPUTE=29
    CONSTRAINT=30
    CONTAINMENT=31
    CONTAINS=32
    CONTAINSTABLE=33
    CONTINUE=34
    CONVERT=35
    CREATE=36
    CROSS=37
    CURRENT=38
    CURRENT_DATE=39
    CURRENT_TIME=40
    CURRENT_TIMESTAMP=41
    CURRENT_USER=42
    CURSOR=43
    DATABASE=44
    DBCC=45
    DEALLOCATE=46
    DECLARE=47
    DEFAULT=48
    DELETE=49
    DENY=50
    DESC=51
    DISK=52
    DISTINCT=53
    DISTRIBUTED=54
    DOUBLE=55
    DROP=56
    DUMP=57
    ELSE=58
    END=59
    ERRLVL=60
    ESCAPE=61
    EXCEPT=62
    EXECUTE=63
    EXISTS=64
    EXIT=65
    EXTERNAL=66
    FETCH=67
    FILE=68
    FILENAME=69
    FILLFACTOR=70
    FOR=71
    FORCESEEK=72
    FOREIGN=73
    FREETEXT=74
    FREETEXTTABLE=75
    FROM=76
    FULL=77
    FUNCTION=78
    GOTO=79
    GRANT=80
    GROUP=81
    HAVING=82
    IDENTITY=83
    IDENTITYCOL=84
    IDENTITY_INSERT=85
    IF=86
    IN=87
    INDEX=88
    INNER=89
    INSERT=90
    INSTEAD=91
    INTERSECT=92
    INTO=93
    IS=94
    JOIN=95
    KEY=96
    KILL=97
    LEFT=98
    LIKE=99
    LINENO=100
    LOAD=101
    LOG=102
    MERGE=103
    NATIONAL=104
    NOCHECK=105
    NONCLUSTERED=106
    NONE=107
    NOT=108
    NULL=109
    NULLIF=110
    OF=111
    OFF=112
    OFFSETS=113
    ON=114
    OPEN=115
    OPENDATASOURCE=116
    OPENQUERY=117
    OPENROWSET=118
    OPENXML=119
    OPTION=120
    OR=121
    ORDER=122
    OUTER=123
    OVER=124
    PARTIAL=125
    PERCENT=126
    PIVOT=127
    PLAN=128
    PRECISION=129
    PRIMARY=130
    PRINT=131
    PROC=132
    PROCEDURE=133
    PUBLIC=134
    RAISERROR=135
    READ=136
    READTEXT=137
    RECONFIGURE=138
    REFERENCES=139
    REPLICATION=140
    RESTORE=141
    RESTRICT=142
    RETURN=143
    REVERT=144
    REVOKE=145
    RIGHT=146
    ROLLBACK=147
    ROWCOUNT=148
    ROWGUIDCOL=149
    RULE=150
    SAVE=151
    SCHEMA=152
    SECURITYAUDIT=153
    SELECT=154
    SEMANTICKEYPHRASETABLE=155
    SEMANTICSIMILARITYDETAILSTABLE=156
    SEMANTICSIMILARITYTABLE=157
    SESSION_USER=158
    SET=159
    SETUSER=160
    SHUTDOWN=161
    SOME=162
    STATISTICS=163
    SYSTEM_USER=164
    TABLE=165
    TABLESAMPLE=166
    TEXTSIZE=167
    THEN=168
    TO=169
    TOP=170
    TRAN=171
    TRANSACTION=172
    TRIGGER=173
    TRUNCATE=174
    TRY_CONVERT=175
    TSEQUAL=176
    UNION=177
    UNIQUE=178
    UNPIVOT=179
    UPDATE=180
    UPDATETEXT=181
    USE=182
    USER=183
    VALUES=184
    VARYING=185
    VIEW=186
    WAITFOR=187
    WHEN=188
    WHERE=189
    WHILE=190
    WITH=191
    WITHIN=192
    WRITETEXT=193
    ABSOLUTE=194
    AFTER=195
    ALLOWED=196
    ALLOW_SNAPSHOT_ISOLATION=197
    ANSI_NULLS=198
    ANSI_NULL_DEFAULT=199
    ANSI_PADDING=200
    ANSI_WARNINGS=201
    APPEND=202
    APPLY=203
    ARITHABORT=204
    AUTO=205
    AUTO_CLEANUP=206
    AUTO_CLOSE=207
    AUTO_CREATE_STATISTICS=208
    AUTO_SHRINK=209
    AUTO_UPDATE_STATISTICS=210
    AUTO_UPDATE_STATISTICS_ASYNC=211
    AVG=212
    BASE64=213
    BINARY_CHECKSUM=214
    BULK_LOGGED=215
    CALLER=216
    CAST=217
    CATCH=218
    CHANGE_RETENTION=219
    CHANGE_TRACKING=220
    CHECKSUM=221
    CHECKSUM_AGG=222
    COMMITTED=223
    COMPATIBILITY_LEVEL=224
    CONCAT=225
    CONCAT_NULL_YIELDS_NULL=226
    CONTROL=227
    COOKIE=228
    COUNT=229
    COUNT_BIG=230
    CURSOR_CLOSE_ON_COMMIT=231
    CURSOR_DEFAULT=232
    DATEADD=233
    DATEDIFF=234
    DATENAME=235
    DATEPART=236
    DATE_CORRELATION_OPTIMIZATION=237
    DAYS=238
    DB_CHAINING=239
    DEFAULT_FULLTEXT_LANGUAGE=240
    DEFAULT_LANGUAGE=241
    DELAY=242
    DELAYED_DURABILITY=243
    DELETED=244
    DENSE_RANK=245
    DIRECTORY_NAME=246
    DISABLE=247
    DISABLED=248
    DISABLE_BROKER=249
    DYNAMIC=250
    EMERGENCY=251
    ENABLE_BROKER=252
    ENCRYPTION=253
    ERROR_BROKER_CONVERSATIONS=254
    EXPAND=255
    FAST=256
    FAST_FORWARD=257
    FILEGROUP=258
    FILEGROWTH=259
    FILESTREAM=260
    FIRST=261
    FOLLOWING=262
    FORCE=263
    FORCED=264
    FORWARD_ONLY=265
    FULLSCAN=266
    GB=267
    GLOBAL=268
    GO=269
    GROUPING=270
    GROUPING_ID=271
    HADR=272
    HASH=273
    HONOR_BROKER_PRIORITY=274
    HOURS=275
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=276
    IMMEDIATE=277
    IMPERSONATE=278
    INCREMENTAL=279
    INSENSITIVE=280
    INSERTED=281
    ISOLATION=282
    KB=283
    KEEP=284
    KEEPFIXED=285
    KEYSET=286
    LAST=287
    LEVEL=288
    LOCAL=289
    LOCK_ESCALATION=290
    LOGIN=291
    LOOP=292
    MARK=293
    MAX=294
    MAXDOP=295
    MAXRECURSION=296
    MAXSIZE=297
    MB=298
    MEMORY_OPTIMIZED_DATA=299
    MIN=300
    MINUTES=301
    MIN_ACTIVE_ROWVERSION=302
    MIXED_PAGE_ALLOCATION=303
    MODIFY=304
    MULTI_USER=305
    NAME=306
    NESTED_TRIGGERS=307
    NEW_BROKER=308
    NEXT=309
    NOCOUNT=310
    NOEXPAND=311
    NON_TRANSACTED_ACCESS=312
    NORECOMPUTE=313
    NO_WAIT=314
    NTILE=315
    NUMBER=316
    NUMERIC_ROUNDABORT=317
    OFFLINE=318
    OFFSET=319
    ONLINE=320
    ONLY=321
    OPTIMISTIC=322
    OPTIMIZE=323
    OUT=324
    OUTPUT=325
    OWNER=326
    PAGE_VERIFY=327
    PARAMETERIZATION=328
    PARTITION=329
    PATH=330
    PRECEDING=331
    PRIOR=332
    PRIVILEGES=333
    QUOTED_IDENTIFIER=334
    RANGE=335
    RANK=336
    READONLY=337
    READ_COMMITTED_SNAPSHOT=338
    READ_ONLY=339
    READ_WRITE=340
    RECOMPILE=341
    RECOVERY=342
    RECURSIVE_TRIGGERS=343
    RELATIVE=344
    REMOTE=345
    REPEATABLE=346
    RESTRICTED_USER=347
    ROBUST=348
    ROOT=349
    ROW=350
    ROWGUID=351
    ROWS=352
    ROW_NUMBER=353
    SAMPLE=354
    SCHEMABINDING=355
    SCROLL=356
    SCROLL_LOCKS=357
    SECONDS=358
    SELF=359
    SERIALIZABLE=360
    SHOWPLAN=361
    SIMPLE=362
    SINGLE_USER=363
    SIZE=364
    SNAPSHOT=365
    SPATIAL_WINDOW_MAX_CELLS=366
    STATIC=367
    STATS_STREAM=368
    STDEV=369
    STDEVP=370
    SUM=371
    TAKE=372
    TARGET_RECOVERY_TIME=373
    TB=374
    TEXTIMAGE_ON=375
    THROW=376
    TIES=377
    TIME=378
    TORN_PAGE_DETECTION=379
    TRANSFORM_NOISE_WORDS=380
    TRUSTWORTHY=381
    TRY=382
    TWO_DIGIT_YEAR_CUTOFF=383
    TYPE=384
    TYPE_WARNING=385
    UNBOUNDED=386
    UNCOMMITTED=387
    UNKNOWN=388
    UNLIMITED=389
    USING=390
    VAR=391
    VARP=392
    VIEWS=393
    VIEW_METADATA=394
    WORK=395
    XML=396
    XMLNAMESPACES=397
    DOLLAR_ACTION=398
    SPACE=399
    COMMENT=400
    LINE_COMMENT=401
    DOUBLE_QUOTE_ID=402
    SQUARE_BRACKET_ID=403
    LOCAL_ID=404
    DECIMAL=405
    ID=406
    STRING=407
    BINARY=408
    FLOAT=409
    REAL=410
    EQUAL=411
    GREATER=412
    LESS=413
    EXCLAMATION=414
    PLUS_ASSIGN=415
    MINUS_ASSIGN=416
    MULT_ASSIGN=417
    DIV_ASSIGN=418
    MOD_ASSIGN=419
    AND_ASSIGN=420
    XOR_ASSIGN=421
    OR_ASSIGN=422
    DOT=423
    UNDERLINE=424
    AT=425
    SHARP=426
    DOLLAR=427
    LR_BRACKET=428
    RR_BRACKET=429
    COMMA=430
    SEMI=431
    COLON=432
    STAR=433
    DIVIDE=434
    MODULE=435
    PLUS=436
    MINUS=437
    BIT_NOT=438
    BIT_OR=439
    BIT_AND=440
    BIT_XOR=441

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Tsql_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(tsqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(tsqlParser.BatchContext,i)


        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_tsql_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsql_file" ):
                listener.enterTsql_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsql_file" ):
                listener.exitTsql_file(self)




    def tsql_file(self):

        localctx = tsqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 336
                    self.batch() 
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 343
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)) | (1 << (tsqlParser.WAITFOR - 131)) | (1 << (tsqlParser.WHILE - 131)) | (1 << (tsqlParser.WITH - 131)) | (1 << (tsqlParser.ABSOLUTE - 131)))) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (tsqlParser.APPLY - 203)) | (1 << (tsqlParser.AUTO - 203)) | (1 << (tsqlParser.AVG - 203)) | (1 << (tsqlParser.BASE64 - 203)) | (1 << (tsqlParser.CALLER - 203)) | (1 << (tsqlParser.CAST - 203)) | (1 << (tsqlParser.CATCH - 203)) | (1 << (tsqlParser.CHECKSUM_AGG - 203)) | (1 << (tsqlParser.COMMITTED - 203)) | (1 << (tsqlParser.CONCAT - 203)) | (1 << (tsqlParser.CONTROL - 203)) | (1 << (tsqlParser.COOKIE - 203)) | (1 << (tsqlParser.COUNT - 203)) | (1 << (tsqlParser.COUNT_BIG - 203)) | (1 << (tsqlParser.DELAY - 203)) | (1 << (tsqlParser.DELETED - 203)) | (1 << (tsqlParser.DENSE_RANK - 203)) | (1 << (tsqlParser.DISABLE - 203)) | (1 << (tsqlParser.DYNAMIC - 203)) | (1 << (tsqlParser.ENCRYPTION - 203)) | (1 << (tsqlParser.EXPAND - 203)) | (1 << (tsqlParser.FAST - 203)) | (1 << (tsqlParser.FAST_FORWARD - 203)) | (1 << (tsqlParser.FIRST - 203)) | (1 << (tsqlParser.FOLLOWING - 203)) | (1 << (tsqlParser.FORCE - 203)) | (1 << (tsqlParser.FORCED - 203)) | (1 << (tsqlParser.FORWARD_ONLY - 203)) | (1 << (tsqlParser.FULLSCAN - 203)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (tsqlParser.GLOBAL - 268)) | (1 << (tsqlParser.GO - 268)) | (1 << (tsqlParser.GROUPING - 268)) | (1 << (tsqlParser.GROUPING_ID - 268)) | (1 << (tsqlParser.HASH - 268)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 268)) | (1 << (tsqlParser.IMPERSONATE - 268)) | (1 << (tsqlParser.INSENSITIVE - 268)) | (1 << (tsqlParser.INSERTED - 268)) | (1 << (tsqlParser.ISOLATION - 268)) | (1 << (tsqlParser.KEEP - 268)) | (1 << (tsqlParser.KEEPFIXED - 268)) | (1 << (tsqlParser.KEYSET - 268)) | (1 << (tsqlParser.LAST - 268)) | (1 << (tsqlParser.LEVEL - 268)) | (1 << (tsqlParser.LOCAL - 268)) | (1 << (tsqlParser.LOCK_ESCALATION - 268)) | (1 << (tsqlParser.LOGIN - 268)) | (1 << (tsqlParser.LOOP - 268)) | (1 << (tsqlParser.MARK - 268)) | (1 << (tsqlParser.MAX - 268)) | (1 << (tsqlParser.MAXDOP - 268)) | (1 << (tsqlParser.MAXRECURSION - 268)) | (1 << (tsqlParser.MIN - 268)) | (1 << (tsqlParser.MODIFY - 268)) | (1 << (tsqlParser.NAME - 268)) | (1 << (tsqlParser.NEXT - 268)) | (1 << (tsqlParser.NOCOUNT - 268)) | (1 << (tsqlParser.NOEXPAND - 268)) | (1 << (tsqlParser.NORECOMPUTE - 268)) | (1 << (tsqlParser.NTILE - 268)) | (1 << (tsqlParser.NUMBER - 268)) | (1 << (tsqlParser.OFFSET - 268)) | (1 << (tsqlParser.ONLINE - 268)) | (1 << (tsqlParser.ONLY - 268)) | (1 << (tsqlParser.OPTIMISTIC - 268)) | (1 << (tsqlParser.OPTIMIZE - 268)) | (1 << (tsqlParser.OUT - 268)) | (1 << (tsqlParser.OUTPUT - 268)) | (1 << (tsqlParser.OWNER - 268)) | (1 << (tsqlParser.PARAMETERIZATION - 268)) | (1 << (tsqlParser.PARTITION - 268)) | (1 << (tsqlParser.PATH - 268)) | (1 << (tsqlParser.PRECEDING - 268)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)) | (1 << (tsqlParser.SIMPLE - 332)) | (1 << (tsqlParser.SNAPSHOT - 332)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 332)) | (1 << (tsqlParser.STATIC - 332)) | (1 << (tsqlParser.STATS_STREAM - 332)) | (1 << (tsqlParser.STDEV - 332)) | (1 << (tsqlParser.STDEVP - 332)) | (1 << (tsqlParser.SUM - 332)) | (1 << (tsqlParser.TEXTIMAGE_ON - 332)) | (1 << (tsqlParser.THROW - 332)) | (1 << (tsqlParser.TIES - 332)) | (1 << (tsqlParser.TIME - 332)) | (1 << (tsqlParser.TRY - 332)) | (1 << (tsqlParser.TYPE - 332)) | (1 << (tsqlParser.TYPE_WARNING - 332)) | (1 << (tsqlParser.UNBOUNDED - 332)) | (1 << (tsqlParser.UNCOMMITTED - 332)) | (1 << (tsqlParser.UNKNOWN - 332)) | (1 << (tsqlParser.USING - 332)) | (1 << (tsqlParser.VAR - 332)) | (1 << (tsqlParser.VARP - 332)) | (1 << (tsqlParser.VIEWS - 332)) | (1 << (tsqlParser.VIEW_METADATA - 332)) | (1 << (tsqlParser.WORK - 332)))) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & ((1 << (tsqlParser.XML - 396)) | (1 << (tsqlParser.XMLNAMESPACES - 396)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 396)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 396)) | (1 << (tsqlParser.ID - 396)) | (1 << (tsqlParser.LR_BRACKET - 396)))) != 0):
                self.state = 342
                self.sql_clauses()


            self.state = 345
            self.match(tsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def go_statement(self):
            return self.getTypedRuleContext(tsqlParser.Go_statementContext,0)


        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)




    def batch(self):

        localctx = tsqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 347
                self.sql_clauses()


            self.state = 350
            self.go_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)




    def sql_clauses(self):

        localctx = tsqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 352
                    self.sql_clause()
                    self.state = 354
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                    if la_ == 1:
                        self.state = 353
                        self.match(tsqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 358 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(tsqlParser.Another_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clause" ):
                listener.enterSql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clause" ):
                listener.exitSql_clause(self)




    def sql_clause(self):

        localctx = tsqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 364
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 360
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 362
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 363
                self.another_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_statement(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(tsqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)




    def dml_clause(self):

        localctx = tsqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 370
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.delete_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.insert_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 368
                self.select_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 369
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database(self):
            return self.getTypedRuleContext(tsqlParser.Create_databaseContext,0)


        def create_index(self):
            return self.getTypedRuleContext(tsqlParser.Create_indexContext,0)


        def create_trigger(self):
            return self.getTypedRuleContext(tsqlParser.Create_triggerContext,0)


        def create_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Create_procedureContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Create_statisticsContext,0)


        def create_table(self):
            return self.getTypedRuleContext(tsqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(tsqlParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(tsqlParser.Create_viewContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(tsqlParser.Alter_tableContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(tsqlParser.Alter_databaseContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(tsqlParser.Drop_indexContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Drop_procedureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Drop_statisticsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(tsqlParser.Drop_tableContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(tsqlParser.Drop_typeContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(tsqlParser.Drop_viewContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_clause" ):
                listener.enterDdl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_clause" ):
                listener.exitDdl_clause(self)




    def ddl_clause(self):

        localctx = tsqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 388
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 372
                self.create_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 373
                self.create_index()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 374
                self.create_trigger()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 375
                self.create_procedure()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 376
                self.create_statistics()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 377
                self.create_table()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 378
                self.create_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 379
                self.create_view()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 380
                self.alter_table()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 381
                self.alter_database()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 382
                self.drop_index()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 383
                self.drop_procedure()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 384
                self.drop_statistics()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 385
                self.drop_table()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 386
                self.drop_type()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 387
                self.drop_view()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cfl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Waitfor_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WAITFOR(self):
            return self.getToken(tsqlParser.WAITFOR, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)


    class Print_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(tsqlParser.PRINT, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)


    class Continue_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)


    class If_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)


    class Raiseerror_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.copyFrom(ctx)

        def RAISERROR(self):
            return self.getToken(tsqlParser.RAISERROR, 0)
        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,i)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)


    class Throw_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.error_number = None # Token
            self.message = None # Token
            self.state = None # Token
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)


    class Try_catch_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext
            self.copyFrom(ctx)

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BEGIN)
            else:
                return self.getToken(tsqlParser.BEGIN, i)
        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TRY)
            else:
                return self.getToken(tsqlParser.TRY, i)
        def END(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.END)
            else:
                return self.getToken(tsqlParser.END, i)
        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CATCH)
            else:
                return self.getToken(tsqlParser.CATCH, i)
        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)


    class While_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(tsqlParser.WHILE, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,0)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)
        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)


    class Block_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)


    class Break_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)


    class Goto_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(tsqlParser.GOTO, 0)
        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)


    class Return_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)



    def cfl_statement(self):

        localctx = tsqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cfl_statement)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Block_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.match(tsqlParser.BEGIN)
                self.state = 392
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 391
                    self.match(tsqlParser.SEMI)


                self.state = 395
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)) | (1 << (tsqlParser.WAITFOR - 131)) | (1 << (tsqlParser.WHILE - 131)) | (1 << (tsqlParser.WITH - 131)) | (1 << (tsqlParser.ABSOLUTE - 131)))) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (tsqlParser.APPLY - 203)) | (1 << (tsqlParser.AUTO - 203)) | (1 << (tsqlParser.AVG - 203)) | (1 << (tsqlParser.BASE64 - 203)) | (1 << (tsqlParser.CALLER - 203)) | (1 << (tsqlParser.CAST - 203)) | (1 << (tsqlParser.CATCH - 203)) | (1 << (tsqlParser.CHECKSUM_AGG - 203)) | (1 << (tsqlParser.COMMITTED - 203)) | (1 << (tsqlParser.CONCAT - 203)) | (1 << (tsqlParser.CONTROL - 203)) | (1 << (tsqlParser.COOKIE - 203)) | (1 << (tsqlParser.COUNT - 203)) | (1 << (tsqlParser.COUNT_BIG - 203)) | (1 << (tsqlParser.DELAY - 203)) | (1 << (tsqlParser.DELETED - 203)) | (1 << (tsqlParser.DENSE_RANK - 203)) | (1 << (tsqlParser.DISABLE - 203)) | (1 << (tsqlParser.DYNAMIC - 203)) | (1 << (tsqlParser.ENCRYPTION - 203)) | (1 << (tsqlParser.EXPAND - 203)) | (1 << (tsqlParser.FAST - 203)) | (1 << (tsqlParser.FAST_FORWARD - 203)) | (1 << (tsqlParser.FIRST - 203)) | (1 << (tsqlParser.FOLLOWING - 203)) | (1 << (tsqlParser.FORCE - 203)) | (1 << (tsqlParser.FORCED - 203)) | (1 << (tsqlParser.FORWARD_ONLY - 203)) | (1 << (tsqlParser.FULLSCAN - 203)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (tsqlParser.GLOBAL - 268)) | (1 << (tsqlParser.GO - 268)) | (1 << (tsqlParser.GROUPING - 268)) | (1 << (tsqlParser.GROUPING_ID - 268)) | (1 << (tsqlParser.HASH - 268)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 268)) | (1 << (tsqlParser.IMPERSONATE - 268)) | (1 << (tsqlParser.INSENSITIVE - 268)) | (1 << (tsqlParser.INSERTED - 268)) | (1 << (tsqlParser.ISOLATION - 268)) | (1 << (tsqlParser.KEEP - 268)) | (1 << (tsqlParser.KEEPFIXED - 268)) | (1 << (tsqlParser.KEYSET - 268)) | (1 << (tsqlParser.LAST - 268)) | (1 << (tsqlParser.LEVEL - 268)) | (1 << (tsqlParser.LOCAL - 268)) | (1 << (tsqlParser.LOCK_ESCALATION - 268)) | (1 << (tsqlParser.LOGIN - 268)) | (1 << (tsqlParser.LOOP - 268)) | (1 << (tsqlParser.MARK - 268)) | (1 << (tsqlParser.MAX - 268)) | (1 << (tsqlParser.MAXDOP - 268)) | (1 << (tsqlParser.MAXRECURSION - 268)) | (1 << (tsqlParser.MIN - 268)) | (1 << (tsqlParser.MODIFY - 268)) | (1 << (tsqlParser.NAME - 268)) | (1 << (tsqlParser.NEXT - 268)) | (1 << (tsqlParser.NOCOUNT - 268)) | (1 << (tsqlParser.NOEXPAND - 268)) | (1 << (tsqlParser.NORECOMPUTE - 268)) | (1 << (tsqlParser.NTILE - 268)) | (1 << (tsqlParser.NUMBER - 268)) | (1 << (tsqlParser.OFFSET - 268)) | (1 << (tsqlParser.ONLINE - 268)) | (1 << (tsqlParser.ONLY - 268)) | (1 << (tsqlParser.OPTIMISTIC - 268)) | (1 << (tsqlParser.OPTIMIZE - 268)) | (1 << (tsqlParser.OUT - 268)) | (1 << (tsqlParser.OUTPUT - 268)) | (1 << (tsqlParser.OWNER - 268)) | (1 << (tsqlParser.PARAMETERIZATION - 268)) | (1 << (tsqlParser.PARTITION - 268)) | (1 << (tsqlParser.PATH - 268)) | (1 << (tsqlParser.PRECEDING - 268)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)) | (1 << (tsqlParser.SIMPLE - 332)) | (1 << (tsqlParser.SNAPSHOT - 332)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 332)) | (1 << (tsqlParser.STATIC - 332)) | (1 << (tsqlParser.STATS_STREAM - 332)) | (1 << (tsqlParser.STDEV - 332)) | (1 << (tsqlParser.STDEVP - 332)) | (1 << (tsqlParser.SUM - 332)) | (1 << (tsqlParser.TEXTIMAGE_ON - 332)) | (1 << (tsqlParser.THROW - 332)) | (1 << (tsqlParser.TIES - 332)) | (1 << (tsqlParser.TIME - 332)) | (1 << (tsqlParser.TRY - 332)) | (1 << (tsqlParser.TYPE - 332)) | (1 << (tsqlParser.TYPE_WARNING - 332)) | (1 << (tsqlParser.UNBOUNDED - 332)) | (1 << (tsqlParser.UNCOMMITTED - 332)) | (1 << (tsqlParser.UNKNOWN - 332)) | (1 << (tsqlParser.USING - 332)) | (1 << (tsqlParser.VAR - 332)) | (1 << (tsqlParser.VARP - 332)) | (1 << (tsqlParser.VIEWS - 332)) | (1 << (tsqlParser.VIEW_METADATA - 332)) | (1 << (tsqlParser.WORK - 332)))) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & ((1 << (tsqlParser.XML - 396)) | (1 << (tsqlParser.XMLNAMESPACES - 396)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 396)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 396)) | (1 << (tsqlParser.ID - 396)) | (1 << (tsqlParser.LR_BRACKET - 396)))) != 0):
                    self.state = 394
                    self.sql_clauses()


                self.state = 397
                self.match(tsqlParser.END)
                self.state = 399
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 398
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                localctx = tsqlParser.Break_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 401
                self.match(tsqlParser.BREAK)
                self.state = 403
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 402
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                localctx = tsqlParser.Continue_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 405
                self.match(tsqlParser.CONTINUE)
                self.state = 407
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 406
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 409
                self.match(tsqlParser.GOTO)
                self.state = 410
                self.id_var()
                self.state = 412
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 411
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 414
                self.id_var()
                self.state = 415
                self.match(tsqlParser.COLON)
                self.state = 417
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 416
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                localctx = tsqlParser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 419
                self.match(tsqlParser.IF)
                self.state = 420
                self.search_condition()
                self.state = 421
                self.sql_clause()
                self.state = 424
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 422
                    self.match(tsqlParser.ELSE)
                    self.state = 423
                    self.sql_clause()


                self.state = 427
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 426
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                localctx = tsqlParser.Return_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 429
                self.match(tsqlParser.RETURN)
                self.state = 431
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 430
                    self.expression(0)


                self.state = 434
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 433
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Throw_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 436
                self.match(tsqlParser.THROW)
                self.state = 442
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL:
                    self.state = 437
                    localctx.error_number = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.error_number = self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 438
                    self.match(tsqlParser.COMMA)
                    self.state = 439
                    localctx.message = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                        localctx.message = self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 440
                    self.match(tsqlParser.COMMA)
                    self.state = 441
                    localctx.state = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.state = self._errHandler.recoverInline(self)
                    else:
                        self.consume()


                self.state = 445
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 444
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 9:
                localctx = tsqlParser.Try_catch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 447
                self.match(tsqlParser.BEGIN)
                self.state = 448
                self.match(tsqlParser.TRY)
                self.state = 450
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 449
                    self.match(tsqlParser.SEMI)


                self.state = 453
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)) | (1 << (tsqlParser.WAITFOR - 131)) | (1 << (tsqlParser.WHILE - 131)) | (1 << (tsqlParser.WITH - 131)) | (1 << (tsqlParser.ABSOLUTE - 131)))) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (tsqlParser.APPLY - 203)) | (1 << (tsqlParser.AUTO - 203)) | (1 << (tsqlParser.AVG - 203)) | (1 << (tsqlParser.BASE64 - 203)) | (1 << (tsqlParser.CALLER - 203)) | (1 << (tsqlParser.CAST - 203)) | (1 << (tsqlParser.CATCH - 203)) | (1 << (tsqlParser.CHECKSUM_AGG - 203)) | (1 << (tsqlParser.COMMITTED - 203)) | (1 << (tsqlParser.CONCAT - 203)) | (1 << (tsqlParser.CONTROL - 203)) | (1 << (tsqlParser.COOKIE - 203)) | (1 << (tsqlParser.COUNT - 203)) | (1 << (tsqlParser.COUNT_BIG - 203)) | (1 << (tsqlParser.DELAY - 203)) | (1 << (tsqlParser.DELETED - 203)) | (1 << (tsqlParser.DENSE_RANK - 203)) | (1 << (tsqlParser.DISABLE - 203)) | (1 << (tsqlParser.DYNAMIC - 203)) | (1 << (tsqlParser.ENCRYPTION - 203)) | (1 << (tsqlParser.EXPAND - 203)) | (1 << (tsqlParser.FAST - 203)) | (1 << (tsqlParser.FAST_FORWARD - 203)) | (1 << (tsqlParser.FIRST - 203)) | (1 << (tsqlParser.FOLLOWING - 203)) | (1 << (tsqlParser.FORCE - 203)) | (1 << (tsqlParser.FORCED - 203)) | (1 << (tsqlParser.FORWARD_ONLY - 203)) | (1 << (tsqlParser.FULLSCAN - 203)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (tsqlParser.GLOBAL - 268)) | (1 << (tsqlParser.GO - 268)) | (1 << (tsqlParser.GROUPING - 268)) | (1 << (tsqlParser.GROUPING_ID - 268)) | (1 << (tsqlParser.HASH - 268)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 268)) | (1 << (tsqlParser.IMPERSONATE - 268)) | (1 << (tsqlParser.INSENSITIVE - 268)) | (1 << (tsqlParser.INSERTED - 268)) | (1 << (tsqlParser.ISOLATION - 268)) | (1 << (tsqlParser.KEEP - 268)) | (1 << (tsqlParser.KEEPFIXED - 268)) | (1 << (tsqlParser.KEYSET - 268)) | (1 << (tsqlParser.LAST - 268)) | (1 << (tsqlParser.LEVEL - 268)) | (1 << (tsqlParser.LOCAL - 268)) | (1 << (tsqlParser.LOCK_ESCALATION - 268)) | (1 << (tsqlParser.LOGIN - 268)) | (1 << (tsqlParser.LOOP - 268)) | (1 << (tsqlParser.MARK - 268)) | (1 << (tsqlParser.MAX - 268)) | (1 << (tsqlParser.MAXDOP - 268)) | (1 << (tsqlParser.MAXRECURSION - 268)) | (1 << (tsqlParser.MIN - 268)) | (1 << (tsqlParser.MODIFY - 268)) | (1 << (tsqlParser.NAME - 268)) | (1 << (tsqlParser.NEXT - 268)) | (1 << (tsqlParser.NOCOUNT - 268)) | (1 << (tsqlParser.NOEXPAND - 268)) | (1 << (tsqlParser.NORECOMPUTE - 268)) | (1 << (tsqlParser.NTILE - 268)) | (1 << (tsqlParser.NUMBER - 268)) | (1 << (tsqlParser.OFFSET - 268)) | (1 << (tsqlParser.ONLINE - 268)) | (1 << (tsqlParser.ONLY - 268)) | (1 << (tsqlParser.OPTIMISTIC - 268)) | (1 << (tsqlParser.OPTIMIZE - 268)) | (1 << (tsqlParser.OUT - 268)) | (1 << (tsqlParser.OUTPUT - 268)) | (1 << (tsqlParser.OWNER - 268)) | (1 << (tsqlParser.PARAMETERIZATION - 268)) | (1 << (tsqlParser.PARTITION - 268)) | (1 << (tsqlParser.PATH - 268)) | (1 << (tsqlParser.PRECEDING - 268)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)) | (1 << (tsqlParser.SIMPLE - 332)) | (1 << (tsqlParser.SNAPSHOT - 332)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 332)) | (1 << (tsqlParser.STATIC - 332)) | (1 << (tsqlParser.STATS_STREAM - 332)) | (1 << (tsqlParser.STDEV - 332)) | (1 << (tsqlParser.STDEVP - 332)) | (1 << (tsqlParser.SUM - 332)) | (1 << (tsqlParser.TEXTIMAGE_ON - 332)) | (1 << (tsqlParser.THROW - 332)) | (1 << (tsqlParser.TIES - 332)) | (1 << (tsqlParser.TIME - 332)) | (1 << (tsqlParser.TRY - 332)) | (1 << (tsqlParser.TYPE - 332)) | (1 << (tsqlParser.TYPE_WARNING - 332)) | (1 << (tsqlParser.UNBOUNDED - 332)) | (1 << (tsqlParser.UNCOMMITTED - 332)) | (1 << (tsqlParser.UNKNOWN - 332)) | (1 << (tsqlParser.USING - 332)) | (1 << (tsqlParser.VAR - 332)) | (1 << (tsqlParser.VARP - 332)) | (1 << (tsqlParser.VIEWS - 332)) | (1 << (tsqlParser.VIEW_METADATA - 332)) | (1 << (tsqlParser.WORK - 332)))) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & ((1 << (tsqlParser.XML - 396)) | (1 << (tsqlParser.XMLNAMESPACES - 396)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 396)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 396)) | (1 << (tsqlParser.ID - 396)) | (1 << (tsqlParser.LR_BRACKET - 396)))) != 0):
                    self.state = 452
                    localctx.try_clauses = self.sql_clauses()


                self.state = 455
                self.match(tsqlParser.END)
                self.state = 456
                self.match(tsqlParser.TRY)
                self.state = 458
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 457
                    self.match(tsqlParser.SEMI)


                self.state = 460
                self.match(tsqlParser.BEGIN)
                self.state = 461
                self.match(tsqlParser.CATCH)
                self.state = 463
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 462
                    self.match(tsqlParser.SEMI)


                self.state = 466
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)) | (1 << (tsqlParser.WAITFOR - 131)) | (1 << (tsqlParser.WHILE - 131)) | (1 << (tsqlParser.WITH - 131)) | (1 << (tsqlParser.ABSOLUTE - 131)))) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (tsqlParser.APPLY - 203)) | (1 << (tsqlParser.AUTO - 203)) | (1 << (tsqlParser.AVG - 203)) | (1 << (tsqlParser.BASE64 - 203)) | (1 << (tsqlParser.CALLER - 203)) | (1 << (tsqlParser.CAST - 203)) | (1 << (tsqlParser.CATCH - 203)) | (1 << (tsqlParser.CHECKSUM_AGG - 203)) | (1 << (tsqlParser.COMMITTED - 203)) | (1 << (tsqlParser.CONCAT - 203)) | (1 << (tsqlParser.CONTROL - 203)) | (1 << (tsqlParser.COOKIE - 203)) | (1 << (tsqlParser.COUNT - 203)) | (1 << (tsqlParser.COUNT_BIG - 203)) | (1 << (tsqlParser.DELAY - 203)) | (1 << (tsqlParser.DELETED - 203)) | (1 << (tsqlParser.DENSE_RANK - 203)) | (1 << (tsqlParser.DISABLE - 203)) | (1 << (tsqlParser.DYNAMIC - 203)) | (1 << (tsqlParser.ENCRYPTION - 203)) | (1 << (tsqlParser.EXPAND - 203)) | (1 << (tsqlParser.FAST - 203)) | (1 << (tsqlParser.FAST_FORWARD - 203)) | (1 << (tsqlParser.FIRST - 203)) | (1 << (tsqlParser.FOLLOWING - 203)) | (1 << (tsqlParser.FORCE - 203)) | (1 << (tsqlParser.FORCED - 203)) | (1 << (tsqlParser.FORWARD_ONLY - 203)) | (1 << (tsqlParser.FULLSCAN - 203)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (tsqlParser.GLOBAL - 268)) | (1 << (tsqlParser.GO - 268)) | (1 << (tsqlParser.GROUPING - 268)) | (1 << (tsqlParser.GROUPING_ID - 268)) | (1 << (tsqlParser.HASH - 268)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 268)) | (1 << (tsqlParser.IMPERSONATE - 268)) | (1 << (tsqlParser.INSENSITIVE - 268)) | (1 << (tsqlParser.INSERTED - 268)) | (1 << (tsqlParser.ISOLATION - 268)) | (1 << (tsqlParser.KEEP - 268)) | (1 << (tsqlParser.KEEPFIXED - 268)) | (1 << (tsqlParser.KEYSET - 268)) | (1 << (tsqlParser.LAST - 268)) | (1 << (tsqlParser.LEVEL - 268)) | (1 << (tsqlParser.LOCAL - 268)) | (1 << (tsqlParser.LOCK_ESCALATION - 268)) | (1 << (tsqlParser.LOGIN - 268)) | (1 << (tsqlParser.LOOP - 268)) | (1 << (tsqlParser.MARK - 268)) | (1 << (tsqlParser.MAX - 268)) | (1 << (tsqlParser.MAXDOP - 268)) | (1 << (tsqlParser.MAXRECURSION - 268)) | (1 << (tsqlParser.MIN - 268)) | (1 << (tsqlParser.MODIFY - 268)) | (1 << (tsqlParser.NAME - 268)) | (1 << (tsqlParser.NEXT - 268)) | (1 << (tsqlParser.NOCOUNT - 268)) | (1 << (tsqlParser.NOEXPAND - 268)) | (1 << (tsqlParser.NORECOMPUTE - 268)) | (1 << (tsqlParser.NTILE - 268)) | (1 << (tsqlParser.NUMBER - 268)) | (1 << (tsqlParser.OFFSET - 268)) | (1 << (tsqlParser.ONLINE - 268)) | (1 << (tsqlParser.ONLY - 268)) | (1 << (tsqlParser.OPTIMISTIC - 268)) | (1 << (tsqlParser.OPTIMIZE - 268)) | (1 << (tsqlParser.OUT - 268)) | (1 << (tsqlParser.OUTPUT - 268)) | (1 << (tsqlParser.OWNER - 268)) | (1 << (tsqlParser.PARAMETERIZATION - 268)) | (1 << (tsqlParser.PARTITION - 268)) | (1 << (tsqlParser.PATH - 268)) | (1 << (tsqlParser.PRECEDING - 268)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)) | (1 << (tsqlParser.SIMPLE - 332)) | (1 << (tsqlParser.SNAPSHOT - 332)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 332)) | (1 << (tsqlParser.STATIC - 332)) | (1 << (tsqlParser.STATS_STREAM - 332)) | (1 << (tsqlParser.STDEV - 332)) | (1 << (tsqlParser.STDEVP - 332)) | (1 << (tsqlParser.SUM - 332)) | (1 << (tsqlParser.TEXTIMAGE_ON - 332)) | (1 << (tsqlParser.THROW - 332)) | (1 << (tsqlParser.TIES - 332)) | (1 << (tsqlParser.TIME - 332)) | (1 << (tsqlParser.TRY - 332)) | (1 << (tsqlParser.TYPE - 332)) | (1 << (tsqlParser.TYPE_WARNING - 332)) | (1 << (tsqlParser.UNBOUNDED - 332)) | (1 << (tsqlParser.UNCOMMITTED - 332)) | (1 << (tsqlParser.UNKNOWN - 332)) | (1 << (tsqlParser.USING - 332)) | (1 << (tsqlParser.VAR - 332)) | (1 << (tsqlParser.VARP - 332)) | (1 << (tsqlParser.VIEWS - 332)) | (1 << (tsqlParser.VIEW_METADATA - 332)) | (1 << (tsqlParser.WORK - 332)))) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & ((1 << (tsqlParser.XML - 396)) | (1 << (tsqlParser.XMLNAMESPACES - 396)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 396)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 396)) | (1 << (tsqlParser.ID - 396)) | (1 << (tsqlParser.LR_BRACKET - 396)))) != 0):
                    self.state = 465
                    localctx.catch_clauses = self.sql_clauses()


                self.state = 468
                self.match(tsqlParser.END)
                self.state = 469
                self.match(tsqlParser.CATCH)
                self.state = 471
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 470
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 10:
                localctx = tsqlParser.Waitfor_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 473
                self.match(tsqlParser.WAITFOR)
                self.state = 474
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DELAY or _la==tsqlParser.TIME):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 475
                self.expression(0)
                self.state = 477
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 476
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 11:
                localctx = tsqlParser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 479
                self.match(tsqlParser.WHILE)
                self.state = 480
                self.search_condition()
                self.state = 490
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 481
                    self.sql_clause()
                    pass

                elif la_ == 2:
                    self.state = 482
                    self.match(tsqlParser.BREAK)
                    self.state = 484
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 483
                        self.match(tsqlParser.SEMI)


                    pass

                elif la_ == 3:
                    self.state = 486
                    self.match(tsqlParser.CONTINUE)
                    self.state = 488
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        self.state = 487
                        self.match(tsqlParser.SEMI)


                    pass


                pass

            elif la_ == 12:
                localctx = tsqlParser.Print_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 492
                self.match(tsqlParser.PRINT)
                self.state = 493
                self.expression(0)
                self.state = 495
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 494
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 13:
                localctx = tsqlParser.Raiseerror_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 497
                self.match(tsqlParser.RAISERROR)
                self.state = 498
                self.match(tsqlParser.LR_BRACKET)
                self.state = 499
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 404)) & ~0x3f) == 0 and ((1 << (_la - 404)) & ((1 << (tsqlParser.LOCAL_ID - 404)) | (1 << (tsqlParser.DECIMAL - 404)) | (1 << (tsqlParser.STRING - 404)))) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 500
                self.match(tsqlParser.COMMA)
                self.state = 501
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 502
                self.match(tsqlParser.COMMA)
                self.state = 503
                localctx.state = self.constant_LOCAL_ID()
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 504
                    self.match(tsqlParser.COMMA)
                    self.state = 505
                    self.constant_LOCAL_ID()
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 511
                self.match(tsqlParser.RR_BRACKET)
                self.state = 513
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 512
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Another_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_statement(self):
            return self.getTypedRuleContext(tsqlParser.Declare_statementContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(tsqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(tsqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(tsqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(tsqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)




    def another_statement(self):

        localctx = tsqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_another_statement)
        try:
            self.state = 524
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.declare_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.cursor_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 519
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.security_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 521
                self.set_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 522
                self.transaction_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 523
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FROM)
            else:
                return self.getToken(tsqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)




    def delete_statement(self):

        localctx = tsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 526
                self.with_expression()


            self.state = 529
            self.match(tsqlParser.DELETE)
            self.state = 537
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 530
                self.match(tsqlParser.TOP)
                self.state = 531
                self.match(tsqlParser.LR_BRACKET)
                self.state = 532
                self.expression(0)
                self.state = 533
                self.match(tsqlParser.RR_BRACKET)
                self.state = 535
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 534
                    self.match(tsqlParser.PERCENT)




            self.state = 540
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 539
                self.match(tsqlParser.FROM)


            self.state = 542
            self.delete_statement_from()
            self.state = 544
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 543
                self.insert_with_table_hints()


            self.state = 547
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 546
                self.output_clause()


            self.state = 551
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 549
                self.match(tsqlParser.FROM)
                self.state = 550
                self.table_sources()


            self.state = 566
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 553
                self.match(tsqlParser.WHERE)
                self.state = 564
                token = self._input.LA(1)
                if token in [tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.EXISTS, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 554
                    self.search_condition()

                elif token in [tsqlParser.CURRENT]:
                    self.state = 555
                    self.match(tsqlParser.CURRENT)
                    self.state = 556
                    self.match(tsqlParser.OF)
                    self.state = 562
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 558
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                        if la_ == 1:
                            self.state = 557
                            self.match(tsqlParser.GLOBAL)


                        self.state = 560
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 561
                        localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                        pass



                else:
                    raise NoViableAltException(self)



            self.state = 569
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 568
                self.for_clause()


            self.state = 572
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 571
                self.option_clause()


            self.state = 575
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 574
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statement_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)




    def delete_statement_from(self):

        localctx = tsqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_delete_statement_from)
        try:
            self.state = 581
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.table_alias()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.ddl_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 580
                localctx.table_var = self.match(tsqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)




    def insert_statement(self):

        localctx = tsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 583
                self.with_expression()


            self.state = 586
            self.match(tsqlParser.INSERT)
            self.state = 594
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 587
                self.match(tsqlParser.TOP)
                self.state = 588
                self.match(tsqlParser.LR_BRACKET)
                self.state = 589
                self.expression(0)
                self.state = 590
                self.match(tsqlParser.RR_BRACKET)
                self.state = 592
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 591
                    self.match(tsqlParser.PERCENT)




            self.state = 597
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 596
                self.match(tsqlParser.INTO)


            self.state = 601
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 599
                self.ddl_object()

            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 600
                self.rowset_function_limited()

            else:
                raise NoViableAltException(self)

            self.state = 604
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 603
                self.insert_with_table_hints()


            self.state = 610
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 606
                self.match(tsqlParser.LR_BRACKET)
                self.state = 607
                self.column_name_list()
                self.state = 608
                self.match(tsqlParser.RR_BRACKET)


            self.state = 613
            _la = self._input.LA(1)
            if _la==tsqlParser.OUTPUT:
                self.state = 612
                self.output_clause()


            self.state = 615
            self.insert_statement_value()
            self.state = 617
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 616
                self.for_clause()


            self.state = 620
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 619
                self.option_clause()


            self.state = 623
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 622
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)




    def insert_statement_value(self):

        localctx = tsqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_insert_statement_value)
        try:
            self.state = 630
            token = self._input.LA(1)
            if token in [tsqlParser.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.table_value_constructor()

            elif token in [tsqlParser.SELECT, tsqlParser.WITH, tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.derived_table()

            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.execute_statement()

            elif token in [tsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                self.match(tsqlParser.DEFAULT)
                self.state = 629
                self.match(tsqlParser.VALUES)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = tsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 632
                self.with_expression()


            self.state = 635
            self.query_expression()
            self.state = 637
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 636
                self.order_by_clause()


            self.state = 640
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 639
                self.for_clause()


            self.state = 643
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 642
                self.option_clause()


            self.state = 646
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 645
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def search_condition_list(self):
            return self.getTypedRuleContext(tsqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)




    def update_statement(self):

        localctx = tsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 648
                self.with_expression()


            self.state = 651
            self.match(tsqlParser.UPDATE)
            self.state = 659
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 652
                self.match(tsqlParser.TOP)
                self.state = 653
                self.match(tsqlParser.LR_BRACKET)
                self.state = 654
                self.expression(0)
                self.state = 655
                self.match(tsqlParser.RR_BRACKET)
                self.state = 657
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 656
                    self.match(tsqlParser.PERCENT)




            self.state = 663
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 661
                self.ddl_object()

            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 662
                self.rowset_function_limited()

            else:
                raise NoViableAltException(self)

            self.state = 666
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH or _la==tsqlParser.LR_BRACKET:
                self.state = 665
                self.with_table_hints()


            self.state = 668
            self.match(tsqlParser.SET)
            self.state = 669
            self.update_elem()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 670
                self.match(tsqlParser.COMMA)
                self.state = 671
                self.update_elem()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 678
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 677
                self.output_clause()


            self.state = 682
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 680
                self.match(tsqlParser.FROM)
                self.state = 681
                self.table_sources()


            self.state = 697
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 684
                self.match(tsqlParser.WHERE)
                self.state = 695
                token = self._input.LA(1)
                if token in [tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.EXISTS, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 685
                    self.search_condition_list()

                elif token in [tsqlParser.CURRENT]:
                    self.state = 686
                    self.match(tsqlParser.CURRENT)
                    self.state = 687
                    self.match(tsqlParser.OF)
                    self.state = 693
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        self.state = 689
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                        if la_ == 1:
                            self.state = 688
                            self.match(tsqlParser.GLOBAL)


                        self.state = 691
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 692
                        localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                        pass



                else:
                    raise NoViableAltException(self)



            self.state = 700
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 699
                self.for_clause()


            self.state = 703
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 702
                self.option_clause()


            self.state = 706
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 705
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,i)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)




    def output_clause(self):

        localctx = tsqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(tsqlParser.OUTPUT)
            self.state = 709
            self.output_dml_list_elem()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 710
                self.match(tsqlParser.COMMA)
                self.state = 711
                self.output_dml_list_elem()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 717
                self.match(tsqlParser.INTO)
                self.state = 720
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID]:
                    self.state = 718
                    self.match(tsqlParser.LOCAL_ID)

                elif token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 719
                    self.table_name()

                else:
                    raise NoViableAltException(self)

                self.state = 726
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 722
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 723
                    self.column_name_list()
                    self.state = 724
                    self.match(tsqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_dml_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)




    def output_dml_list_elem(self):

        localctx = tsqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_output_dml_list_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 730
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 731
                self.expression(0)
                pass


            self.state = 738
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 735
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 734
                    self.match(tsqlParser.AS)


                self.state = 737
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(tsqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_column_name" ):
                listener.enterOutput_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_column_name" ):
                listener.exitOutput_column_name(self)




    def output_column_name(self):

        localctx = tsqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_output_column_name)
        try:
            self.state = 751
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 740
                    self.match(tsqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 741
                    self.match(tsqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 742
                    self.table_name()
                    pass


                self.state = 745
                self.match(tsqlParser.DOT)
                self.state = 748
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 746
                    self.match(tsqlParser.STAR)

                elif token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 747
                    self.id_var()

                else:
                    raise NoViableAltException(self)


            elif token in [tsqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.match(tsqlParser.DOLLAR_ACTION)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_varContext
            self.collation_name = None # Id_varContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)




    def create_database(self):

        localctx = tsqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(tsqlParser.CREATE)
            self.state = 754
            self.match(tsqlParser.DATABASE)

            self.state = 755
            localctx.database = self.id_var()
            self.state = 759
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINMENT:
                self.state = 756
                self.match(tsqlParser.CONTAINMENT)
                self.state = 757
                self.match(tsqlParser.EQUAL)
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 773
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 761
                self.match(tsqlParser.ON)
                self.state = 763
                _la = self._input.LA(1)
                if _la==tsqlParser.PRIMARY:
                    self.state = 762
                    self.match(tsqlParser.PRIMARY)


                self.state = 765
                self.database_file_spec()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 766
                    self.match(tsqlParser.COMMA)
                    self.state = 767
                    self.database_file_spec()
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 785
            _la = self._input.LA(1)
            if _la==tsqlParser.LOG:
                self.state = 775
                self.match(tsqlParser.LOG)
                self.state = 776
                self.match(tsqlParser.ON)
                self.state = 777
                self.database_file_spec()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 778
                    self.match(tsqlParser.COMMA)
                    self.state = 779
                    self.database_file_spec()
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 789
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 787
                self.match(tsqlParser.COLLATE)
                self.state = 788
                localctx.collation_name = self.id_var()


            self.state = 800
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 791
                self.match(tsqlParser.WITH)
                self.state = 792
                self.create_database_option()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 793
                    self.match(tsqlParser.COMMA)
                    self.state = 794
                    self.create_database_option()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)




    def create_index(self):

        localctx = tsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(tsqlParser.CREATE)
            self.state = 804
            _la = self._input.LA(1)
            if _la==tsqlParser.UNIQUE:
                self.state = 803
                self.match(tsqlParser.UNIQUE)


            self.state = 807
            _la = self._input.LA(1)
            if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                self.state = 806
                self.clustered()


            self.state = 809
            self.match(tsqlParser.INDEX)
            self.state = 810
            self.id_var()
            self.state = 811
            self.match(tsqlParser.ON)
            self.state = 812
            self.table_name_with_hint()
            self.state = 813
            self.match(tsqlParser.LR_BRACKET)
            self.state = 814
            self.column_name_list()
            self.state = 816
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 815
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 818
            self.match(tsqlParser.RR_BRACKET)
            self.state = 820
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 819
                self.index_options()


            self.state = 824
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 822
                self.match(tsqlParser.ON)
                self.state = 823
                self.id_var()


            self.state = 827
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 826
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.method_name = None # Id_varContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(tsqlParser.TRIGGER, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(tsqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def EXTERNAL(self):
            return self.getToken(tsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def APPEND(self):
            return self.getToken(tsqlParser.APPEND, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger" ):
                listener.enterCreate_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger" ):
                listener.exitCreate_trigger(self)




    def create_trigger(self):

        localctx = tsqlParser.Create_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_create_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(tsqlParser.CREATE)
            self.state = 830
            self.match(tsqlParser.TRIGGER)
            self.state = 831
            self.simple_name()
            self.state = 832
            self.match(tsqlParser.ON)
            self.state = 833
            self.table_name()
            self.state = 839
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 834
                self.match(tsqlParser.WITH)
                self.state = 837
                token = self._input.LA(1)
                if token in [tsqlParser.ENCRYPTION]:
                    self.state = 835
                    self.match(tsqlParser.ENCRYPTION)

                elif token in [tsqlParser.EXECUTE]:
                    self.state = 836
                    self.execute_clause()

                else:
                    raise NoViableAltException(self)



            self.state = 845
            token = self._input.LA(1)
            if token in [tsqlParser.FOR]:
                self.state = 841
                self.match(tsqlParser.FOR)

            elif token in [tsqlParser.AFTER]:
                self.state = 842
                self.match(tsqlParser.AFTER)

            elif token in [tsqlParser.INSTEAD]:
                self.state = 843
                self.match(tsqlParser.INSTEAD)
                self.state = 844
                self.match(tsqlParser.OF)

            else:
                raise NoViableAltException(self)

            self.state = 847
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DELETE or _la==tsqlParser.INSERT or _la==tsqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 850
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 848
                self.match(tsqlParser.WITH)
                self.state = 849
                self.match(tsqlParser.APPEND)


            self.state = 855
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 852
                self.match(tsqlParser.NOT)
                self.state = 853
                self.match(tsqlParser.FOR)
                self.state = 854
                self.match(tsqlParser.REPLICATION)


            self.state = 857
            self.match(tsqlParser.AS)
            self.state = 864
            token = self._input.LA(1)
            if token in [tsqlParser.ALTER, tsqlParser.BEGIN, tsqlParser.BREAK, tsqlParser.CLOSE, tsqlParser.COMMIT, tsqlParser.CONTINUE, tsqlParser.CREATE, tsqlParser.DEALLOCATE, tsqlParser.DECLARE, tsqlParser.DELETE, tsqlParser.DROP, tsqlParser.EXECUTE, tsqlParser.FETCH, tsqlParser.FORCESEEK, tsqlParser.GOTO, tsqlParser.GRANT, tsqlParser.IF, tsqlParser.INSERT, tsqlParser.OPEN, tsqlParser.PRINT, tsqlParser.RAISERROR, tsqlParser.RETURN, tsqlParser.REVERT, tsqlParser.ROLLBACK, tsqlParser.SAVE, tsqlParser.SELECT, tsqlParser.SET, tsqlParser.UPDATE, tsqlParser.USE, tsqlParser.WAITFOR, tsqlParser.WHILE, tsqlParser.WITH, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID, tsqlParser.LR_BRACKET]:
                self.state = 858
                self.sql_clauses()

            elif token in [tsqlParser.EXTERNAL]:
                self.state = 859
                self.match(tsqlParser.EXTERNAL)
                self.state = 860
                self.match(tsqlParser.NAME)
                self.state = 861
                localctx.method_name = self.id_var()
                self.state = 862
                self.match(tsqlParser.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure" ):
                listener.enterCreate_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure" ):
                listener.exitCreate_procedure(self)




    def create_procedure(self):

        localctx = tsqlParser.Create_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_create_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(tsqlParser.CREATE)
            self.state = 867
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PROC or _la==tsqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 868
            self.func_proc_name()
            self.state = 871
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 869
                self.match(tsqlParser.SEMI)
                self.state = 870
                self.match(tsqlParser.DECIMAL)


            self.state = 887
            _la = self._input.LA(1)
            if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.LR_BRACKET:
                self.state = 874
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 873
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 876
                self.procedure_param()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 877
                    self.match(tsqlParser.COMMA)
                    self.state = 878
                    self.procedure_param()
                    self.state = 883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 885
                _la = self._input.LA(1)
                if _la==tsqlParser.RR_BRACKET:
                    self.state = 884
                    self.match(tsqlParser.RR_BRACKET)




            self.state = 898
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 889
                self.match(tsqlParser.WITH)
                self.state = 890
                self.procedure_option()
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 891
                    self.match(tsqlParser.COMMA)
                    self.state = 892
                    self.procedure_option()
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 902
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 900
                self.match(tsqlParser.FOR)
                self.state = 901
                self.match(tsqlParser.REPLICATION)


            self.state = 904
            self.match(tsqlParser.AS)
            self.state = 905
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(tsqlParser.VARYING, 0)

        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param" ):
                listener.enterProcedure_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param" ):
                listener.exitProcedure_param(self)




    def procedure_param(self):

        localctx = tsqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(tsqlParser.LOCAL_ID)
            self.state = 911
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 908
                self.id_var()
                self.state = 909
                self.match(tsqlParser.DOT)


            self.state = 914
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 913
                self.match(tsqlParser.AS)


            self.state = 916
            self.data_type()
            self.state = 918
            _la = self._input.LA(1)
            if _la==tsqlParser.VARYING:
                self.state = 917
                self.match(tsqlParser.VARYING)


            self.state = 922
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 920
                self.match(tsqlParser.EQUAL)
                self.state = 921
                localctx.default_val = self.default_value()


            self.state = 925
            _la = self._input.LA(1)
            if ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.READONLY - 324)))) != 0):
                self.state = 924
                _la = self._input.LA(1)
                if not(((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.READONLY - 324)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_option" ):
                listener.enterProcedure_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_option" ):
                listener.exitProcedure_option(self)




    def procedure_option(self):

        localctx = tsqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_procedure_option)
        try:
            self.state = 930
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.match(tsqlParser.ENCRYPTION)

            elif token in [tsqlParser.RECOMPILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(tsqlParser.RECOMPILE)

            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 929
                self.execute_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_statistics" ):
                listener.enterCreate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_statistics" ):
                listener.exitCreate_statistics(self)




    def create_statistics(self):

        localctx = tsqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(tsqlParser.CREATE)
            self.state = 933
            self.match(tsqlParser.STATISTICS)
            self.state = 934
            self.id_var()
            self.state = 935
            self.match(tsqlParser.ON)
            self.state = 936
            self.table_name_with_hint()
            self.state = 937
            self.match(tsqlParser.LR_BRACKET)
            self.state = 938
            self.column_name_list()
            self.state = 939
            self.match(tsqlParser.RR_BRACKET)
            self.state = 958
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 940
                self.match(tsqlParser.WITH)
                self.state = 946
                token = self._input.LA(1)
                if token in [tsqlParser.FULLSCAN]:
                    self.state = 941
                    self.match(tsqlParser.FULLSCAN)

                elif token in [tsqlParser.SAMPLE]:
                    self.state = 942
                    self.match(tsqlParser.SAMPLE)
                    self.state = 943
                    self.match(tsqlParser.DECIMAL)
                    self.state = 944
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()

                elif token in [tsqlParser.STATS_STREAM]:
                    self.state = 945
                    self.match(tsqlParser.STATS_STREAM)

                else:
                    raise NoViableAltException(self)

                self.state = 950
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 948
                    self.match(tsqlParser.COMMA)
                    self.state = 949
                    self.match(tsqlParser.NORECOMPUTE)


                self.state = 956
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 952
                    self.match(tsqlParser.COMMA)
                    self.state = 953
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 954
                    self.match(tsqlParser.EQUAL)
                    self.state = 955
                    self.on_off()




            self.state = 961
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 960
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DEFAULT)
            else:
                return self.getToken(tsqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = tsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(tsqlParser.CREATE)
            self.state = 964
            self.match(tsqlParser.TABLE)
            self.state = 965
            self.table_name()
            self.state = 966
            self.match(tsqlParser.LR_BRACKET)
            self.state = 967
            self.column_def_table_constraints()
            self.state = 969
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 968
                self.match(tsqlParser.COMMA)


            self.state = 971
            self.match(tsqlParser.RR_BRACKET)
            self.state = 975
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 972
                self.match(tsqlParser.ON)
                self.state = 973
                self.id_var()

            elif la_ == 2:
                self.state = 974
                self.match(tsqlParser.DEFAULT)


            self.state = 980
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 977
                self.match(tsqlParser.TEXTIMAGE_ON)
                self.state = 978
                self.id_var()

            elif la_ == 2:
                self.state = 979
                self.match(tsqlParser.DEFAULT)


            self.state = 983
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 982
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = tsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(tsqlParser.CREATE)
            self.state = 986
            self.match(tsqlParser.VIEW)
            self.state = 987
            self.simple_name()
            self.state = 992
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 988
                self.match(tsqlParser.LR_BRACKET)
                self.state = 989
                self.column_name_list()
                self.state = 990
                self.match(tsqlParser.RR_BRACKET)


            self.state = 1003
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 994
                self.match(tsqlParser.WITH)
                self.state = 995
                self.view_attribute()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 996
                    self.match(tsqlParser.COMMA)
                    self.state = 997
                    self.view_attribute()
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1005
            self.match(tsqlParser.AS)
            self.state = 1006
            self.select_statement()
            self.state = 1010
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1007
                self.match(tsqlParser.WITH)
                self.state = 1008
                self.match(tsqlParser.CHECK)
                self.state = 1009
                self.match(tsqlParser.OPTION)


            self.state = 1013
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1012
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_view_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_attribute" ):
                listener.enterView_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_attribute" ):
                listener.exitView_attribute(self)




    def view_attribute(self):

        localctx = tsqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ENCRYPTION or _la==tsqlParser.SCHEMABINDING or _la==tsqlParser.VIEW_METADATA):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # Id_varContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TABLE)
            else:
                return self.getToken(tsqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def ADD(self):
            return self.getToken(tsqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,0)


        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)




    def alter_table(self):

        localctx = tsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(tsqlParser.ALTER)
            self.state = 1018
            self.match(tsqlParser.TABLE)
            self.state = 1019
            self.table_name()
            self.state = 1050
            token = self._input.LA(1)
            if token in [tsqlParser.SET]:
                self.state = 1020
                self.match(tsqlParser.SET)
                self.state = 1021
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1022
                self.match(tsqlParser.LOCK_ESCALATION)
                self.state = 1023
                self.match(tsqlParser.EQUAL)
                self.state = 1024
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.AUTO or _la==tsqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1025
                self.match(tsqlParser.RR_BRACKET)

            elif token in [tsqlParser.ADD]:
                self.state = 1026
                self.match(tsqlParser.ADD)
                self.state = 1027
                self.column_def_table_constraint()

            elif token in [tsqlParser.DROP]:
                self.state = 1028
                self.match(tsqlParser.DROP)
                self.state = 1029
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1030
                localctx.constraint = self.id_var()

            elif token in [tsqlParser.WITH]:
                self.state = 1031
                self.match(tsqlParser.WITH)
                self.state = 1032
                self.match(tsqlParser.CHECK)
                self.state = 1033
                self.match(tsqlParser.ADD)
                self.state = 1034
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1035
                localctx.constraint = self.id_var()
                self.state = 1036
                self.match(tsqlParser.FOREIGN)
                self.state = 1037
                self.match(tsqlParser.KEY)
                self.state = 1038
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1039
                localctx.fk = self.column_name_list()
                self.state = 1040
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1041
                self.match(tsqlParser.REFERENCES)
                self.state = 1042
                self.table_name()
                self.state = 1043
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1044
                localctx.pk = self.column_name_list()
                self.state = 1045
                self.match(tsqlParser.RR_BRACKET)

            elif token in [tsqlParser.CHECK]:
                self.state = 1047
                self.match(tsqlParser.CHECK)
                self.state = 1048
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1049
                localctx.constraint = self.id_var()

            else:
                raise NoViableAltException(self)

            self.state = 1053
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1052
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_varContext
            self.new_name = None # Id_varContext
            self.collation = None # Id_varContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(tsqlParser.Database_optionspecContext,0)


        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)




    def alter_database(self):

        localctx = tsqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(tsqlParser.ALTER)
            self.state = 1056
            self.match(tsqlParser.DATABASE)
            self.state = 1059
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1057
                localctx.database = self.id_var()

            elif token in [tsqlParser.CURRENT]:
                self.state = 1058
                self.match(tsqlParser.CURRENT)

            else:
                raise NoViableAltException(self)

            self.state = 1073
            token = self._input.LA(1)
            if token in [tsqlParser.MODIFY]:
                self.state = 1061
                self.match(tsqlParser.MODIFY)
                self.state = 1062
                self.match(tsqlParser.NAME)
                self.state = 1063
                self.match(tsqlParser.EQUAL)
                self.state = 1064
                localctx.new_name = self.id_var()

            elif token in [tsqlParser.COLLATE]:
                self.state = 1065
                self.match(tsqlParser.COLLATE)
                self.state = 1066
                localctx.collation = self.id_var()

            elif token in [tsqlParser.SET]:
                self.state = 1067
                self.match(tsqlParser.SET)
                self.state = 1068
                self.database_optionspec()
                self.state = 1071
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1069
                    self.match(tsqlParser.WITH)
                    self.state = 1070
                    self.termination()



            else:
                raise NoViableAltException(self)

            self.state = 1076
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1075
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_optionspecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(tsqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(tsqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(tsqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(tsqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(tsqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(tsqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,0)


        def HADR_options(self):
            return self.getToken(tsqlParser.HADR_options, 0)

        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(tsqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(tsqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(tsqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(tsqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(tsqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(tsqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(tsqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_optionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_optionspec" ):
                listener.enterDatabase_optionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_optionspec" ):
                listener.exitDatabase_optionspec(self)




    def database_optionspec(self):

        localctx = tsqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_database_optionspec)
        try:
            self.state = 1100
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1082
                self.date_correlation_optimization_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1083
                self.db_encryption_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1084
                self.db_state_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1085
                self.db_update_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1086
                self.db_user_access_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1087
                self.delayed_durability_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1088
                self.external_access_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1089
                self.match(tsqlParser.FILESTREAM)
                self.state = 1090
                self.database_filestream_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1091
                self.match(tsqlParser.HADR_options)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1092
                self.mixed_page_allocation_option()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1093
                self.parameterization_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1094
                self.recovery_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1095
                self.service_broker_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1096
                self.snapshot_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1097
                self.sql_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1098
                self.target_recovery_time_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1099
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auto_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(tsqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(tsqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_auto_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_option" ):
                listener.enterAuto_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_option" ):
                listener.exitAuto_option(self)




    def auto_option(self):

        localctx = tsqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 1119
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.match(tsqlParser.AUTO_CLOSE)
                self.state = 1103
                self.on_off()

            elif token in [tsqlParser.AUTO_CREATE_STATISTICS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.match(tsqlParser.AUTO_CREATE_STATISTICS)
                self.state = 1105
                self.match(tsqlParser.OFF)

            elif token in [tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1106
                self.match(tsqlParser.ON)
                self.state = 1111
                token = self._input.LA(1)
                if token in [tsqlParser.INCREMENTAL]:
                    self.state = 1107
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1108
                    self.match(tsqlParser.EQUAL)
                    self.state = 1109
                    self.match(tsqlParser.ON)

                elif token in [tsqlParser.OFF]:
                    self.state = 1110
                    self.match(tsqlParser.OFF)

                else:
                    raise NoViableAltException(self)


            elif token in [tsqlParser.AUTO_SHRINK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1113
                self.match(tsqlParser.AUTO_SHRINK)
                self.state = 1114
                self.on_off()

            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1115
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 1116
                self.on_off()

            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1117
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 1118
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(tsqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Change_tracking_option_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option" ):
                listener.enterChange_tracking_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option" ):
                listener.exitChange_tracking_option(self)




    def change_tracking_option(self):

        localctx = tsqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(tsqlParser.CHANGE_TRACKING)
            self.state = 1122
            self.match(tsqlParser.EQUAL)
            self.state = 1138
            token = self._input.LA(1)
            if token in [tsqlParser.OFF]:
                self.state = 1123
                self.match(tsqlParser.OFF)

            elif token in [tsqlParser.ON]:
                self.state = 1124
                self.match(tsqlParser.ON)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.AUTO_CLEANUP or _la==tsqlParser.CHANGE_RETENTION:
                    self.state = 1125
                    self.change_tracking_option_list()
                    self.state = 1130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1126
                        self.match(tsqlParser.COMMA)
                        self.state = 1127
                        self.change_tracking_option_list()
                        self.state = 1132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(tsqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(tsqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(tsqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(tsqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option_list" ):
                listener.enterChange_tracking_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option_list" ):
                listener.exitChange_tracking_option_list(self)




    def change_tracking_option_list(self):

        localctx = tsqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 1146
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLEANUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.match(tsqlParser.AUTO_CLEANUP)
                self.state = 1141
                self.match(tsqlParser.EQUAL)
                self.state = 1142
                self.on_off()

            elif token in [tsqlParser.CHANGE_RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1143
                self.match(tsqlParser.CHANGE_RETENTION)
                self.state = 1144
                self.match(tsqlParser.EQUAL)
                self.state = 1145
                _la = self._input.LA(1)
                if not(((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & ((1 << (tsqlParser.DAYS - 238)) | (1 << (tsqlParser.HOURS - 238)) | (1 << (tsqlParser.MINUTES - 238)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Containment_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_containment_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainment_option" ):
                listener.enterContainment_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainment_option" ):
                listener.exitContainment_option(self)




    def containment_option(self):

        localctx = tsqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(tsqlParser.CONTAINMENT)
            self.state = 1149
            self.match(tsqlParser.EQUAL)
            self.state = 1150
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(tsqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_option" ):
                listener.enterCursor_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_option" ):
                listener.exitCursor_option(self)




    def cursor_option(self):

        localctx = tsqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 1156
            token = self._input.LA(1)
            if token in [tsqlParser.CURSOR_CLOSE_ON_COMMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1152
                self.match(tsqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 1153
                self.on_off()

            elif token in [tsqlParser.CURSOR_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.match(tsqlParser.CURSOR_DEFAULT)
                self.state = 1155
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_correlation_optimization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_date_correlation_optimization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_correlation_optimization_option" ):
                listener.enterDate_correlation_optimization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_correlation_optimization_option" ):
                listener.exitDate_correlation_optimization_option(self)




    def date_correlation_optimization_option(self):

        localctx = tsqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(tsqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 1159
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_encryption_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_db_encryption_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_encryption_option" ):
                listener.enterDb_encryption_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_encryption_option" ):
                listener.exitDb_encryption_option(self)




    def db_encryption_option(self):

        localctx = tsqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(tsqlParser.ENCRYPTION)
            self.state = 1162
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_state_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(tsqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(tsqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_state_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_state_option" ):
                listener.enterDb_state_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_state_option" ):
                listener.exitDb_state_option(self)




    def db_state_option(self):

        localctx = tsqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            _la = self._input.LA(1)
            if not(_la==tsqlParser.EMERGENCY or _la==tsqlParser.OFFLINE or _la==tsqlParser.ONLINE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_update_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(tsqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_update_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_update_option" ):
                listener.enterDb_update_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_update_option" ):
                listener.exitDb_update_option(self)




    def db_update_option(self):

        localctx = tsqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            _la = self._input.LA(1)
            if not(_la==tsqlParser.READ_ONLY or _la==tsqlParser.READ_WRITE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_user_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(tsqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(tsqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(tsqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_user_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_user_access_option" ):
                listener.enterDb_user_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_user_access_option" ):
                listener.exitDb_user_access_option(self)




    def db_user_access_option(self):

        localctx = tsqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            _la = self._input.LA(1)
            if not(((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (tsqlParser.MULTI_USER - 305)) | (1 << (tsqlParser.RESTRICTED_USER - 305)) | (1 << (tsqlParser.SINGLE_USER - 305)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delayed_durability_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(tsqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(tsqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delayed_durability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayed_durability_option" ):
                listener.enterDelayed_durability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayed_durability_option" ):
                listener.exitDelayed_durability_option(self)




    def delayed_durability_option(self):

        localctx = tsqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(tsqlParser.DELAYED_DURABILITY)
            self.state = 1171
            self.match(tsqlParser.EQUAL)
            self.state = 1172
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALLOWED or _la==tsqlParser.DISABLED or _la==tsqlParser.FORCED):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_external_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_access_option" ):
                listener.enterExternal_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_access_option" ):
                listener.exitExternal_access_option(self)




    def external_access_option(self):

        localctx = tsqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 1199
            token = self._input.LA(1)
            if token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1174
                self.match(tsqlParser.DB_CHAINING)
                self.state = 1175
                self.on_off()

            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 1177
                self.on_off()

            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1178
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 1179
                self.match(tsqlParser.EQUAL)
                self.state = 1182
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1180
                    self.id_var()

                elif token in [tsqlParser.STRING]:
                    self.state = 1181
                    self.match(tsqlParser.STRING)

                else:
                    raise NoViableAltException(self)


            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1184
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 1185
                self.match(tsqlParser.EQUAL)
                self.state = 1188
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1186
                    self.id_var()

                elif token in [tsqlParser.STRING]:
                    self.state = 1187
                    self.match(tsqlParser.STRING)

                else:
                    raise NoViableAltException(self)


            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1190
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 1191
                self.match(tsqlParser.EQUAL)
                self.state = 1192
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1193
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 1194
                self.match(tsqlParser.EQUAL)
                self.state = 1195
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1196
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 1197
                self.match(tsqlParser.EQUAL)
                self.state = 1198
                self.match(tsqlParser.DECIMAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mixed_page_allocation_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_mixed_page_allocation_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_page_allocation_option" ):
                listener.enterMixed_page_allocation_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_page_allocation_option" ):
                listener.exitMixed_page_allocation_option(self)




    def mixed_page_allocation_option(self):

        localctx = tsqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(tsqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 1202
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameterization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_parameterization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterization_option" ):
                listener.enterParameterization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterization_option" ):
                listener.exitParameterization_option(self)




    def parameterization_option(self):

        localctx = tsqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(tsqlParser.PARAMETERIZATION)
            self.state = 1205
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Recovery_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(tsqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(tsqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(tsqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(tsqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_recovery_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecovery_option" ):
                listener.enterRecovery_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecovery_option" ):
                listener.exitRecovery_option(self)




    def recovery_option(self):

        localctx = tsqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 1213
            token = self._input.LA(1)
            if token in [tsqlParser.RECOVERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1207
                self.match(tsqlParser.RECOVERY)
                self.state = 1208
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.BULK_LOGGED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.TORN_PAGE_DETECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(tsqlParser.TORN_PAGE_DETECTION)
                self.state = 1210
                self.on_off()

            elif token in [tsqlParser.PAGE_VERIFY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.match(tsqlParser.PAGE_VERIFY)
                self.state = 1212
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.CHECKSUM or _la==tsqlParser.TORN_PAGE_DETECTION):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Service_broker_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(tsqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(tsqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(tsqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_service_broker_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_broker_option" ):
                listener.enterService_broker_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_broker_option" ):
                listener.exitService_broker_option(self)




    def service_broker_option(self):

        localctx = tsqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_service_broker_option)
        try:
            self.state = 1221
            token = self._input.LA(1)
            if token in [tsqlParser.ENABLE_BROKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.match(tsqlParser.ENABLE_BROKER)

            elif token in [tsqlParser.DISABLE_BROKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1216
                self.match(tsqlParser.DISABLE_BROKER)

            elif token in [tsqlParser.NEW_BROKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1217
                self.match(tsqlParser.NEW_BROKER)

            elif token in [tsqlParser.ERROR_BROKER_CONVERSATIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1218
                self.match(tsqlParser.ERROR_BROKER_CONVERSATIONS)

            elif token in [tsqlParser.HONOR_BROKER_PRIORITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1219
                self.match(tsqlParser.HONOR_BROKER_PRIORITY)
                self.state = 1220
                self.on_off()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Snapshot_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_snapshot_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnapshot_option" ):
                listener.enterSnapshot_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnapshot_option" ):
                listener.exitSnapshot_option(self)




    def snapshot_option(self):

        localctx = tsqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 1228
            token = self._input.LA(1)
            if token in [tsqlParser.ALLOW_SNAPSHOT_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1223
                self.match(tsqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 1224
                self.on_off()

            elif token in [tsqlParser.READ_COMMITTED_SNAPSHOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.match(tsqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 1226
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1227
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(tsqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(tsqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(tsqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(tsqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(tsqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(tsqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_option" ):
                listener.enterSql_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_option" ):
                listener.exitSql_option(self)




    def sql_option(self):

        localctx = tsqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_sql_option)
        try:
            self.state = 1251
            token = self._input.LA(1)
            if token in [tsqlParser.ANSI_NULL_DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.match(tsqlParser.ANSI_NULL_DEFAULT)
                self.state = 1231
                self.on_off()

            elif token in [tsqlParser.ANSI_NULLS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1233
                self.on_off()

            elif token in [tsqlParser.ANSI_PADDING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1234
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1235
                self.on_off()

            elif token in [tsqlParser.ANSI_WARNINGS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1236
                self.match(tsqlParser.ANSI_WARNINGS)
                self.state = 1237
                self.on_off()

            elif token in [tsqlParser.ARITHABORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1238
                self.match(tsqlParser.ARITHABORT)
                self.state = 1239
                self.on_off()

            elif token in [tsqlParser.COMPATIBILITY_LEVEL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1240
                self.match(tsqlParser.COMPATIBILITY_LEVEL)
                self.state = 1241
                self.match(tsqlParser.EQUAL)
                self.state = 1242
                self.match(tsqlParser.DECIMAL)

            elif token in [tsqlParser.CONCAT_NULL_YIELDS_NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1243
                self.match(tsqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 1244
                self.on_off()

            elif token in [tsqlParser.NUMERIC_ROUNDABORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1245
                self.match(tsqlParser.NUMERIC_ROUNDABORT)
                self.state = 1246
                self.on_off()

            elif token in [tsqlParser.QUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1247
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1248
                self.on_off()

            elif token in [tsqlParser.RECURSIVE_TRIGGERS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1249
                self.match(tsqlParser.RECURSIVE_TRIGGERS)
                self.state = 1250
                self.on_off()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_recovery_time_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(tsqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(tsqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_target_recovery_time_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_recovery_time_option" ):
                listener.enterTarget_recovery_time_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_recovery_time_option" ):
                listener.exitTarget_recovery_time_option(self)




    def target_recovery_time_option(self):

        localctx = tsqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(tsqlParser.TARGET_RECOVERY_TIME)
            self.state = 1254
            self.match(tsqlParser.EQUAL)
            self.state = 1255
            self.match(tsqlParser.DECIMAL)
            self.state = 1256
            _la = self._input.LA(1)
            if not(_la==tsqlParser.MINUTES or _la==tsqlParser.SECONDS):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(tsqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(tsqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_termination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermination" ):
                listener.enterTermination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermination" ):
                listener.exitTermination(self)




    def termination(self):

        localctx = tsqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_termination)
        try:
            self.state = 1264
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1258
                self.match(tsqlParser.ROLLBACK)
                self.state = 1259
                self.match(tsqlParser.AFTER)
                self.state = 1260
                localctx.seconds = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.match(tsqlParser.ROLLBACK)
                self.state = 1262
                self.match(tsqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                self.match(tsqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_varContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)




    def drop_index(self):

        localctx = tsqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(tsqlParser.DROP)
            self.state = 1267
            self.match(tsqlParser.INDEX)
            self.state = 1270
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1268
                self.match(tsqlParser.IF)
                self.state = 1269
                self.match(tsqlParser.EXISTS)


            self.state = 1272
            localctx.name = self.id_var()
            self.state = 1275
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 1273
                self.match(tsqlParser.ON)
                self.state = 1274
                self.table_name()


            self.state = 1278
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1277
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)




    def drop_procedure(self):

        localctx = tsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(tsqlParser.DROP)
            self.state = 1281
            self.match(tsqlParser.PROCEDURE)
            self.state = 1284
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1282
                self.match(tsqlParser.IF)
                self.state = 1283
                self.match(tsqlParser.EXISTS)


            self.state = 1286
            self.func_proc_name()
            self.state = 1288
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1287
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_varContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics" ):
                listener.enterDrop_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics" ):
                listener.exitDrop_statistics(self)




    def drop_statistics(self):

        localctx = tsqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_drop_statistics)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.match(tsqlParser.DROP)
            self.state = 1291
            self.match(tsqlParser.STATISTICS)
            self.state = 1295
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1292
                self.table_name()
                self.state = 1293
                self.match(tsqlParser.DOT)


            self.state = 1297
            localctx.name = self.id_var()
            self.state = 1298
            self.match(tsqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)




    def drop_table(self):

        localctx = tsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(tsqlParser.DROP)
            self.state = 1301
            self.match(tsqlParser.TABLE)
            self.state = 1304
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1302
                self.match(tsqlParser.IF)
                self.state = 1303
                self.match(tsqlParser.EXISTS)


            self.state = 1306
            self.table_name()
            self.state = 1308
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1307
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)




    def drop_view(self):

        localctx = tsqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(tsqlParser.DROP)
            self.state = 1311
            self.match(tsqlParser.VIEW)
            self.state = 1314
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1312
                self.match(tsqlParser.IF)
                self.state = 1313
                self.match(tsqlParser.EXISTS)


            self.state = 1316
            self.simple_name()
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1317
                self.match(tsqlParser.COMMA)
                self.state = 1318
                self.simple_name()
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1325
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1324
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)




    def create_type(self):

        localctx = tsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_create_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(tsqlParser.CREATE)
            self.state = 1328
            self.match(tsqlParser.TYPE)
            self.state = 1329
            localctx.name = self.simple_name()
            self.state = 1330
            self.match(tsqlParser.FROM)
            self.state = 1331
            self.data_type()
            self.state = 1332
            self.default_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)




    def drop_type(self):

        localctx = tsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.match(tsqlParser.DROP)
            self.state = 1335
            self.match(tsqlParser.TYPE)
            self.state = 1338
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1336
                self.match(tsqlParser.IF)
                self.state = 1337
                self.match(tsqlParser.EXISTS)


            self.state = 1340
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_function_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(tsqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(tsqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)




    def rowset_function_limited(self):

        localctx = tsqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_rowset_function_limited)
        try:
            self.state = 1344
            token = self._input.LA(1)
            if token in [tsqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.openquery()

            elif token in [tsqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.opendatasource()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # Id_varContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(tsqlParser.OPENQUERY, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)




    def openquery(self):

        localctx = tsqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(tsqlParser.OPENQUERY)
            self.state = 1347
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1348
            localctx.linked_server = self.id_var()
            self.state = 1349
            self.match(tsqlParser.COMMA)
            self.state = 1350
            localctx.query = self.match(tsqlParser.STRING)
            self.state = 1351
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpendatasourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # Id_varContext
            self.scheme = None # Id_varContext
            self.table = None # Id_varContext

        def OPENDATASOURCE(self):
            return self.getToken(tsqlParser.OPENDATASOURCE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)




    def opendatasource(self):

        localctx = tsqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.match(tsqlParser.OPENDATASOURCE)
            self.state = 1354
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1355
            localctx.provider = self.match(tsqlParser.STRING)
            self.state = 1356
            self.match(tsqlParser.COMMA)
            self.state = 1357
            localctx.init = self.match(tsqlParser.STRING)
            self.state = 1358
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1359
            self.match(tsqlParser.DOT)
            self.state = 1361
            _la = self._input.LA(1)
            if _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                self.state = 1360
                localctx.database = self.id_var()


            self.state = 1363
            self.match(tsqlParser.DOT)
            self.state = 1365
            _la = self._input.LA(1)
            if _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                self.state = 1364
                localctx.scheme = self.id_var()


            self.state = 1367
            self.match(tsqlParser.DOT)

            self.state = 1368
            localctx.table = self.id_var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Declare_localContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)




    def declare_statement(self):

        localctx = tsqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1391
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.match(tsqlParser.DECLARE)
                self.state = 1371
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1373
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1372
                    self.match(tsqlParser.AS)


                self.state = 1375
                self.table_type_definition()
                self.state = 1377
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1376
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.match(tsqlParser.DECLARE)
                self.state = 1380
                self.declare_local()
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1381
                    self.match(tsqlParser.COMMA)
                    self.state = 1382
                    self.declare_local()
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1389
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1388
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(tsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def DEALLOCATE(self):
            return self.getToken(tsqlParser.DEALLOCATE, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(tsqlParser.OPEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)




    def cursor_statement(self):

        localctx = tsqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_cursor_statement)
        try:
            self.state = 1419
            token = self._input.LA(1)
            if token in [tsqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                self.match(tsqlParser.CLOSE)
                self.state = 1395
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1394
                    self.match(tsqlParser.GLOBAL)


                self.state = 1397
                self.cursor_name()
                self.state = 1399
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1398
                    self.match(tsqlParser.SEMI)



            elif token in [tsqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1401
                self.match(tsqlParser.DEALLOCATE)
                self.state = 1403
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1402
                    self.match(tsqlParser.GLOBAL)


                self.state = 1405
                self.cursor_name()
                self.state = 1407
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1406
                    self.match(tsqlParser.SEMI)



            elif token in [tsqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1409
                self.declare_cursor()

            elif token in [tsqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1410
                self.fetch_cursor()

            elif token in [tsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1411
                self.match(tsqlParser.OPEN)
                self.state = 1413
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1412
                    self.match(tsqlParser.GLOBAL)


                self.state = 1415
                self.cursor_name()
                self.state = 1417
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1416
                    self.match(tsqlParser.SEMI)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_statement_argContext,i)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_var_stringContext,i)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(tsqlParser.USER, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)




    def execute_statement(self):

        localctx = tsqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_execute_statement)
        self._la = 0 # Token type
        try:
            self.state = 1462
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1421
                self.match(tsqlParser.EXECUTE)
                self.state = 1424
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID:
                    self.state = 1422
                    localctx.return_status = self.match(tsqlParser.LOCAL_ID)
                    self.state = 1423
                    self.match(tsqlParser.EQUAL)


                self.state = 1426
                self.func_proc_name()
                self.state = 1435
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1427
                    self.execute_statement_arg()
                    self.state = 1432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1428
                        self.match(tsqlParser.COMMA)
                        self.state = 1429
                        self.execute_statement_arg()
                        self.state = 1434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1438
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1437
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1440
                self.match(tsqlParser.EXECUTE)
                self.state = 1441
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1442
                self.execute_var_string()
                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.PLUS:
                    self.state = 1443
                    self.match(tsqlParser.PLUS)
                    self.state = 1444
                    self.execute_var_string()
                    self.state = 1449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1450
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1457
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1452
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 1451
                        self.match(tsqlParser.AS)


                    self.state = 1454
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.USER or _la==tsqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1455
                    self.match(tsqlParser.EQUAL)
                    self.state = 1456
                    self.match(tsqlParser.STRING)


                self.state = 1460
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1459
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statement_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)




    def execute_statement_arg(self):

        localctx = tsqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1464
                localctx.parameter = self.match(tsqlParser.LOCAL_ID)
                self.state = 1465
                self.match(tsqlParser.EQUAL)


            self.state = 1477
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.state = 1470
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1468
                    self.constant_LOCAL_ID()

                elif token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1469
                    self.id_var()

                else:
                    raise NoViableAltException(self)

                self.state = 1473
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1472
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.OUT or _la==tsqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()



            elif token in [tsqlParser.DEFAULT]:
                self.state = 1475
                self.match(tsqlParser.DEFAULT)

            elif token in [tsqlParser.NULL]:
                self.state = 1476
                self.match(tsqlParser.NULL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_var_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)




    def execute_var_string(self):

        localctx = tsqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            _la = self._input.LA(1)
            if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self.to_principal = None # Id_varContext
            self.as_principal = None # Id_varContext

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.GRANT)
            else:
                return self.getToken(tsqlParser.GRANT, i)

        def TO(self):
            return self.getToken(tsqlParser.TO, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(tsqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def REVERT(self):
            return self.getToken(tsqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)




    def security_statement(self):

        localctx = tsqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1529
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1481
                self.execute_clause()
                self.state = 1483
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1482
                    self.match(tsqlParser.SEMI)



            elif token in [tsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1485
                self.match(tsqlParser.GRANT)
                self.state = 1497
                token = self._input.LA(1)
                if token in [tsqlParser.ALL]:
                    self.state = 1486
                    self.match(tsqlParser.ALL)
                    self.state = 1488
                    _la = self._input.LA(1)
                    if _la==tsqlParser.PRIVILEGES:
                        self.state = 1487
                        self.match(tsqlParser.PRIVILEGES)



                elif token in [tsqlParser.ALTER, tsqlParser.CREATE, tsqlParser.EXECUTE, tsqlParser.INSERT, tsqlParser.REFERENCES, tsqlParser.SELECT, tsqlParser.VIEW, tsqlParser.CONTROL, tsqlParser.IMPERSONATE, tsqlParser.SHOWPLAN, tsqlParser.TAKE]:
                    self.state = 1490
                    self.grant_permission()
                    self.state = 1495
                    _la = self._input.LA(1)
                    if _la==tsqlParser.LR_BRACKET:
                        self.state = 1491
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1492
                        self.column_name_list()
                        self.state = 1493
                        self.match(tsqlParser.RR_BRACKET)



                else:
                    raise NoViableAltException(self)

                self.state = 1501
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1499
                    self.match(tsqlParser.ON)
                    self.state = 1500
                    localctx.on_id = self.table_name()


                self.state = 1503
                self.match(tsqlParser.TO)

                self.state = 1504
                localctx.to_principal = self.id_var()
                self.state = 1508
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1505
                    self.match(tsqlParser.WITH)
                    self.state = 1506
                    self.match(tsqlParser.GRANT)
                    self.state = 1507
                    self.match(tsqlParser.OPTION)


                self.state = 1512
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1510
                    self.match(tsqlParser.AS)
                    self.state = 1511
                    localctx.as_principal = self.id_var()


                self.state = 1515
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1514
                    self.match(tsqlParser.SEMI)



            elif token in [tsqlParser.REVERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1517
                self.match(tsqlParser.REVERT)
                self.state = 1524
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1518
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1519
                    self.match(tsqlParser.WITH)
                    self.state = 1520
                    self.match(tsqlParser.COOKIE)
                    self.state = 1521
                    self.match(tsqlParser.EQUAL)
                    self.state = 1522
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1523
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1527
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1526
                    self.match(tsqlParser.SEMI)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grant_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def TAKE(self):
            return self.getToken(tsqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(tsqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)




    def grant_permission(self):

        localctx = tsqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1557
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1531
                self.match(tsqlParser.EXECUTE)

            elif token in [tsqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1532
                self.match(tsqlParser.VIEW)
                self.state = 1533
                self.id_var()

            elif token in [tsqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1534
                self.match(tsqlParser.TAKE)
                self.state = 1535
                self.id_var()

            elif token in [tsqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1536
                self.match(tsqlParser.CONTROL)
                self.state = 1538
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 1537
                    self.id_var()



            elif token in [tsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1540
                self.match(tsqlParser.CREATE)
                self.state = 1541
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1542
                self.match(tsqlParser.SHOWPLAN)

            elif token in [tsqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1543
                self.match(tsqlParser.IMPERSONATE)

            elif token in [tsqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1544
                self.match(tsqlParser.SELECT)

            elif token in [tsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1545
                self.match(tsqlParser.REFERENCES)

            elif token in [tsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1546
                self.match(tsqlParser.INSERT)

            elif token in [tsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1547
                self.match(tsqlParser.ALTER)
                self.state = 1555
                _la = self._input.LA(1)
                if _la==tsqlParser.ANY or _la==tsqlParser.DATABASE or _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 1549
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ANY:
                        self.state = 1548
                        self.match(tsqlParser.ANY)


                    self.state = 1553
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1551
                        self.id_var()

                    elif token in [tsqlParser.DATABASE]:
                        self.state = 1552
                        self.match(tsqlParser.DATABASE)

                    else:
                        raise NoViableAltException(self)




            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # Id_varContext

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(tsqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)




    def set_statement(self):

        localctx = tsqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 1598
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1559
                self.match(tsqlParser.SET)
                self.state = 1560
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1563
                _la = self._input.LA(1)
                if _la==tsqlParser.DOT:
                    self.state = 1561
                    self.match(tsqlParser.DOT)
                    self.state = 1562
                    localctx.member_name = self.id_var()


                self.state = 1565
                self.match(tsqlParser.EQUAL)
                self.state = 1566
                self.expression(0)
                self.state = 1568
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1570
                self.match(tsqlParser.SET)
                self.state = 1571
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1572
                self.assignment_operator()
                self.state = 1573
                self.expression(0)
                self.state = 1575
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1574
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1577
                self.match(tsqlParser.SET)
                self.state = 1578
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1579
                self.match(tsqlParser.EQUAL)
                self.state = 1580
                self.match(tsqlParser.CURSOR)
                self.state = 1581
                self.declare_set_cursor_common()
                self.state = 1592
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1582
                    self.match(tsqlParser.FOR)
                    self.state = 1590
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1583
                        self.match(tsqlParser.READ)
                        self.state = 1584
                        self.match(tsqlParser.ONLY)

                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1585
                        self.match(tsqlParser.UPDATE)
                        self.state = 1588
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1586
                            self.match(tsqlParser.OF)
                            self.state = 1587
                            self.column_name_list()



                    else:
                        raise NoViableAltException(self)



                self.state = 1595
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1594
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1597
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(tsqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(tsqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(tsqlParser.COMMIT, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(tsqlParser.SAVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)




    def transaction_statement(self):

        localctx = tsqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 1677
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self.match(tsqlParser.BEGIN)
                self.state = 1601
                self.match(tsqlParser.DISTRIBUTED)
                self.state = 1602
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1605
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1603
                    self.id_var()

                elif la_ == 2:
                    self.state = 1604
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1608
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1607
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1610
                self.match(tsqlParser.BEGIN)
                self.state = 1611
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1621
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1614
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1612
                        self.id_var()

                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1613
                        self.match(tsqlParser.LOCAL_ID)

                    else:
                        raise NoViableAltException(self)

                    self.state = 1619
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                    if la_ == 1:
                        self.state = 1616
                        self.match(tsqlParser.WITH)
                        self.state = 1617
                        self.match(tsqlParser.MARK)
                        self.state = 1618
                        self.match(tsqlParser.STRING)




                self.state = 1624
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1623
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1626
                self.match(tsqlParser.COMMIT)
                self.state = 1627
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1640
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1630
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1628
                        self.id_var()

                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1629
                        self.match(tsqlParser.LOCAL_ID)

                    else:
                        raise NoViableAltException(self)

                    self.state = 1638
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                    if la_ == 1:
                        self.state = 1632
                        self.match(tsqlParser.WITH)
                        self.state = 1633
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1634
                        self.match(tsqlParser.DELAYED_DURABILITY)
                        self.state = 1635
                        self.match(tsqlParser.EQUAL)
                        self.state = 1636
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1637
                        self.match(tsqlParser.RR_BRACKET)




                self.state = 1643
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1642
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1645
                self.match(tsqlParser.COMMIT)
                self.state = 1647
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1646
                    self.match(tsqlParser.WORK)


                self.state = 1650
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1649
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1652
                self.match(tsqlParser.ROLLBACK)
                self.state = 1653
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1656
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1654
                    self.id_var()

                elif la_ == 2:
                    self.state = 1655
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1659
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1658
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1661
                self.match(tsqlParser.ROLLBACK)
                self.state = 1663
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1662
                    self.match(tsqlParser.WORK)


                self.state = 1666
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1665
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1668
                self.match(tsqlParser.SAVE)
                self.state = 1669
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1672
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 1670
                    self.id_var()

                elif la_ == 2:
                    self.state = 1671
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1675
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1674
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Go_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)




    def go_statement(self):

        localctx = tsqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.match(tsqlParser.GO)
            self.state = 1681
            _la = self._input.LA(1)
            if _la==tsqlParser.DECIMAL:
                self.state = 1680
                localctx.count = self.match(tsqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Use_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_varContext

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)




    def use_statement(self):

        localctx = tsqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.match(tsqlParser.USE)
            self.state = 1684
            localctx.database = self.id_var()
            self.state = 1686
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 1685
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)




    def execute_clause(self):

        localctx = tsqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.match(tsqlParser.EXECUTE)
            self.state = 1689
            self.match(tsqlParser.AS)
            self.state = 1690
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CALLER or _la==tsqlParser.OWNER or _la==tsqlParser.SELF or _la==tsqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_localContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)




    def declare_local(self):

        localctx = tsqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1694
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1693
                self.match(tsqlParser.AS)


            self.state = 1696
            self.data_type()
            self.state = 1699
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 1697
                self.match(tsqlParser.EQUAL)
                self.state = 1698
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)




    def table_type_definition(self):

        localctx = tsqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.match(tsqlParser.TABLE)
            self.state = 1702
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1703
            self.column_def_table_constraints()
            self.state = 1704
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)




    def column_def_table_constraints(self):

        localctx = tsqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.column_def_table_constraint()
            self.state = 1713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1708
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 1707
                        self.match(tsqlParser.COMMA)


                    self.state = 1710
                    self.column_def_table_constraint() 
                self.state = 1715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)




    def column_def_table_constraint(self):

        localctx = tsqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_column_def_table_constraint)
        try:
            self.state = 1718
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1716
                self.column_definition()

            elif token in [tsqlParser.CHECK, tsqlParser.CONSTRAINT, tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1717
                self.table_constraint()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # Id_varContext
            self.seed = None # Token
            self.increment = None # Token

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(tsqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)




    def column_definition(self):

        localctx = tsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.id_var()
            self.state = 1724
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1721
                self.data_type()

            elif token in [tsqlParser.AS]:
                self.state = 1722
                self.match(tsqlParser.AS)
                self.state = 1723
                self.expression(0)

            else:
                raise NoViableAltException(self)

            self.state = 1728
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 1726
                self.match(tsqlParser.COLLATE)
                self.state = 1727
                self.id_var()


            self.state = 1731
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 1730
                self.null_notnull()


            self.state = 1756
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 1735
                _la = self._input.LA(1)
                if _la==tsqlParser.CONSTRAINT:
                    self.state = 1733
                    self.match(tsqlParser.CONSTRAINT)
                    self.state = 1734
                    localctx.constraint = self.id_var()


                self.state = 1737
                self.match(tsqlParser.DEFAULT)
                self.state = 1738
                self.constant_expression()
                self.state = 1741
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.match(tsqlParser.WITH)
                    self.state = 1740
                    self.match(tsqlParser.VALUES)



            elif la_ == 2:
                self.state = 1743
                self.match(tsqlParser.IDENTITY)
                self.state = 1749
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 1744
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1745
                    localctx.seed = self.match(tsqlParser.DECIMAL)
                    self.state = 1746
                    self.match(tsqlParser.COMMA)
                    self.state = 1747
                    localctx.increment = self.match(tsqlParser.DECIMAL)
                    self.state = 1748
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1754
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1751
                    self.match(tsqlParser.NOT)
                    self.state = 1752
                    self.match(tsqlParser.FOR)
                    self.state = 1753
                    self.match(tsqlParser.REPLICATION)




            self.state = 1759
            _la = self._input.LA(1)
            if _la==tsqlParser.ROWGUIDCOL:
                self.state = 1758
                self.match(tsqlParser.ROWGUIDCOL)


            self.state = 1764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1761
                    self.column_constraint() 
                self.state = 1766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = tsqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1767
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1768
                self.id_var()


            self.state = 1772
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT or _la==tsqlParser.NULL:
                self.state = 1771
                self.null_notnull()


            self.state = 1795
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1777
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1774
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1775
                    self.match(tsqlParser.KEY)

                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1776
                    self.match(tsqlParser.UNIQUE)

                else:
                    raise NoViableAltException(self)

                self.state = 1780
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1779
                    self.clustered()


                self.state = 1783
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 1782
                    self.index_options()



            elif token in [tsqlParser.CHECK]:
                self.state = 1785
                self.match(tsqlParser.CHECK)
                self.state = 1789
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1786
                    self.match(tsqlParser.NOT)
                    self.state = 1787
                    self.match(tsqlParser.FOR)
                    self.state = 1788
                    self.match(tsqlParser.REPLICATION)


                self.state = 1791
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1792
                self.search_condition()
                self.state = 1793
                self.match(tsqlParser.RR_BRACKET)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = tsqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1797
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1798
                self.id_var()


            self.state = 1832
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1804
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1801
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1802
                    self.match(tsqlParser.KEY)

                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1803
                    self.match(tsqlParser.UNIQUE)

                else:
                    raise NoViableAltException(self)

                self.state = 1807
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1806
                    self.clustered()


                self.state = 1809
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1810
                self.column_name_list()
                self.state = 1812
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 1811
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()


                self.state = 1814
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1816
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 1815
                    self.index_options()


                self.state = 1820
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1818
                    self.match(tsqlParser.ON)
                    self.state = 1819
                    self.id_var()



            elif token in [tsqlParser.CHECK]:
                self.state = 1822
                self.match(tsqlParser.CHECK)
                self.state = 1826
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1823
                    self.match(tsqlParser.NOT)
                    self.state = 1824
                    self.match(tsqlParser.FOR)
                    self.state = 1825
                    self.match(tsqlParser.REPLICATION)


                self.state = 1828
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1829
                self.search_condition()
                self.state = 1830
                self.match(tsqlParser.RR_BRACKET)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = tsqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.match(tsqlParser.WITH)
            self.state = 1835
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1836
            self.index_option()
            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1837
                self.match(tsqlParser.COMMA)
                self.state = 1838
                self.index_option()
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1844
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_option" ):
                listener.enterIndex_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_option" ):
                listener.exitIndex_option(self)




    def index_option(self):

        localctx = tsqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1846
            self.simple_id()
            self.state = 1847
            self.match(tsqlParser.EQUAL)
            self.state = 1851
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.state = 1848
                self.simple_id()

            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.state = 1849
                self.on_off()

            elif token in [tsqlParser.DECIMAL]:
                self.state = 1850
                self.match(tsqlParser.DECIMAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)




    def declare_cursor(self):

        localctx = tsqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.match(tsqlParser.DECLARE)
            self.state = 1854
            self.cursor_name()
            self.state = 1886
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 1855
                self.match(tsqlParser.CURSOR)
                self.state = 1865
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 1856
                    self.declare_set_cursor_common()
                    self.state = 1863
                    _la = self._input.LA(1)
                    if _la==tsqlParser.FOR:
                        self.state = 1857
                        self.match(tsqlParser.FOR)
                        self.state = 1858
                        self.match(tsqlParser.UPDATE)
                        self.state = 1861
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1859
                            self.match(tsqlParser.OF)
                            self.state = 1860
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 1868
                _la = self._input.LA(1)
                if _la==tsqlParser.INSENSITIVE:
                    self.state = 1867
                    self.match(tsqlParser.INSENSITIVE)


                self.state = 1871
                _la = self._input.LA(1)
                if _la==tsqlParser.SCROLL:
                    self.state = 1870
                    self.match(tsqlParser.SCROLL)


                self.state = 1873
                self.match(tsqlParser.CURSOR)
                self.state = 1874
                self.match(tsqlParser.FOR)
                self.state = 1875
                self.select_statement()
                self.state = 1884
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1876
                    self.match(tsqlParser.FOR)
                    self.state = 1882
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1877
                        self.match(tsqlParser.READ)
                        self.state = 1878
                        self.match(tsqlParser.ONLY)

                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1879
                        self.match(tsqlParser.UPDATE)

                    elif token in [tsqlParser.OF]:
                        self.state = 1880
                        self.match(tsqlParser.OF)
                        self.state = 1881
                        self.column_name_list()

                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 1889
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 1888
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_set_cursor_commonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)




    def declare_set_cursor_common(self):

        localctx = tsqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            _la = self._input.LA(1)
            if _la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL:
                self.state = 1891
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1895
            _la = self._input.LA(1)
            if _la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL:
                self.state = 1894
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1898
            _la = self._input.LA(1)
            if ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (tsqlParser.DYNAMIC - 250)) | (1 << (tsqlParser.FAST_FORWARD - 250)) | (1 << (tsqlParser.KEYSET - 250)))) != 0) or _la==tsqlParser.STATIC:
                self.state = 1897
                _la = self._input.LA(1)
                if not(((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (tsqlParser.DYNAMIC - 250)) | (1 << (tsqlParser.FAST_FORWARD - 250)) | (1 << (tsqlParser.KEYSET - 250)))) != 0) or _la==tsqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1901
            _la = self._input.LA(1)
            if ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (tsqlParser.OPTIMISTIC - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.SCROLL_LOCKS - 322)))) != 0):
                self.state = 1900
                _la = self._input.LA(1)
                if not(((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (tsqlParser.OPTIMISTIC - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.SCROLL_LOCKS - 322)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1904
            _la = self._input.LA(1)
            if _la==tsqlParser.TYPE_WARNING:
                self.state = 1903
                self.match(tsqlParser.TYPE_WARNING)


            self.state = 1906
            self.match(tsqlParser.FOR)
            self.state = 1907
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)




    def fetch_cursor(self):

        localctx = tsqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.match(tsqlParser.FETCH)
            self.state = 1919
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 1916
                token = self._input.LA(1)
                if token in [tsqlParser.NEXT]:
                    self.state = 1910
                    self.match(tsqlParser.NEXT)
                    pass
                elif token in [tsqlParser.PRIOR]:
                    self.state = 1911
                    self.match(tsqlParser.PRIOR)
                    pass
                elif token in [tsqlParser.FIRST]:
                    self.state = 1912
                    self.match(tsqlParser.FIRST)
                    pass
                elif token in [tsqlParser.LAST]:
                    self.state = 1913
                    self.match(tsqlParser.LAST)
                    pass
                elif token in [tsqlParser.ABSOLUTE, tsqlParser.RELATIVE]:
                    self.state = 1914
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ABSOLUTE or _la==tsqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1915
                    self.expression(0)
                    pass
                elif token in [tsqlParser.FROM]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 1918
                self.match(tsqlParser.FROM)


            self.state = 1922
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 1921
                self.match(tsqlParser.GLOBAL)


            self.state = 1924
            self.cursor_name()
            self.state = 1934
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 1925
                self.match(tsqlParser.INTO)
                self.state = 1926
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1927
                    self.match(tsqlParser.COMMA)
                    self.state = 1928
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1937
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 1936
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_specialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def IDENTITY_INSERT(self):
            return self.getToken(tsqlParser.IDENTITY_INSERT, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)




    def set_special(self):

        localctx = tsqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_set_special)
        try:
            self.state = 1982
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self.match(tsqlParser.SET)
                self.state = 1940
                self.id_var()
                self.state = 1944
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1941
                    self.id_var()

                elif token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1942
                    self.constant_LOCAL_ID()

                elif token in [tsqlParser.OFF, tsqlParser.ON]:
                    self.state = 1943
                    self.on_off()

                else:
                    raise NoViableAltException(self)

                self.state = 1947
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 1946
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1949
                self.match(tsqlParser.SET)
                self.state = 1950
                self.match(tsqlParser.TRANSACTION)
                self.state = 1951
                self.match(tsqlParser.ISOLATION)
                self.state = 1952
                self.match(tsqlParser.LEVEL)
                self.state = 1961
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 1953
                    self.match(tsqlParser.READ)
                    self.state = 1954
                    self.match(tsqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 1955
                    self.match(tsqlParser.READ)
                    self.state = 1956
                    self.match(tsqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 1957
                    self.match(tsqlParser.REPEATABLE)
                    self.state = 1958
                    self.match(tsqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 1959
                    self.match(tsqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 1960
                    self.match(tsqlParser.SERIALIZABLE)
                    pass


                self.state = 1964
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 1963
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1966
                self.match(tsqlParser.SET)
                self.state = 1967
                self.match(tsqlParser.IDENTITY_INSERT)
                self.state = 1968
                self.table_name()
                self.state = 1969
                self.on_off()
                self.state = 1971
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
                if la_ == 1:
                    self.state = 1970
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1973
                self.match(tsqlParser.SET)
                self.state = 1974
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1975
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1976
                self.match(tsqlParser.SET)
                self.state = 1977
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1978
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1979
                self.match(tsqlParser.SET)
                self.state = 1980
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1981
                self.on_off()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_LOCAL_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)




    def constant_LOCAL_ID(self):

        localctx = tsqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 1986
            token = self._input.LA(1)
            if token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1984
                self.constant()

            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                self.match(tsqlParser.LOCAL_ID)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Binary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression" ):
                listener.enterBinary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression" ):
                listener.exitBinary_operator_expression(self)


    class Primitive_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)
        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)


    class Unary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)


    class Bracket_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)


    class Function_call_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)
        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_expression" ):
                listener.enterFunction_call_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_expression" ):
                listener.exitFunction_call_expression(self)


    class Case_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(tsqlParser.CASE, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_sectionContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)
        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_search_condition_sectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)


    class Column_ref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_ref_expression" ):
                listener.enterColumn_ref_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_ref_expression" ):
                listener.exitColumn_ref_expression(self)


    class Subquery_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_expression" ):
                listener.enterSubquery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_expression" ):
                listener.exitSubquery_expression(self)


    class Over_clause_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_expression" ):
                listener.enterOver_clause_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_expression" ):
                listener.exitOver_clause_expression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1989
                self.match(tsqlParser.BIT_NOT)
                self.state = 1990
                self.expression(6)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1991
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1992
                self.expression(4)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1993
                self.match(tsqlParser.DEFAULT)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1994
                self.match(tsqlParser.NULL)
                pass

            elif la_ == 5:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1995
                self.match(tsqlParser.LOCAL_ID)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1996
                self.constant()
                pass

            elif la_ == 7:
                localctx = tsqlParser.Function_call_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1997
                self.function_call()
                pass

            elif la_ == 8:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1998
                self.match(tsqlParser.CASE)
                self.state = 1999
                localctx.caseExpr = self.expression(0)
                self.state = 2001 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2000
                    self.switch_section()
                    self.state = 2003 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 2007
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 2005
                    self.match(tsqlParser.ELSE)
                    self.state = 2006
                    localctx.elseExpr = self.expression(0)


                self.state = 2009
                self.match(tsqlParser.END)
                pass

            elif la_ == 9:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2011
                self.match(tsqlParser.CASE)
                self.state = 2013 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2012
                    self.switch_search_condition_section()
                    self.state = 2015 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 2019
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 2017
                    self.match(tsqlParser.ELSE)
                    self.state = 2018
                    localctx.elseExpr = self.expression(0)


                self.state = 2021
                self.match(tsqlParser.END)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Column_ref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2023
                self.full_column_name()
                pass

            elif la_ == 11:
                localctx = tsqlParser.Bracket_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2024
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2025
                self.expression(0)
                self.state = 2026
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Subquery_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2028
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2029
                self.subquery()
                self.state = 2030
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Over_clause_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2032
                self.over_clause()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2048
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2035
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2036
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 433)) & ~0x3f) == 0 and ((1 << (_la - 433)) & ((1 << (tsqlParser.STAR - 433)) | (1 << (tsqlParser.DIVIDE - 433)) | (1 << (tsqlParser.MODULE - 433)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 2037
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2038
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2039
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (tsqlParser.PLUS - 436)) | (1 << (tsqlParser.MINUS - 436)) | (1 << (tsqlParser.BIT_OR - 436)) | (1 << (tsqlParser.BIT_AND - 436)) | (1 << (tsqlParser.BIT_XOR - 436)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 2040
                        self.expression(4)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2041
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2042
                        self.comparison_operator()
                        self.state = 2043
                        self.expression(3)
                        pass

                    elif la_ == 4:
                        localctx = tsqlParser.Function_call_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2045
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 2046
                        self.match(tsqlParser.COLLATE)
                        self.state = 2047
                        self.id_var()
                        pass

             
                self.state = 2052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = tsqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_constant_expression)
        try:
            self.state = 2061
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                self.match(tsqlParser.NULL)

            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2054
                self.constant()

            elif token in [tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NULLIF, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2055
                self.function_call()

            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2056
                self.match(tsqlParser.LOCAL_ID)

            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2057
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2058
                self.constant_expression()
                self.state = 2059
                self.match(tsqlParser.RR_BRACKET)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = tsqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)




    def with_expression(self):

        localctx = tsqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(tsqlParser.WITH)
            self.state = 2068
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2066
                self.match(tsqlParser.XMLNAMESPACES)
                self.state = 2067
                self.match(tsqlParser.COMMA)


            self.state = 2070
            self.common_table_expression()
            self.state = 2075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2071
                self.match(tsqlParser.COMMA)
                self.state = 2072
                self.common_table_expression()
                self.state = 2077
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # Id_varContext

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = tsqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            localctx.expression_name = self.id_var()
            self.state = 2083
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 2079
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2080
                self.column_name_list()
                self.state = 2081
                self.match(tsqlParser.RR_BRACKET)


            self.state = 2085
            self.match(tsqlParser.AS)
            self.state = 2086
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2087
            self.select_statement()
            self.state = 2088
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # Id_varContext
            self.method_name = None # Id_varContext

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)




    def update_elem(self):

        localctx = tsqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_update_elem)
        try:
            self.state = 2106
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2092
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2090
                    self.full_column_name()

                elif token in [tsqlParser.LOCAL_ID]:
                    self.state = 2091
                    self.match(tsqlParser.LOCAL_ID)

                else:
                    raise NoViableAltException(self)

                self.state = 2096
                token = self._input.LA(1)
                if token in [tsqlParser.EQUAL]:
                    self.state = 2094
                    self.match(tsqlParser.EQUAL)

                elif token in [tsqlParser.PLUS_ASSIGN, tsqlParser.MINUS_ASSIGN, tsqlParser.MULT_ASSIGN, tsqlParser.DIV_ASSIGN, tsqlParser.MOD_ASSIGN, tsqlParser.AND_ASSIGN, tsqlParser.XOR_ASSIGN, tsqlParser.OR_ASSIGN]:
                    self.state = 2095
                    self.assignment_operator()

                else:
                    raise NoViableAltException(self)

                self.state = 2098
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2099
                localctx.udt_column_name = self.id_var()
                self.state = 2100
                self.match(tsqlParser.DOT)
                self.state = 2101
                localctx.method_name = self.id_var()
                self.state = 2102
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2103
                self.expression_list()
                self.state = 2104
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_list" ):
                listener.enterSearch_condition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_list" ):
                listener.exitSearch_condition_list(self)




    def search_condition_list(self):

        localctx = tsqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.search_condition()
            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2109
                self.match(tsqlParser.COMMA)
                self.state = 2110
                self.search_condition()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_condition_andContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_condition_andContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.OR)
            else:
                return self.getToken(tsqlParser.OR, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)




    def search_condition(self):

        localctx = tsqlParser.Search_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_search_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2116
            self.search_condition_and()
            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.OR:
                self.state = 2117
                self.match(tsqlParser.OR)
                self.state = 2118
                self.search_condition_and()
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_not(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_condition_notContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_condition_notContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.AND)
            else:
                return self.getToken(tsqlParser.AND, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_and" ):
                listener.enterSearch_condition_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_and" ):
                listener.exitSearch_condition_and(self)




    def search_condition_and(self):

        localctx = tsqlParser.Search_condition_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_search_condition_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.search_condition_not()
            self.state = 2129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.AND:
                self.state = 2125
                self.match(tsqlParser.AND)
                self.state = 2126
                self.search_condition_not()
                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_notContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_not" ):
                listener.enterSearch_condition_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_not" ):
                listener.exitSearch_condition_not(self)




    def search_condition_not(self):

        localctx = tsqlParser.Search_condition_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_search_condition_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 2132
                self.match(tsqlParser.NOT)


            self.state = 2135
            self.predicate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def SOME(self):
            return self.getToken(tsqlParser.SOME, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def IN(self):
            return self.getToken(tsqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def LIKE(self):
            return self.getToken(tsqlParser.LIKE, 0)

        def ESCAPE(self):
            return self.getToken(tsqlParser.ESCAPE, 0)

        def IS(self):
            return self.getToken(tsqlParser.IS, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = tsqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2193
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(tsqlParser.EXISTS)
                self.state = 2138
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2139
                self.subquery()
                self.state = 2140
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2142
                self.expression(0)
                self.state = 2143
                self.comparison_operator()
                self.state = 2144
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2146
                self.expression(0)
                self.state = 2147
                self.comparison_operator()
                self.state = 2148
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.ANY or _la==tsqlParser.SOME):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2149
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2150
                self.subquery()
                self.state = 2151
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2153
                self.expression(0)
                self.state = 2155
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2154
                    self.match(tsqlParser.NOT)


                self.state = 2157
                self.match(tsqlParser.BETWEEN)
                self.state = 2158
                self.expression(0)
                self.state = 2159
                self.match(tsqlParser.AND)
                self.state = 2160
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2162
                self.expression(0)
                self.state = 2164
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2163
                    self.match(tsqlParser.NOT)


                self.state = 2166
                self.match(tsqlParser.IN)
                self.state = 2167
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2170
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2168
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2169
                    self.expression_list()
                    pass


                self.state = 2172
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2174
                self.expression(0)
                self.state = 2176
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2175
                    self.match(tsqlParser.NOT)


                self.state = 2178
                self.match(tsqlParser.LIKE)
                self.state = 2179
                self.expression(0)
                self.state = 2182
                _la = self._input.LA(1)
                if _la==tsqlParser.ESCAPE:
                    self.state = 2180
                    self.match(tsqlParser.ESCAPE)
                    self.state = 2181
                    self.expression(0)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2184
                self.expression(0)
                self.state = 2185
                self.match(tsqlParser.IS)
                self.state = 2186
                self.null_notnull()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2188
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2189
                self.search_condition()
                self.state = 2190
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2192
                self.match(tsqlParser.DECIMAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.UnionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.UnionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = tsqlParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            token = self._input.LA(1)
            if token in [tsqlParser.SELECT]:
                self.state = 2195
                self.query_specification()

            elif token in [tsqlParser.LR_BRACKET]:
                self.state = 2196
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2197
                self.query_expression()
                self.state = 2198
                self.match(tsqlParser.RR_BRACKET)

            else:
                raise NoViableAltException(self)

            self.state = 2205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2202
                    self.union() 
                self.state = 2207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(tsqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(tsqlParser.INTERSECT, 0)

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def query_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Query_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Query_expressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion" ):
                listener.enterUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion" ):
                listener.exitUnion(self)




    def union(self):

        localctx = tsqlParser.UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            token = self._input.LA(1)
            if token in [tsqlParser.UNION]:
                self.state = 2208
                self.match(tsqlParser.UNION)
                self.state = 2210
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL:
                    self.state = 2209
                    self.match(tsqlParser.ALL)



            elif token in [tsqlParser.EXCEPT]:
                self.state = 2212
                self.match(tsqlParser.EXCEPT)

            elif token in [tsqlParser.INTERSECT]:
                self.state = 2213
                self.match(tsqlParser.INTERSECT)

            else:
                raise NoViableAltException(self)

            self.state = 2225
            token = self._input.LA(1)
            if token in [tsqlParser.SELECT]:
                self.state = 2216
                self.query_specification()

            elif token in [tsqlParser.LR_BRACKET]:
                self.state = 2221 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2217
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 2218
                        self.query_expression()
                        self.state = 2219
                        self.match(tsqlParser.RR_BRACKET)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2223 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,336,self._ctx)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(tsqlParser.Select_listContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def HAVING(self):
            return self.getToken(tsqlParser.HAVING, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)




    def query_specification(self):

        localctx = tsqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2227
            self.match(tsqlParser.SELECT)
            self.state = 2229
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 2228
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 2240
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 2231
                self.match(tsqlParser.TOP)
                self.state = 2232
                self.expression(0)
                self.state = 2234
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 2233
                    self.match(tsqlParser.PERCENT)


                self.state = 2238
                _la = self._input.LA(1)
                if _la==tsqlParser.WITH:
                    self.state = 2236
                    self.match(tsqlParser.WITH)
                    self.state = 2237
                    self.match(tsqlParser.TIES)




            self.state = 2242
            self.select_list()
            self.state = 2245
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 2243
                self.match(tsqlParser.INTO)
                self.state = 2244
                self.table_name()


            self.state = 2249
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 2247
                self.match(tsqlParser.FROM)
                self.state = 2248
                self.table_sources()


            self.state = 2253
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2251
                self.match(tsqlParser.WHERE)
                self.state = 2252
                localctx.where = self.search_condition()


            self.state = 2265
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 2255
                self.match(tsqlParser.GROUP)
                self.state = 2256
                self.match(tsqlParser.BY)
                self.state = 2257
                self.group_by_item()
                self.state = 2262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2258
                        self.match(tsqlParser.COMMA)
                        self.state = 2259
                        self.group_by_item() 
                    self.state = 2264
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,345,self._ctx)



            self.state = 2269
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2267
                self.match(tsqlParser.HAVING)
                self.state = 2268
                localctx.having = self.search_condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Order_by_expressionContext,i)


        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ROW)
            else:
                return self.getToken(tsqlParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ROWS)
            else:
                return self.getToken(tsqlParser.ROWS, i)

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = tsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            self.match(tsqlParser.ORDER)
            self.state = 2272
            self.match(tsqlParser.BY)
            self.state = 2273
            self.order_by_expression()
            self.state = 2278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2274
                    self.match(tsqlParser.COMMA)
                    self.state = 2275
                    self.order_by_expression() 
                self.state = 2280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

            self.state = 2292
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 2281
                self.match(tsqlParser.OFFSET)
                self.state = 2282
                self.expression(0)
                self.state = 2283
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2290
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                if la_ == 1:
                    self.state = 2284
                    self.match(tsqlParser.FETCH)
                    self.state = 2285
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.FIRST or _la==tsqlParser.NEXT):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 2286
                    self.expression(0)
                    self.state = 2287
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 2288
                    self.match(tsqlParser.ONLY)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(tsqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def xml_common_directives(self):
            return self.getTypedRuleContext(tsqlParser.Xml_common_directivesContext,0)


        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)




    def for_clause(self):

        localctx = tsqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_for_clause)
        try:
            self.state = 2313
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2294
                self.match(tsqlParser.FOR)
                self.state = 2295
                self.match(tsqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2296
                self.match(tsqlParser.FOR)
                self.state = 2297
                self.match(tsqlParser.XML)
                self.state = 2298
                self.match(tsqlParser.AUTO)
                self.state = 2300
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 2299
                    self.xml_common_directives()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2302
                self.match(tsqlParser.FOR)
                self.state = 2303
                self.match(tsqlParser.XML)
                self.state = 2304
                self.match(tsqlParser.PATH)
                self.state = 2308
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 2305
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2306
                    self.match(tsqlParser.STRING)
                    self.state = 2307
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2311
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                if la_ == 1:
                    self.state = 2310
                    self.xml_common_directives()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_common_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)




    def xml_common_directives(self):

        localctx = tsqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            self.match(tsqlParser.COMMA)
            self.state = 2320
            token = self._input.LA(1)
            if token in [tsqlParser.BINARY]:
                self.state = 2316
                self.match(tsqlParser.BINARY)
                self.state = 2317
                self.match(tsqlParser.BASE64)

            elif token in [tsqlParser.TYPE]:
                self.state = 2318
                self.match(tsqlParser.TYPE)

            elif token in [tsqlParser.ROOT]:
                self.state = 2319
                self.match(tsqlParser.ROOT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)




    def order_by_expression(self):

        localctx = tsqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.expression(0)
            self.state = 2324
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 2323
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)




    def group_by_item(self):

        localctx = tsqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.OptionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)




    def option_clause(self):

        localctx = tsqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.match(tsqlParser.OPTION)
            self.state = 2329
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2330
            self.option()
            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2331
                self.match(tsqlParser.COMMA)
                self.state = 2332
                self.option()
                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2338
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(tsqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Optimize_for_argContext,i)


        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)




    def option(self):

        localctx = tsqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2385
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2340
                self.match(tsqlParser.FAST)
                self.state = 2341
                localctx.number_rows = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2342
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ORDER or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2343
                self.match(tsqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2344
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.CONCAT or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2345
                self.match(tsqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2346
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2347
                self.match(tsqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2348
                self.match(tsqlParser.EXPAND)
                self.state = 2349
                self.match(tsqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2350
                self.match(tsqlParser.FORCE)
                self.state = 2351
                self.match(tsqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2352
                self.match(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2353
                self.match(tsqlParser.KEEP)
                self.state = 2354
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2355
                self.match(tsqlParser.KEEPFIXED)
                self.state = 2356
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2357
                self.match(tsqlParser.MAXDOP)
                self.state = 2358
                localctx.number_of_processors = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2359
                self.match(tsqlParser.MAXRECURSION)
                self.state = 2360
                localctx.number_recursion = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2361
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2362
                self.match(tsqlParser.FOR)
                self.state = 2363
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2364
                self.optimize_for_arg()
                self.state = 2369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2365
                    self.match(tsqlParser.COMMA)
                    self.state = 2366
                    self.optimize_for_arg()
                    self.state = 2371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2372
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2374
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2375
                self.match(tsqlParser.FOR)
                self.state = 2376
                self.match(tsqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2377
                self.match(tsqlParser.PARAMETERIZATION)
                self.state = 2378
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2379
                self.match(tsqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2380
                self.match(tsqlParser.ROBUST)
                self.state = 2381
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2382
                self.match(tsqlParser.USE)
                self.state = 2383
                self.match(tsqlParser.PLAN)
                self.state = 2384
                self.match(tsqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Optimize_for_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)




    def optimize_for_arg(self):

        localctx = tsqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2391
            token = self._input.LA(1)
            if token in [tsqlParser.UNKNOWN]:
                self.state = 2388
                self.match(tsqlParser.UNKNOWN)

            elif token in [tsqlParser.EQUAL]:
                self.state = 2389
                self.match(tsqlParser.EQUAL)
                self.state = 2390
                self.constant()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Select_list_elemContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = tsqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2393
            self.select_list_elem()
            self.state = 2398
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2394
                    self.match(tsqlParser.COMMA)
                    self.state = 2395
                    self.select_list_elem() 
                self.state = 2400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,361,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)




    def select_list_elem(self):

        localctx = tsqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_select_list_elem)
        self._la = 0 # Token type
        try:
            self.state = 2422
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2404
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 2401
                    self.table_name()
                    self.state = 2402
                    self.match(tsqlParser.DOT)


                self.state = 2409
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2406
                    self.match(tsqlParser.STAR)

                elif token in [tsqlParser.DOLLAR]:
                    self.state = 2407
                    self.match(tsqlParser.DOLLAR)
                    self.state = 2408
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.IDENTITY or _la==tsqlParser.ROWGUID):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()

                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2411
                self.column_alias()
                self.state = 2412
                self.match(tsqlParser.EQUAL)
                self.state = 2413
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2415
                self.expression(0)
                self.state = 2420
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 2417
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 2416
                        self.match(tsqlParser.AS)


                    self.state = 2419
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)




    def table_sources(self):

        localctx = tsqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2424
            self.table_source()
            self.state = 2429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2425
                    self.match(tsqlParser.COMMA)
                    self.state = 2426
                    self.table_source() 
                self.state = 2431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item_joined(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_item_joinedContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source" ):
                listener.enterTable_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source" ):
                listener.exitTable_source(self)




    def table_source(self):

        localctx = tsqlParser.Table_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_table_source)
        try:
            self.state = 2437
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2432
                self.table_source_item_joined()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2433
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2434
                self.table_source_item_joined()
                self.state = 2435
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_source_item_joinedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_itemContext,0)


        def join_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Join_partContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Join_partContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item_joined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_joined" ):
                listener.enterTable_source_item_joined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_joined" ):
                listener.exitTable_source_item_joined(self)




    def table_source_item_joined(self):

        localctx = tsqlParser.Table_source_item_joinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_table_source_item_joined)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self.table_source_item()
            self.state = 2443
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2440
                    self.join_part() 
                self.state = 2445
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_source_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(tsqlParser.As_table_aliasContext,0)


        def rowset_function(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_functionContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)


        def change_table(self):
            return self.getTypedRuleContext(tsqlParser.Change_tableContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item" ):
                listener.enterTable_source_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item" ):
                listener.exitTable_source_item(self)




    def table_source_item(self):

        localctx = tsqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_table_source_item)
        try:
            self.state = 2481
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2446
                self.table_name_with_hint()
                self.state = 2448
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 2447
                    self.as_table_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2450
                self.rowset_function()
                self.state = 2452
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                if la_ == 1:
                    self.state = 2451
                    self.as_table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2454
                self.derived_table()
                self.state = 2459
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 2455
                    self.as_table_alias()
                    self.state = 2457
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
                    if la_ == 1:
                        self.state = 2456
                        self.column_alias_list()




                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2461
                self.change_table()
                self.state = 2462
                self.as_table_alias()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2464
                self.function_call()
                self.state = 2466
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2465
                    self.as_table_alias()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2468
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2470
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                if la_ == 1:
                    self.state = 2469
                    self.as_table_alias()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2472
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2473
                self.match(tsqlParser.DOT)
                self.state = 2474
                self.function_call()
                self.state = 2479
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 2475
                    self.as_table_alias()
                    self.state = 2477
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                    if la_ == 1:
                        self.state = 2476
                        self.column_alias_list()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(tsqlParser.CHANGETABLE, 0)

        def CHANGES(self):
            return self.getToken(tsqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)




    def change_table(self):

        localctx = tsqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2483
            self.match(tsqlParser.CHANGETABLE)
            self.state = 2484
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2485
            self.match(tsqlParser.CHANGES)
            self.state = 2486
            self.table_name()
            self.state = 2487
            self.match(tsqlParser.COMMA)
            self.state = 2488
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NULL or _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 2489
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_type = None # Token
            self.join_hint = None # Token

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def table_source(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourceContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(tsqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_join_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_part" ):
                listener.enterJoin_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_part" ):
                listener.exitJoin_part(self)




    def join_part(self):

        localctx = tsqlParser.Join_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_join_part)
        self._la = 0 # Token type
        try:
            self.state = 2517
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2498
                token = self._input.LA(1)
                if token in [tsqlParser.INNER, tsqlParser.JOIN, tsqlParser.MERGE, tsqlParser.HASH, tsqlParser.LOOP, tsqlParser.REMOTE]:
                    self.state = 2492
                    _la = self._input.LA(1)
                    if _la==tsqlParser.INNER:
                        self.state = 2491
                        self.match(tsqlParser.INNER)



                elif token in [tsqlParser.FULL, tsqlParser.LEFT, tsqlParser.RIGHT]:
                    self.state = 2494
                    localctx.join_type = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.FULL or _la==tsqlParser.LEFT or _la==tsqlParser.RIGHT):
                        localctx.join_type = self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 2496
                    _la = self._input.LA(1)
                    if _la==tsqlParser.OUTER:
                        self.state = 2495
                        self.match(tsqlParser.OUTER)



                else:
                    raise NoViableAltException(self)

                self.state = 2501
                _la = self._input.LA(1)
                if _la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE:
                    self.state = 2500
                    localctx.join_hint = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE):
                        localctx.join_hint = self._errHandler.recoverInline(self)
                    else:
                        self.consume()


                self.state = 2503
                self.match(tsqlParser.JOIN)
                self.state = 2504
                self.table_source()
                self.state = 2505
                self.match(tsqlParser.ON)
                self.state = 2506
                self.search_condition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2508
                self.match(tsqlParser.CROSS)
                self.state = 2509
                self.match(tsqlParser.JOIN)
                self.state = 2510
                self.table_source()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2511
                self.match(tsqlParser.CROSS)
                self.state = 2512
                self.match(tsqlParser.APPLY)
                self.state = 2513
                self.table_source()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2514
                self.match(tsqlParser.OUTER)
                self.state = 2515
                self.match(tsqlParser.APPLY)
                self.state = 2516
                self.table_source()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_name_with_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name_with_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name_with_hint" ):
                listener.enterTable_name_with_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name_with_hint" ):
                listener.exitTable_name_with_hint(self)




    def table_name_with_hint(self):

        localctx = tsqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2519
            self.table_name()
            self.state = 2521
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2520
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(tsqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def BULK(self):
            return self.getToken(tsqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Bulk_optionContext,i)


        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)




    def rowset_function(self):

        localctx = tsqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 2549
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2523
                self.match(tsqlParser.OPENROWSET)
                self.state = 2524
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2525
                localctx.provider_name = self.match(tsqlParser.STRING)
                self.state = 2526
                self.match(tsqlParser.COMMA)
                self.state = 2527
                localctx.connectionString = self.match(tsqlParser.STRING)
                self.state = 2528
                self.match(tsqlParser.COMMA)
                self.state = 2529
                localctx.sql = self.match(tsqlParser.STRING)
                self.state = 2530
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2531
                self.match(tsqlParser.OPENROWSET)
                self.state = 2532
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2533
                self.match(tsqlParser.BULK)
                self.state = 2534
                localctx.data_file = self.match(tsqlParser.STRING)
                self.state = 2535
                self.match(tsqlParser.COMMA)
                self.state = 2545
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 2536
                    self.bulk_option()
                    self.state = 2541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2537
                        self.match(tsqlParser.COMMA)
                        self.state = 2538
                        self.bulk_option()
                        self.state = 2543
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2544
                    self.id_var()
                    pass


                self.state = 2547
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bulk_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)




    def bulk_option(self):

        localctx = tsqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2551
            self.id_var()
            self.state = 2552
            self.match(tsqlParser.EQUAL)
            self.state = 2553
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)




    def derived_table(self):

        localctx = tsqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_derived_table)
        try:
            self.state = 2560
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2555
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2556
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2557
                self.subquery()
                self.state = 2558
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.style = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Ranking_windowed_functionContext,0)


        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Aggregate_windowed_functionContext,0)


        def scalar_function_name(self):
            return self.getTypedRuleContext(tsqlParser.Scalar_function_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def CONVERT(self):
            return self.getToken(tsqlParser.CONVERT, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def COALESCE(self):
            return self.getToken(tsqlParser.COALESCE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(tsqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(tsqlParser.CURRENT_USER, 0)

        def DATEADD(self):
            return self.getToken(tsqlParser.DATEADD, 0)

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def DATEDIFF(self):
            return self.getToken(tsqlParser.DATEDIFF, 0)

        def DATENAME(self):
            return self.getToken(tsqlParser.DATENAME, 0)

        def DATEPART(self):
            return self.getToken(tsqlParser.DATEPART, 0)

        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0)

        def NULLIF(self):
            return self.getToken(tsqlParser.NULLIF, 0)

        def SESSION_USER(self):
            return self.getToken(tsqlParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(tsqlParser.SYSTEM_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = tsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 2659
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2562
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2563
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2564
                self.scalar_function_name()
                self.state = 2565
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2567
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (tsqlParser.FORCESEEK - 72)) | (1 << (tsqlParser.IDENTITY - 72)) | (1 << (tsqlParser.LEFT - 72)) | (1 << (tsqlParser.NULL - 72)) | (1 << (tsqlParser.NULLIF - 72)) | (1 << (tsqlParser.OVER - 72)))) != 0) or ((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & ((1 << (tsqlParser.RIGHT - 146)) | (1 << (tsqlParser.SESSION_USER - 146)) | (1 << (tsqlParser.SYSTEM_USER - 146)) | (1 << (tsqlParser.ABSOLUTE - 146)) | (1 << (tsqlParser.APPLY - 146)) | (1 << (tsqlParser.AUTO - 146)))) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & ((1 << (tsqlParser.AVG - 212)) | (1 << (tsqlParser.BASE64 - 212)) | (1 << (tsqlParser.BINARY_CHECKSUM - 212)) | (1 << (tsqlParser.CALLER - 212)) | (1 << (tsqlParser.CAST - 212)) | (1 << (tsqlParser.CATCH - 212)) | (1 << (tsqlParser.CHECKSUM - 212)) | (1 << (tsqlParser.CHECKSUM_AGG - 212)) | (1 << (tsqlParser.COMMITTED - 212)) | (1 << (tsqlParser.CONCAT - 212)) | (1 << (tsqlParser.CONTROL - 212)) | (1 << (tsqlParser.COOKIE - 212)) | (1 << (tsqlParser.COUNT - 212)) | (1 << (tsqlParser.COUNT_BIG - 212)) | (1 << (tsqlParser.DATEADD - 212)) | (1 << (tsqlParser.DATEDIFF - 212)) | (1 << (tsqlParser.DATENAME - 212)) | (1 << (tsqlParser.DATEPART - 212)) | (1 << (tsqlParser.DELAY - 212)) | (1 << (tsqlParser.DELETED - 212)) | (1 << (tsqlParser.DENSE_RANK - 212)) | (1 << (tsqlParser.DISABLE - 212)) | (1 << (tsqlParser.DYNAMIC - 212)) | (1 << (tsqlParser.ENCRYPTION - 212)) | (1 << (tsqlParser.EXPAND - 212)) | (1 << (tsqlParser.FAST - 212)) | (1 << (tsqlParser.FAST_FORWARD - 212)) | (1 << (tsqlParser.FIRST - 212)) | (1 << (tsqlParser.FOLLOWING - 212)) | (1 << (tsqlParser.FORCE - 212)) | (1 << (tsqlParser.FORCED - 212)) | (1 << (tsqlParser.FORWARD_ONLY - 212)) | (1 << (tsqlParser.FULLSCAN - 212)) | (1 << (tsqlParser.GLOBAL - 212)) | (1 << (tsqlParser.GO - 212)) | (1 << (tsqlParser.GROUPING - 212)) | (1 << (tsqlParser.GROUPING_ID - 212)) | (1 << (tsqlParser.HASH - 212)))) != 0) or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 276)) | (1 << (tsqlParser.IMPERSONATE - 276)) | (1 << (tsqlParser.INSENSITIVE - 276)) | (1 << (tsqlParser.INSERTED - 276)) | (1 << (tsqlParser.ISOLATION - 276)) | (1 << (tsqlParser.KEEP - 276)) | (1 << (tsqlParser.KEEPFIXED - 276)) | (1 << (tsqlParser.KEYSET - 276)) | (1 << (tsqlParser.LAST - 276)) | (1 << (tsqlParser.LEVEL - 276)) | (1 << (tsqlParser.LOCAL - 276)) | (1 << (tsqlParser.LOCK_ESCALATION - 276)) | (1 << (tsqlParser.LOGIN - 276)) | (1 << (tsqlParser.LOOP - 276)) | (1 << (tsqlParser.MARK - 276)) | (1 << (tsqlParser.MAX - 276)) | (1 << (tsqlParser.MAXDOP - 276)) | (1 << (tsqlParser.MAXRECURSION - 276)) | (1 << (tsqlParser.MIN - 276)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 276)) | (1 << (tsqlParser.MODIFY - 276)) | (1 << (tsqlParser.NAME - 276)) | (1 << (tsqlParser.NEXT - 276)) | (1 << (tsqlParser.NOCOUNT - 276)) | (1 << (tsqlParser.NOEXPAND - 276)) | (1 << (tsqlParser.NORECOMPUTE - 276)) | (1 << (tsqlParser.NTILE - 276)) | (1 << (tsqlParser.NUMBER - 276)) | (1 << (tsqlParser.OFFSET - 276)) | (1 << (tsqlParser.ONLINE - 276)) | (1 << (tsqlParser.ONLY - 276)) | (1 << (tsqlParser.OPTIMISTIC - 276)) | (1 << (tsqlParser.OPTIMIZE - 276)) | (1 << (tsqlParser.OUT - 276)) | (1 << (tsqlParser.OUTPUT - 276)) | (1 << (tsqlParser.OWNER - 276)) | (1 << (tsqlParser.PARAMETERIZATION - 276)) | (1 << (tsqlParser.PARTITION - 276)) | (1 << (tsqlParser.PATH - 276)) | (1 << (tsqlParser.PRECEDING - 276)) | (1 << (tsqlParser.PRIOR - 276)) | (1 << (tsqlParser.PRIVILEGES - 276)) | (1 << (tsqlParser.RANGE - 276)) | (1 << (tsqlParser.RANK - 276)) | (1 << (tsqlParser.READONLY - 276)) | (1 << (tsqlParser.READ_ONLY - 276)))) != 0) or ((((_la - 341)) & ~0x3f) == 0 and ((1 << (_la - 341)) & ((1 << (tsqlParser.RECOMPILE - 341)) | (1 << (tsqlParser.RELATIVE - 341)) | (1 << (tsqlParser.REMOTE - 341)) | (1 << (tsqlParser.REPEATABLE - 341)) | (1 << (tsqlParser.ROBUST - 341)) | (1 << (tsqlParser.ROOT - 341)) | (1 << (tsqlParser.ROW - 341)) | (1 << (tsqlParser.ROWGUID - 341)) | (1 << (tsqlParser.ROWS - 341)) | (1 << (tsqlParser.ROW_NUMBER - 341)) | (1 << (tsqlParser.SAMPLE - 341)) | (1 << (tsqlParser.SCHEMABINDING - 341)) | (1 << (tsqlParser.SCROLL - 341)) | (1 << (tsqlParser.SCROLL_LOCKS - 341)) | (1 << (tsqlParser.SELF - 341)) | (1 << (tsqlParser.SERIALIZABLE - 341)) | (1 << (tsqlParser.SIMPLE - 341)) | (1 << (tsqlParser.SNAPSHOT - 341)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 341)) | (1 << (tsqlParser.STATIC - 341)) | (1 << (tsqlParser.STATS_STREAM - 341)) | (1 << (tsqlParser.STDEV - 341)) | (1 << (tsqlParser.STDEVP - 341)) | (1 << (tsqlParser.SUM - 341)) | (1 << (tsqlParser.TEXTIMAGE_ON - 341)) | (1 << (tsqlParser.THROW - 341)) | (1 << (tsqlParser.TIES - 341)) | (1 << (tsqlParser.TIME - 341)) | (1 << (tsqlParser.TRY - 341)) | (1 << (tsqlParser.TYPE - 341)) | (1 << (tsqlParser.TYPE_WARNING - 341)) | (1 << (tsqlParser.UNBOUNDED - 341)) | (1 << (tsqlParser.UNCOMMITTED - 341)) | (1 << (tsqlParser.UNKNOWN - 341)) | (1 << (tsqlParser.USING - 341)) | (1 << (tsqlParser.VAR - 341)) | (1 << (tsqlParser.VARP - 341)) | (1 << (tsqlParser.VIEWS - 341)) | (1 << (tsqlParser.VIEW_METADATA - 341)) | (1 << (tsqlParser.WORK - 341)) | (1 << (tsqlParser.XML - 341)) | (1 << (tsqlParser.XMLNAMESPACES - 341)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 341)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 341)) | (1 << (tsqlParser.LOCAL_ID - 341)))) != 0) or ((((_la - 405)) & ~0x3f) == 0 and ((1 << (_la - 405)) & ((1 << (tsqlParser.DECIMAL - 405)) | (1 << (tsqlParser.ID - 405)) | (1 << (tsqlParser.STRING - 405)) | (1 << (tsqlParser.BINARY - 405)) | (1 << (tsqlParser.FLOAT - 405)) | (1 << (tsqlParser.REAL - 405)) | (1 << (tsqlParser.DOLLAR - 405)) | (1 << (tsqlParser.LR_BRACKET - 405)) | (1 << (tsqlParser.PLUS - 405)) | (1 << (tsqlParser.MINUS - 405)) | (1 << (tsqlParser.BIT_NOT - 405)))) != 0):
                    self.state = 2566
                    self.expression_list()


                self.state = 2569
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2571
                self.match(tsqlParser.BINARY_CHECKSUM)
                self.state = 2572
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2573
                self.match(tsqlParser.STAR)
                self.state = 2574
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2575
                self.match(tsqlParser.CAST)
                self.state = 2576
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2577
                self.expression(0)
                self.state = 2578
                self.match(tsqlParser.AS)
                self.state = 2579
                self.data_type()
                self.state = 2580
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2582
                self.match(tsqlParser.CONVERT)
                self.state = 2583
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2584
                self.data_type()
                self.state = 2585
                self.match(tsqlParser.COMMA)
                self.state = 2586
                self.expression(0)
                self.state = 2589
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2587
                    self.match(tsqlParser.COMMA)
                    self.state = 2588
                    localctx.style = self.expression(0)


                self.state = 2591
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2593
                self.match(tsqlParser.CHECKSUM)
                self.state = 2594
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2595
                self.match(tsqlParser.STAR)
                self.state = 2596
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2597
                self.match(tsqlParser.COALESCE)
                self.state = 2598
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2599
                self.expression_list()
                self.state = 2600
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2602
                self.match(tsqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2603
                self.match(tsqlParser.CURRENT_USER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2604
                self.match(tsqlParser.DATEADD)
                self.state = 2605
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2606
                self.match(tsqlParser.ID)
                self.state = 2607
                self.match(tsqlParser.COMMA)
                self.state = 2608
                self.expression(0)
                self.state = 2609
                self.match(tsqlParser.COMMA)
                self.state = 2610
                self.expression(0)
                self.state = 2611
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2613
                self.match(tsqlParser.DATEDIFF)
                self.state = 2614
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2615
                self.match(tsqlParser.ID)
                self.state = 2616
                self.match(tsqlParser.COMMA)
                self.state = 2617
                self.expression(0)
                self.state = 2618
                self.match(tsqlParser.COMMA)
                self.state = 2619
                self.expression(0)
                self.state = 2620
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2622
                self.match(tsqlParser.DATENAME)
                self.state = 2623
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2624
                self.match(tsqlParser.ID)
                self.state = 2625
                self.match(tsqlParser.COMMA)
                self.state = 2626
                self.expression(0)
                self.state = 2627
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2629
                self.match(tsqlParser.DATEPART)
                self.state = 2630
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2631
                self.match(tsqlParser.ID)
                self.state = 2632
                self.match(tsqlParser.COMMA)
                self.state = 2633
                self.expression(0)
                self.state = 2634
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2636
                self.match(tsqlParser.IDENTITY)
                self.state = 2637
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2638
                self.data_type()
                self.state = 2641
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
                if la_ == 1:
                    self.state = 2639
                    self.match(tsqlParser.COMMA)
                    self.state = 2640
                    localctx.seed = self.match(tsqlParser.DECIMAL)


                self.state = 2645
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2643
                    self.match(tsqlParser.COMMA)
                    self.state = 2644
                    localctx.increment = self.match(tsqlParser.DECIMAL)


                self.state = 2647
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2649
                self.match(tsqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2650
                self.match(tsqlParser.NULLIF)
                self.state = 2651
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2652
                self.expression(0)
                self.state = 2653
                self.match(tsqlParser.COMMA)
                self.state = 2654
                self.expression(0)
                self.state = 2655
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2657
                self.match(tsqlParser.SESSION_USER)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2658
                self.match(tsqlParser.SYSTEM_USER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = tsqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2661
            self.match(tsqlParser.WHEN)
            self.state = 2662
            self.expression(0)
            self.state = 2663
            self.match(tsqlParser.THEN)
            self.state = 2664
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_search_condition_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)




    def switch_search_condition_section(self):

        localctx = tsqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2666
            self.match(tsqlParser.WHEN)
            self.state = 2667
            self.search_condition()
            self.state = 2668
            self.match(tsqlParser.THEN)
            self.state = 2669
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_as_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_table_alias" ):
                listener.enterAs_table_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_table_alias" ):
                listener.exitAs_table_alias(self)




    def as_table_alias(self):

        localctx = tsqlParser.As_table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_as_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 2671
                self.match(tsqlParser.AS)


            self.state = 2674
            self.table_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = tsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2676
            self.id_var()
            self.state = 2678
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 2677
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)




    def with_table_hints(self):

        localctx = tsqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2681
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2680
                self.match(tsqlParser.WITH)


            self.state = 2683
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2684
            self.table_hint()
            self.state = 2689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2685
                self.match(tsqlParser.COMMA)
                self.state = 2686
                self.table_hint()
                self.state = 2691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2692
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_with_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_insert_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_with_table_hints" ):
                listener.enterInsert_with_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_with_table_hints" ):
                listener.exitInsert_with_table_hints(self)




    def insert_with_table_hints(self):

        localctx = tsqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self.match(tsqlParser.WITH)
            self.state = 2695
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2696
            self.table_hint()
            self.state = 2701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2697
                self.match(tsqlParser.COMMA)
                self.state = 2698
                self.table_hint()
                self.state = 2703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2704
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_valueContext,i)


        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ID)
            else:
                return self.getToken(tsqlParser.ID, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)




    def table_hint(self):

        localctx = tsqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2707
            _la = self._input.LA(1)
            if _la==tsqlParser.NOEXPAND:
                self.state = 2706
                self.match(tsqlParser.NOEXPAND)


            self.state = 2747
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 2709
                self.match(tsqlParser.INDEX)
                self.state = 2710
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2711
                self.index_value()
                self.state = 2716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2712
                    self.match(tsqlParser.COMMA)
                    self.state = 2713
                    self.index_value()
                    self.state = 2718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2719
                self.match(tsqlParser.RR_BRACKET)

            elif la_ == 2:
                self.state = 2721
                self.match(tsqlParser.INDEX)
                self.state = 2722
                self.match(tsqlParser.EQUAL)
                self.state = 2723
                self.index_value()

            elif la_ == 3:
                self.state = 2724
                self.match(tsqlParser.FORCESEEK)
                self.state = 2739
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 2725
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2726
                    self.index_value()
                    self.state = 2727
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2728
                    self.match(tsqlParser.ID)
                    self.state = 2733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2729
                        self.match(tsqlParser.COMMA)
                        self.state = 2730
                        self.match(tsqlParser.ID)
                        self.state = 2735
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2736
                    self.match(tsqlParser.RR_BRACKET)
                    self.state = 2737
                    self.match(tsqlParser.RR_BRACKET)



            elif la_ == 4:
                self.state = 2741
                self.match(tsqlParser.SERIALIZABLE)

            elif la_ == 5:
                self.state = 2742
                self.match(tsqlParser.SNAPSHOT)

            elif la_ == 6:
                self.state = 2743
                self.match(tsqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 2744
                self.match(tsqlParser.EQUAL)
                self.state = 2745
                self.match(tsqlParser.DECIMAL)

            elif la_ == 7:
                self.state = 2746
                self.match(tsqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)




    def index_value(self):

        localctx = tsqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_index_value)
        try:
            self.state = 2751
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2749
                self.id_var()

            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2750
                self.match(tsqlParser.DECIMAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_alias_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)




    def column_alias_list(self):

        localctx = tsqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2753
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2754
            self.column_alias()
            self.state = 2759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2755
                self.match(tsqlParser.COMMA)
                self.state = 2756
                self.column_alias()
                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2762
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = tsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_column_alias)
        try:
            self.state = 2766
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2764
                self.id_var()

            elif token in [tsqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2765
                self.match(tsqlParser.STRING)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_value_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Expression_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)




    def table_value_constructor(self):

        localctx = tsqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_table_value_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768
            self.match(tsqlParser.VALUES)
            self.state = 2769
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2770
            self.expression_list()
            self.state = 2771
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2772
                self.match(tsqlParser.COMMA)
                self.state = 2773
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2774
                self.expression_list()
                self.state = 2775
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = tsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.expression(0)
            self.state = 2787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2783
                self.match(tsqlParser.COMMA)
                self.state = 2784
                self.expression(0)
                self.state = 2789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ranking_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)




    def ranking_windowed_function(self):

        localctx = tsqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2800
            token = self._input.LA(1)
            if token in [tsqlParser.DENSE_RANK, tsqlParser.RANK, tsqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2790
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DENSE_RANK or _la==tsqlParser.RANK or _la==tsqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2791
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2792
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2793
                self.over_clause()

            elif token in [tsqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2794
                self.match(tsqlParser.NTILE)
                self.state = 2795
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2796
                self.expression(0)
                self.state = 2797
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2798
                self.over_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_distinct_expression(self):
            return self.getTypedRuleContext(tsqlParser.All_distinct_expressionContext,0)


        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)




    def aggregate_windowed_function(self):

        localctx = tsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2834
            token = self._input.LA(1)
            if token in [tsqlParser.AVG, tsqlParser.MAX, tsqlParser.MIN, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.VAR, tsqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2802
                _la = self._input.LA(1)
                if not(_la==tsqlParser.AVG or _la==tsqlParser.MAX or _la==tsqlParser.MIN or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (tsqlParser.STDEV - 369)) | (1 << (tsqlParser.STDEVP - 369)) | (1 << (tsqlParser.SUM - 369)) | (1 << (tsqlParser.VAR - 369)) | (1 << (tsqlParser.VARP - 369)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2803
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2804
                self.all_distinct_expression()
                self.state = 2805
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2807
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                if la_ == 1:
                    self.state = 2806
                    self.over_clause()



            elif token in [tsqlParser.COUNT, tsqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2809
                _la = self._input.LA(1)
                if not(_la==tsqlParser.COUNT or _la==tsqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2810
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2813
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2811
                    self.match(tsqlParser.STAR)

                elif token in [tsqlParser.ALL, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.DISTINCT, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 2812
                    self.all_distinct_expression()

                else:
                    raise NoViableAltException(self)

                self.state = 2815
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2817
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                if la_ == 1:
                    self.state = 2816
                    self.over_clause()



            elif token in [tsqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2819
                self.match(tsqlParser.CHECKSUM_AGG)
                self.state = 2820
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2821
                self.all_distinct_expression()
                self.state = 2822
                self.match(tsqlParser.RR_BRACKET)

            elif token in [tsqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2824
                self.match(tsqlParser.GROUPING)
                self.state = 2825
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2826
                self.expression(0)
                self.state = 2827
                self.match(tsqlParser.RR_BRACKET)

            elif token in [tsqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2829
                self.match(tsqlParser.GROUPING_ID)
                self.state = 2830
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2831
                self.expression_list()
                self.state = 2832
                self.match(tsqlParser.RR_BRACKET)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_distinct_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_all_distinct_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct_expression" ):
                listener.enterAll_distinct_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct_expression" ):
                listener.exitAll_distinct_expression(self)




    def all_distinct_expression(self):

        localctx = tsqlParser.All_distinct_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_all_distinct_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 2836
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 2839
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(tsqlParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(tsqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = tsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2841
            self.match(tsqlParser.OVER)
            self.state = 2842
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2846
            _la = self._input.LA(1)
            if _la==tsqlParser.PARTITION:
                self.state = 2843
                self.match(tsqlParser.PARTITION)
                self.state = 2844
                self.match(tsqlParser.BY)
                self.state = 2845
                self.expression_list()


            self.state = 2849
            _la = self._input.LA(1)
            if _la==tsqlParser.ORDER:
                self.state = 2848
                self.order_by_clause()


            self.state = 2852
            _la = self._input.LA(1)
            if _la==tsqlParser.RANGE or _la==tsqlParser.ROWS:
                self.state = 2851
                self.row_or_range_clause()


            self.state = 2854
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_or_range_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)




    def row_or_range_clause(self):

        localctx = tsqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2856
            _la = self._input.LA(1)
            if not(_la==tsqlParser.RANGE or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 2857
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)




    def window_frame_extent(self):

        localctx = tsqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_window_frame_extent)
        try:
            self.state = 2865
            token = self._input.LA(1)
            if token in [tsqlParser.CURRENT, tsqlParser.UNBOUNDED, tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2859
                self.window_frame_preceding()

            elif token in [tsqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2860
                self.match(tsqlParser.BETWEEN)
                self.state = 2861
                self.window_frame_bound()
                self.state = 2862
                self.match(tsqlParser.AND)
                self.state = 2863
                self.window_frame_bound()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)




    def window_frame_bound(self):

        localctx = tsqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_window_frame_bound)
        try:
            self.state = 2869
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2867
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2868
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_precedingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)




    def window_frame_preceding(self):

        localctx = tsqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_window_frame_preceding)
        try:
            self.state = 2877
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2871
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2872
                self.match(tsqlParser.PRECEDING)

            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2873
                self.match(tsqlParser.DECIMAL)
                self.state = 2874
                self.match(tsqlParser.PRECEDING)

            elif token in [tsqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2875
                self.match(tsqlParser.CURRENT)
                self.state = 2876
                self.match(tsqlParser.ROW)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_followingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)




    def window_frame_following(self):

        localctx = tsqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_window_frame_following)
        try:
            self.state = 2883
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2879
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2880
                self.match(tsqlParser.FOLLOWING)

            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2881
                self.match(tsqlParser.DECIMAL)
                self.state = 2882
                self.match(tsqlParser.FOLLOWING)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_database_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,i)


        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_option" ):
                listener.enterCreate_database_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_option" ):
                listener.exitCreate_database_option(self)




    def create_database_option(self):

        localctx = tsqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 2919
            token = self._input.LA(1)
            if token in [tsqlParser.FILESTREAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2885
                self.match(tsqlParser.FILESTREAM)

                self.state = 2886
                self.database_filestream_option()
                self.state = 2891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2887
                        self.match(tsqlParser.COMMA)
                        self.state = 2888
                        self.database_filestream_option() 
                    self.state = 2893
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,422,self._ctx)


            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2894
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 2895
                self.match(tsqlParser.EQUAL)
                self.state = 2898
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2896
                    self.id_var()

                elif token in [tsqlParser.STRING]:
                    self.state = 2897
                    self.match(tsqlParser.STRING)

                else:
                    raise NoViableAltException(self)


            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2900
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 2901
                self.match(tsqlParser.EQUAL)
                self.state = 2904
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2902
                    self.id_var()

                elif token in [tsqlParser.STRING]:
                    self.state = 2903
                    self.match(tsqlParser.STRING)

                else:
                    raise NoViableAltException(self)


            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2906
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 2907
                self.match(tsqlParser.EQUAL)
                self.state = 2908
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2909
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 2910
                self.match(tsqlParser.EQUAL)
                self.state = 2911
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2912
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 2913
                self.match(tsqlParser.EQUAL)
                self.state = 2914
                self.match(tsqlParser.DECIMAL)

            elif token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2915
                self.match(tsqlParser.DB_CHAINING)
                self.state = 2916
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2917
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 2918
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_filestream_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(tsqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_database_filestream_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_filestream_option" ):
                listener.enterDatabase_filestream_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_filestream_option" ):
                listener.exitDatabase_filestream_option(self)




    def database_filestream_option(self):

        localctx = tsqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2921
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2928
            token = self._input.LA(1)
            if token in [tsqlParser.NON_TRANSACTED_ACCESS]:
                self.state = 2922
                self.match(tsqlParser.NON_TRANSACTED_ACCESS)
                self.state = 2923
                self.match(tsqlParser.EQUAL)
                self.state = 2924
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.OFF or _la==tsqlParser.READ_ONLY):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [tsqlParser.DIRECTORY_NAME]:
                self.state = 2925
                self.match(tsqlParser.DIRECTORY_NAME)
                self.state = 2926
                self.match(tsqlParser.EQUAL)
                self.state = 2927
                self.match(tsqlParser.STRING)

            else:
                raise NoViableAltException(self)

            self.state = 2930
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_file_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(tsqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(tsqlParser.File_specContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_file_spec" ):
                listener.enterDatabase_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_file_spec" ):
                listener.exitDatabase_file_spec(self)




    def database_file_spec(self):

        localctx = tsqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_database_file_spec)
        try:
            self.state = 2934
            token = self._input.LA(1)
            if token in [tsqlParser.FILEGROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2932
                self.file_group()

            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2933
                self.file_spec()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(tsqlParser.FILEGROUP, 0)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CONTAINS)
            else:
                return self.getToken(tsqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_group" ):
                listener.enterFile_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_group" ):
                listener.exitFile_group(self)




    def file_group(self):

        localctx = tsqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2936
            self.match(tsqlParser.FILEGROUP)
            self.state = 2937
            self.id_var()
            self.state = 2940
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.state = 2938
                self.match(tsqlParser.CONTAINS)
                self.state = 2939
                self.match(tsqlParser.FILESTREAM)


            self.state = 2943
            _la = self._input.LA(1)
            if _la==tsqlParser.DEFAULT:
                self.state = 2942
                self.match(tsqlParser.DEFAULT)


            self.state = 2947
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINS:
                self.state = 2945
                self.match(tsqlParser.CONTAINS)
                self.state = 2946
                self.match(tsqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 2949
            self.file_spec()
            self.state = 2954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,431,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2950
                    self.match(tsqlParser.COMMA)
                    self.state = 2951
                    self.file_spec() 
                self.state = 2956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,431,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.file_path = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.EQUAL)
            else:
                return self.getToken(tsqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(tsqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(tsqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(tsqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(tsqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_spec" ):
                listener.enterFile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_spec" ):
                listener.exitFile_spec(self)




    def file_spec(self):

        localctx = tsqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2957
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2958
            self.match(tsqlParser.NAME)
            self.state = 2959
            self.match(tsqlParser.EQUAL)
            self.state = 2962
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 2960
                self.id_var()

            elif token in [tsqlParser.STRING]:
                self.state = 2961
                self.match(tsqlParser.STRING)

            else:
                raise NoViableAltException(self)

            self.state = 2965
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 2964
                self.match(tsqlParser.COMMA)


            self.state = 2967
            self.match(tsqlParser.FILENAME)
            self.state = 2968
            self.match(tsqlParser.EQUAL)
            self.state = 2969
            localctx.file_path = self.match(tsqlParser.STRING)
            self.state = 2971
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 2970
                self.match(tsqlParser.COMMA)


            self.state = 2979
            _la = self._input.LA(1)
            if _la==tsqlParser.SIZE:
                self.state = 2973
                self.match(tsqlParser.SIZE)
                self.state = 2974
                self.match(tsqlParser.EQUAL)
                self.state = 2975
                self.file_size()
                self.state = 2977
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2976
                    self.match(tsqlParser.COMMA)




            self.state = 2990
            _la = self._input.LA(1)
            if _la==tsqlParser.MAXSIZE:
                self.state = 2981
                self.match(tsqlParser.MAXSIZE)
                self.state = 2982
                self.match(tsqlParser.EQUAL)
                self.state = 2985
                token = self._input.LA(1)
                if token in [tsqlParser.DECIMAL]:
                    self.state = 2983
                    self.file_size()

                elif token in [tsqlParser.UNLIMITED]:
                    self.state = 2984
                    self.match(tsqlParser.UNLIMITED)

                else:
                    raise NoViableAltException(self)

                self.state = 2988
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2987
                    self.match(tsqlParser.COMMA)




            self.state = 2998
            _la = self._input.LA(1)
            if _la==tsqlParser.FILEGROWTH:
                self.state = 2992
                self.match(tsqlParser.FILEGROWTH)
                self.state = 2993
                self.match(tsqlParser.EQUAL)
                self.state = 2994
                self.file_size()
                self.state = 2996
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2995
                    self.match(tsqlParser.COMMA)




            self.state = 3000
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # Id_varContext
            self.database = None # Id_varContext
            self.schema = None # Id_varContext
            self.table = None # Id_varContext

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)




    def full_table_name(self):

        localctx = tsqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3019
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3002
                localctx.server = self.id_var()
                self.state = 3003
                self.match(tsqlParser.DOT)
                self.state = 3004
                localctx.database = self.id_var()
                self.state = 3005
                self.match(tsqlParser.DOT)
                self.state = 3006
                localctx.schema = self.id_var()
                self.state = 3007
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3009
                localctx.database = self.id_var()
                self.state = 3010
                self.match(tsqlParser.DOT)
                self.state = 3012
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 3011
                    localctx.schema = self.id_var()


                self.state = 3014
                self.match(tsqlParser.DOT)

            elif la_ == 3:
                self.state = 3016
                localctx.schema = self.id_var()
                self.state = 3017
                self.match(tsqlParser.DOT)


            self.state = 3021
            localctx.table = self.id_var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_varContext
            self.schema = None # Id_varContext
            self.table = None # Id_varContext

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = tsqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3033
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.state = 3023
                localctx.database = self.id_var()
                self.state = 3024
                self.match(tsqlParser.DOT)
                self.state = 3026
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 3025
                    localctx.schema = self.id_var()


                self.state = 3028
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3030
                localctx.schema = self.id_var()
                self.state = 3031
                self.match(tsqlParser.DOT)


            self.state = 3035
            localctx.table = self.id_var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # Id_varContext
            self.name = None # Id_varContext

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)




    def simple_name(self):

        localctx = tsqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3040
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 3037
                localctx.schema = self.id_var()
                self.state = 3038
                self.match(tsqlParser.DOT)


            self.state = 3042
            localctx.name = self.id_var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_proc_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_varContext
            self.schema = None # Id_varContext
            self.procedure = None # Id_varContext

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_proc_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name" ):
                listener.enterFunc_proc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name" ):
                listener.exitFunc_proc_name(self)




    def func_proc_name(self):

        localctx = tsqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3054
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.state = 3044
                localctx.database = self.id_var()
                self.state = 3045
                self.match(tsqlParser.DOT)
                self.state = 3047
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 3046
                    localctx.schema = self.id_var()


                self.state = 3049
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3051
                localctx.schema = self.id_var()
                self.state = 3052
                self.match(tsqlParser.DOT)


            self.state = 3056
            localctx.procedure = self.id_var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)




    def ddl_object(self):

        localctx = tsqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_ddl_object)
        try:
            self.state = 3060
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3058
                self.full_table_name()

            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3059
                self.match(tsqlParser.LOCAL_ID)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)




    def full_column_name(self):

        localctx = tsqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_full_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3065
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.state = 3062
                self.table_name()
                self.state = 3063
                self.match(tsqlParser.DOT)


            self.state = 3067
            self.id_var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_varContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_varContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = tsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3069
            self.id_var()
            self.state = 3074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3070
                self.match(tsqlParser.COMMA)
                self.state = 3071
                self.id_var()
                self.state = 3076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = tsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_cursor_name)
        try:
            self.state = 3079
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3077
                self.id_var()

            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3078
                self.match(tsqlParser.LOCAL_ID)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_offContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)




    def on_off(self):

        localctx = tsqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3081
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusteredContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(tsqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(tsqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)




    def clustered(self):

        localctx = tsqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3083
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)




    def null_notnull(self):

        localctx = tsqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3086
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 3085
                self.match(tsqlParser.NOT)


            self.state = 3088
            self.match(tsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scalar_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)




    def scalar_function_name(self):

        localctx = tsqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_scalar_function_name)
        try:
            self.state = 3095
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3090
                self.func_proc_name()

            elif token in [tsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3091
                self.match(tsqlParser.RIGHT)

            elif token in [tsqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3092
                self.match(tsqlParser.LEFT)

            elif token in [tsqlParser.BINARY_CHECKSUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3093
                self.match(tsqlParser.BINARY_CHECKSUM)

            elif token in [tsqlParser.CHECKSUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3094
                self.match(tsqlParser.CHECKSUM)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_var(self):
            return self.getTypedRuleContext(tsqlParser.Id_varContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = tsqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3097
            self.id_var()
            self.state = 3099
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                self.state = 3098
                self.match(tsqlParser.IDENTITY)


            self.state = 3108
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.state = 3101
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3102
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MAX or _la==tsqlParser.DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 3105
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3103
                    self.match(tsqlParser.COMMA)
                    self.state = 3104
                    self.match(tsqlParser.DECIMAL)


                self.state = 3107
                self.match(tsqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = tsqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_default_value)
        try:
            self.state = 3112
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3110
                self.match(tsqlParser.NULL)

            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3111
                self.constant()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(tsqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = tsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3129
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3114
                self.match(tsqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3115
                self.match(tsqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3117
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3116
                    self.sign()


                self.state = 3119
                self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3121
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3120
                    self.sign()


                self.state = 3123
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FLOAT or _la==tsqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3125
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3124
                    self.sign()


                self.state = 3127
                localctx.dollar = self.match(tsqlParser.DOLLAR)
                self.state = 3128
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)




    def sign(self):

        localctx = tsqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3131
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(tsqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_id_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_var" ):
                listener.enterId_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_var" ):
                listener.exitId_var(self)




    def id_var(self):

        localctx = tsqlParser.Id_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_id_var)
        try:
            self.state = 3136
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3133
                self.simple_id()

            elif token in [tsqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3134
                self.match(tsqlParser.DOUBLE_QUOTE_ID)

            elif token in [tsqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3135
                self.match(tsqlParser.SQUARE_BRACKET_ID)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def CATCH(self):
            return self.getToken(tsqlParser.CATCH, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def NOCOUNT(self):
            return self.getToken(tsqlParser.NOCOUNT, 0)

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def NUMBER(self):
            return self.getToken(tsqlParser.NUMBER, 0)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def TRY(self):
            return self.getToken(tsqlParser.TRY, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)




    def simple_id(self):

        localctx = tsqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3138
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCESEEK or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (tsqlParser.ABSOLUTE - 194)) | (1 << (tsqlParser.APPLY - 194)) | (1 << (tsqlParser.AUTO - 194)) | (1 << (tsqlParser.AVG - 194)) | (1 << (tsqlParser.BASE64 - 194)) | (1 << (tsqlParser.CALLER - 194)) | (1 << (tsqlParser.CAST - 194)) | (1 << (tsqlParser.CATCH - 194)) | (1 << (tsqlParser.CHECKSUM_AGG - 194)) | (1 << (tsqlParser.COMMITTED - 194)) | (1 << (tsqlParser.CONCAT - 194)) | (1 << (tsqlParser.CONTROL - 194)) | (1 << (tsqlParser.COOKIE - 194)) | (1 << (tsqlParser.COUNT - 194)) | (1 << (tsqlParser.COUNT_BIG - 194)) | (1 << (tsqlParser.DELAY - 194)) | (1 << (tsqlParser.DELETED - 194)) | (1 << (tsqlParser.DENSE_RANK - 194)) | (1 << (tsqlParser.DISABLE - 194)) | (1 << (tsqlParser.DYNAMIC - 194)) | (1 << (tsqlParser.ENCRYPTION - 194)) | (1 << (tsqlParser.EXPAND - 194)) | (1 << (tsqlParser.FAST - 194)) | (1 << (tsqlParser.FAST_FORWARD - 194)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GO - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)) | (1 << (tsqlParser.MIN - 261)) | (1 << (tsqlParser.MODIFY - 261)) | (1 << (tsqlParser.NAME - 261)) | (1 << (tsqlParser.NEXT - 261)) | (1 << (tsqlParser.NOCOUNT - 261)) | (1 << (tsqlParser.NOEXPAND - 261)) | (1 << (tsqlParser.NORECOMPUTE - 261)) | (1 << (tsqlParser.NTILE - 261)) | (1 << (tsqlParser.NUMBER - 261)) | (1 << (tsqlParser.OFFSET - 261)) | (1 << (tsqlParser.ONLINE - 261)) | (1 << (tsqlParser.ONLY - 261)) | (1 << (tsqlParser.OPTIMISTIC - 261)) | (1 << (tsqlParser.OPTIMIZE - 261)) | (1 << (tsqlParser.OUT - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OUTPUT - 325)) | (1 << (tsqlParser.OWNER - 325)) | (1 << (tsqlParser.PARAMETERIZATION - 325)) | (1 << (tsqlParser.PARTITION - 325)) | (1 << (tsqlParser.PATH - 325)) | (1 << (tsqlParser.PRECEDING - 325)) | (1 << (tsqlParser.PRIOR - 325)) | (1 << (tsqlParser.PRIVILEGES - 325)) | (1 << (tsqlParser.RANGE - 325)) | (1 << (tsqlParser.RANK - 325)) | (1 << (tsqlParser.READONLY - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.RECOMPILE - 325)) | (1 << (tsqlParser.RELATIVE - 325)) | (1 << (tsqlParser.REMOTE - 325)) | (1 << (tsqlParser.REPEATABLE - 325)) | (1 << (tsqlParser.ROBUST - 325)) | (1 << (tsqlParser.ROOT - 325)) | (1 << (tsqlParser.ROW - 325)) | (1 << (tsqlParser.ROWGUID - 325)) | (1 << (tsqlParser.ROWS - 325)) | (1 << (tsqlParser.ROW_NUMBER - 325)) | (1 << (tsqlParser.SAMPLE - 325)) | (1 << (tsqlParser.SCHEMABINDING - 325)) | (1 << (tsqlParser.SCROLL - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)) | (1 << (tsqlParser.SELF - 325)) | (1 << (tsqlParser.SERIALIZABLE - 325)) | (1 << (tsqlParser.SIMPLE - 325)) | (1 << (tsqlParser.SNAPSHOT - 325)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 325)) | (1 << (tsqlParser.STATIC - 325)) | (1 << (tsqlParser.STATS_STREAM - 325)) | (1 << (tsqlParser.STDEV - 325)) | (1 << (tsqlParser.STDEVP - 325)) | (1 << (tsqlParser.SUM - 325)) | (1 << (tsqlParser.TEXTIMAGE_ON - 325)) | (1 << (tsqlParser.THROW - 325)) | (1 << (tsqlParser.TIES - 325)) | (1 << (tsqlParser.TIME - 325)) | (1 << (tsqlParser.TRY - 325)) | (1 << (tsqlParser.TYPE - 325)) | (1 << (tsqlParser.TYPE_WARNING - 325)) | (1 << (tsqlParser.UNBOUNDED - 325)) | (1 << (tsqlParser.UNCOMMITTED - 325)) | (1 << (tsqlParser.UNKNOWN - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.ID - 390)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comparison_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = tsqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_comparison_operator)
        try:
            self.state = 3155
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3140
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3141
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3142
                self.match(tsqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3143
                self.match(tsqlParser.LESS)
                self.state = 3144
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3145
                self.match(tsqlParser.GREATER)
                self.state = 3146
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3147
                self.match(tsqlParser.LESS)
                self.state = 3148
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3149
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3150
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3151
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3152
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3153
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3154
                self.match(tsqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = tsqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3157
            _la = self._input.LA(1)
            if not(((((_la - 415)) & ~0x3f) == 0 and ((1 << (_la - 415)) & ((1 << (tsqlParser.PLUS_ASSIGN - 415)) | (1 << (tsqlParser.MINUS_ASSIGN - 415)) | (1 << (tsqlParser.MULT_ASSIGN - 415)) | (1 << (tsqlParser.DIV_ASSIGN - 415)) | (1 << (tsqlParser.MOD_ASSIGN - 415)) | (1 << (tsqlParser.AND_ASSIGN - 415)) | (1 << (tsqlParser.XOR_ASSIGN - 415)) | (1 << (tsqlParser.OR_ASSIGN - 415)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(tsqlParser.KB, 0)

        def MB(self):
            return self.getToken(tsqlParser.MB, 0)

        def GB(self):
            return self.getToken(tsqlParser.GB, 0)

        def TB(self):
            return self.getToken(tsqlParser.TB, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_size" ):
                listener.enterFile_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_size" ):
                listener.exitFile_size(self)




    def file_size(self):

        localctx = tsqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3159
            self.match(tsqlParser.DECIMAL)
            self.state = 3161
            _la = self._input.LA(1)
            if ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (tsqlParser.GB - 267)) | (1 << (tsqlParser.KB - 267)) | (1 << (tsqlParser.MB - 267)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE:
                self.state = 3160
                _la = self._input.LA(1)
                if not(((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (tsqlParser.GB - 267)) | (1 << (tsqlParser.KB - 267)) | (1 << (tsqlParser.MB - 267)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[86] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         




